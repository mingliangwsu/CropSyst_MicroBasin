#ifndef sample_cumulative_TH
#define sample_cumulative_TH
#include "corn/math/statistical/sample_T.h"

namespace CORN {
//______________________________________________________________________________
template
   <typename Observation_type                                                    //140624
   ,typename Element_type>
class Statistical_sample_cumulative
: public Statistical_sample<Observation_type,Element_type>
{private:
   nat32  count;
   Observation_type  initial_value;  // The first observation                    //140624_130918
 public:
   Statistical_sample_cumulative<Observation_type,Element_type>(nat16 applicable_ = STAT_ALL_bits)
      : Statistical_sample<Observation_type,Element_type>(applicable_)
      , count(0)
      , initial_value(std::numeric_limits<Observation_type>::quiet_NaN())        //131017_130918
      { reset();}
   Statistical_sample_cumulative<Observation_type,Element_type>
      (const Observation_type & observation_
      ,nat16 applicable_/* = STAT_ALL_bits*/)
      : Statistical_sample<Observation_type,Element_type>(observation_,applicable_)
      , count(0)
      , initial_value(std::numeric_limits<Observation_type>::quiet_NaN())        //130918
      { reset();}
   //______________________________________________________________________________
   virtual bool reset()
   // may want to return bool
      {  count = 0;
         initial_value = std::numeric_limits<Observation_type>::quiet_NaN();     //130918
         Statistical_sample<Observation_type,Element_type>::reset();
         return true;
      }
   //______________________________________________________________________________
   virtual Observation_type append(Observation_type value)
      {
         Statistical_sample<Observation_type,Element_type>::append(value);
         count++;
         if (count == 1) initial_value = value;                                   //130918
         Statistical_sample<Observation_type,Element_type>::set_valid(STAT_count_bit);
         Statistical_sample<Observation_type,Element_type>::summation += value;
         Statistical_sample<Observation_type,Element_type>::arithmetic_mean = Statistical_sample<Observation_type,Element_type>::summation/(Element_type)count;
         Statistical_sample<Observation_type,Element_type>::minimum = std::min<Element_type>(Statistical_sample<Observation_type,Element_type>::minimum,value);
         Statistical_sample<Observation_type,Element_type>::maximum = std::max<Element_type>(Statistical_sample<Observation_type,Element_type>::maximum,value);
         Statistical_sample<Observation_type,Element_type>::sum_of_squares += CORN_sqr(value);                                      //100710
         Statistical_sample<Observation_type,Element_type>::set_valid(STAT_sum_bit|STAT_sum_sqrs_bit|STAT_arithmetic_mean_bit|STAT_min_bit|STAT_max_bit);
         return value;
      }
   //_2013-08-01_1998-03-05_____________________________________________________
   /*151111 moved to Statistical_sample
   virtual bool commit()                                           modification_
      {  //Statistical_sample<Real>::append(Statistical_sample<Real>::observation);
         //append(*((Element_type)(Statistical_sample<Observation_type,Element_type>::observation))); //140624
         append(((Element_type)(Statistical_sample<Observation_type,Element_type>::observation))); //140624
         return true;
      }
   */
   //______________________________________________________________________________
 protected:
   virtual float64 calc_standard_deviation()                     const
      // Note that the cumulatively calculated standard deviation will be
      // slightly different from a caculation from all values in the sample.
      // I think this might be considered more like an an estimation.
      {  float64 mean = get_arithmetic_mean();
         float64 term = (count) ? Statistical_sample<Observation_type,Element_type>::sum_of_squares/count - CORN_sqr(mean) : 0.0;   //020701
         float64 standard_deviation = (term > 0.0)
         ? sqrt(term)
         : 0.0;
         return standard_deviation;
      }
   //______________________________________________________________________________
 public:
   virtual float64 get_min()                                               const { return (float64)Statistical_sample<Observation_type,Element_type>::minimum; }
   virtual float64 get_max()                                               const { return (float64)Statistical_sample<Observation_type,Element_type>::maximum; }
   virtual float64 get_sum()                                               const { return (float64)Statistical_sample<Observation_type,Element_type>::summation; }
   virtual float64 get_arithmetic_mean()                                   const { return (float64)Statistical_sample<Observation_type,Element_type>::arithmetic_mean; }
   virtual float64 get_mean() /*alias */                                   const { return (float64)Statistical_sample<Observation_type,Element_type>::arithmetic_mean; }
   virtual float64 get_sum_of_squares()                                    const { return (float64)Statistical_sample<Observation_type,Element_type>::sum_of_squares; }
   virtual float64 get_initial()                                           const { return (float64)initial_value; }

   virtual float64 /*Element_type*/ provide_initial()                          provision_{ return (float64)initial_value; }
   //______________________________________________________________________________
   virtual float64/*Real*/ provide_standard_deviation()                provision_
      {  if (!Statistical_sample<Observation_type,Element_type>::get_valid(STAT_std_dev_bit))
         {  Statistical_sample<Observation_type,Element_type>::standard_deviation = calc_standard_deviation();
            Statistical_sample<Observation_type,Element_type>::set_valid(STAT_std_dev_bit);
         }
         return Statistical_sample<Observation_type,Element_type>::standard_deviation;
      }
   //______________________________________________________________________________
   virtual float64/*Real*/ provide_coefficient_of_variation()          provision_
      {  if (!Statistical_sample<Observation_type,Element_type>::get_valid(STAT_coef_var_bit))
         {  Statistical_sample<Observation_type,Element_type>::coefficient_of_variation = Statistical_sample<Observation_type,Element_type>::calc_coefficient_of_variation();
            Statistical_sample<Observation_type,Element_type>::set_valid(STAT_coef_var_bit);
         }
         return Statistical_sample<Observation_type,Element_type>::coefficient_of_variation;
      }
   //_2009-10-02___________________________________________________________________
   //   inline virtual Real get_median()                                    provision_{return 0;} //010406
      // This class is not able to calculate a median

   inline virtual nat32 get_count()                                        const { return count; };   //010604

/*
 public:  // These reference accessor are intened to allow the
         // statistical tallies to be hooked up to the user interface.

         // these are obsolete because we now have the statistics as public
//130801   inline Real *bind_from_minimum()                                           { return &minimum; }; //060929
//130801   inline Real *bind_from_maximum()                                           { return &maximum; }; //060929
//130801   inline Real &ref_current()                                                 { return  current; }; //060929
*/
};
//_1999-03-31___________________________________________________________________
/* NYI This is only used by CropSyst Crop I should move this
template <typename Real>
class Statistical_sample_cumulative_index        // This is only used by CropSyst, probably should move it
: public Statistical_sample_cumulative<Real>
{
public:
   Real index;		// 1 = max stress 0 = no stress So recorder can reference
public:
   Statistical_sample_cumulative_index()
      :Statistical_sample_cumulative<Real>
      , index(0.0)
      { current = 1.0; }                                                         //040812
	virtual Real append(Real value)
      {  Statistical_sample_cumulative<Real>::append(value);
         current = value;
         index = 1 - value;
         return value;
      }
	virtual  void reset();
      {  Statistical_sample_cumulative<Real>::reset();
         current = 1.0;
         index = 0.0;
      }
};
*/
//_2001-07-26___________________________________________________________________
}; // namespace CORN;

#endif
//stats

