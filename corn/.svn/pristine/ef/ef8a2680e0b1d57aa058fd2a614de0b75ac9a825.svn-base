#ifdef DEPRECATED
now use Dynamic_array<nat8>

#ifdef USE_PCH
#  include <corn/container/struct_pch.h>
#else
#  include <corn/dynamic_array/da_uint8.h>
#endif
#pragma hdrstop

/*001206*/ namespace CORN {
//______________________________________________________________________________
/*______*/ Dynamic_uint8_array::Dynamic_uint8_array
/*______*/  (uint32 initial_size       // This is the initial allocation space
/*______*/  ,uint32 i_resize_overage
/*______*/  ,uint8 i_default_value
/*______*/  )   // This is the overage to give on reallocation
/*000517*/  : Dynamic_array_common(initial_size,i_resize_overage)
/*______*/  , array(new uint8[(sizeof(uint8) * (initial_size))])
/*000804*/  , default_value(i_default_value)
/*______*/ {
/*______*/       for (uint32 i = 0; i < initial_size; i++)
/*______*/          array[i] = default_value;
/*______*/ };
//______________________________________________________________________________
/*______*/ Dynamic_uint8_array::Dynamic_uint8_array
/*______*/  (uint8 i_default_value)
/*000517*/  : Dynamic_array_common(1,10)
/*______*/  , array(new uint8[(sizeof(uint8) * (1))])
/*000804*/  ,default_value(i_default_value)
/*______*/ {
/*______*/     for (uint32 i = 0; i < 1; i++)
/*______*/          array[i] = default_value;
/*000718*/     terminal_index = 0;
/*000718*/     empty_list = true;
/*______*/ };
//______________________________________________________________________________
/*070430*/ Dynamic_uint8_array::Dynamic_uint8_array
/*______*/  ()
/*000517*/  : Dynamic_array_common(1,10)
/*______*/  , array(new uint8[(sizeof(uint8) * (1))])
/*000804*/  ,default_value(0.0)
/*______*/ {
/*______*/     for (uint32 i = 0; i < 1; i++)
/*______*/          array[i] = 0.0;
/*000718*/     terminal_index = 0;
/*000718*/     empty_list = true;
/*______*/ };
//______________________________________________________________________________
/*______*/ void Dynamic_uint8_array::set(const Dynamic_uint8_array &to_copy,uint32 new_size)
/*______*/ {
/*______*/       uint32 tocopy_max_index = to_copy.get_terminal_index();
/*990428*/       { if (get_terminal_index() != tocopy_max_index)
/*000225*/           resize(new_size ? new_size : (uint32)(tocopy_max_index+1));
/*______*/
/*______*/       for (uint32 i = 0; i <= get_terminal_index(); i++)
/*______*/          set(i,to_copy.get_no_resize(i));
/*990428*/       }
/*______*/       changed = true;
/*______*/ };
//______________________________________________________________________________
/*______*/ Dynamic_uint8_array::~Dynamic_uint8_array()
/*______*/ {
/*______*/     if (array)
/*______*/           delete[] array;
/*______*/ };
//______________________________________________________________________________
/*000225_*/ Dynamic_uint8_array::Dynamic_uint8_array(const Dynamic_uint8_array &to_copy)
/*000517*/  : Dynamic_array_common(to_copy)
/*______*/  , array(0)
/*000804*/  ,default_value(to_copy.default_value)
/*______*/ {
/*000707*/     uint32 copy_all_elements = terminal_index+1;
/*000517*/     terminal_index = 0;
/*______*/     set(to_copy,copy_all_elements);
/*______*/ };
//______________________________________________________________________________
/*______*/ uint8 Dynamic_uint8_array::set(uint32 index,uint8 value)
/*______*/ {
/*000517*/     if_necessary_resize_for(index);
/*______*/     array[index] = value;
/*000710*/     empty_list = false;
/*______*/     return value;
/*______*/ };
//______________________________________________________________________________
/*______*/ uint8 Dynamic_uint8_array::get_no_resize(uint32 index) const
/*______*/ {     bool index_outof_range = ((index >= current_size_plus_overage) || ((int32)index > terminal_index));
/*990718*/       return  index_outof_range
/*990408*/       ? default_value
/*______*/       : array[index];
/*______*/ };
//______________________________________________________________________________
/*______*/ void Dynamic_uint8_array::reallocate_array(uint32 bloated_new_size) const
/*______*/ {
/*______*/     uint8 *new_array = new uint8[sizeof(uint8) * bloated_new_size];
/*000707*/     if (array)
/*______*/     {
/*______*/        for (uint32 i = 0; i < bloated_new_size; i++)
/*______*/          new_array[i] = (i < current_size_plus_overage) ? array[i] : (uint8)default_value;
/*______*/        delete[] array;
/*______*/     };
/*______*/     array = new_array;
/*______*/ };
//______________________________________________________________________________
/*______*/ void Dynamic_uint8_array::remove(uint32 at_index)
/*______*/ {
/*______*/    // This removes the number at the specified index.
/*______*/    // all following array elements are moved down one cell and the ?max_index? is decremented
/*000707*/    if (!empty_list)
/*______*/    {
/*______*/     for (uint32 i = at_index; (int32)i < terminal_index; i++)
/*______*/        array[i] = array[i+1];
/*______*/     if (terminal_index == 0)
/*______*/        empty_list = true;
/*______*/     else
/*______*/        terminal_index = (uint32)(terminal_index - 1);
/*______*/    };
/*______*/ };
//______________________________________________________________________________
/*001206*/ } // namespace CORN
#endif
