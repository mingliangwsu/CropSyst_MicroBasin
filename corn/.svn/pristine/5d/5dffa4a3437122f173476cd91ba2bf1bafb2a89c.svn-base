#ifndef CORN_WKS_FILE_H
#define CORN_WKS_FILE_H

/*
   This set of classes allow reading and writing
   Lotus 1-2-3 WKS spreadsheet files.

   Currently only number and string/label cells are supported.
   Refer to the WKS_ codes listed at the top of wks_file.cpp
   to see the kinds of records currently supported.

   Although I have an input file class, it is intended only for
   reading files generated with the output file class. I have not
   tried to use it to read WKS file generated by Lotus 1-2-3 or
   other programs.

   How to use these classes:

   First create an instance of WKS_output_file or WKS_input_file
   (The WKS_file is a base class, do not try to use it.)

   To read the file, use  WKS_input_file::read_record()
   This function reads the next Lotus record from the input file
   and returns the type of record.
   Read record is usually put inside a loop

   {
   WKS_input_file myfile("filename.wks");
   if (myfile.good())
     while (!myfile.eof())
     {
       switch (myfile.data_type)
       {
         case NOT_DATA    : ; break;
         case TYPE_STR    : use the str_value and alignment variables; break;
         case TYPE_DATE   : use the date-value; break;
         case TYPE_INTEGER: use the int_value ; break;
         case TYPE_FLOAT  : use the double_value and precision variables; break;
       };

       or

       switch (myfile.read_record())
       { case WKS_CODE_xxx :  xxxx;   break;
          .....
       };
     };
   };

   read_record setups up the following variables WKS_input_file
   variables, refer to the WKS_input_file declaration.
*/

#include <stdio.h>
#ifndef primitiveH
#  include "corn/primitive.h"
#endif
#include "corn/format/css_file.h"

#ifdef USE_CORN_DATES
#error I don't know the Lotus date format, so I am not currently supporting it
#include "corn/date_time/date.h"
#endif

// In the data file columns and rows are indexed from 0

#define byte unsigned char

// 100 may be the MAX number of columns handled by Lotus

#define   WKS_protected               1
#define   WKS_unprotected             0

#define   WKS_gen_format_integer      0

#define   WKS_format_fixed            0
#define   WKS_format_sci              1
#define   WKS_format_currency         2
#define   WKS_format_percent          3
#define   WKS_format_comma            4
#define   WKS_format_unused1          5
#define   WKS_format_unused2          6
#define   WKS_format_special          7

#define   WKS_special_plusminus       0
#define   WKS_special_general         1
#define   WKS_special_day_month_year  2
#define   WKS_special_day_month       3
#define   WKS_special_month_year      4
#define   WKS_special_text            5
#define   WKS_special_default        15

#define   WKS_justify_left            39
#define   WKS_justify_right           34   /* " */
#define   WKS_justify_center          94   /* ^ */
#define   WKS_justify_unknown         92   /* \ */

#define  WKS_CODE_EOF           0x1  /*  End of file */

#define WKS_TEXT_FORMAT gen_format(0,WKS_format_special,WKS_special_text)
//______________________________________________________________________________
/*  Specials for symphony
     6                hidden
     7                date;hour-min-sec
     8                date;hour-min
     9                date;intnt'l1
     10               date;intnt'l1
     11               time;intnt'l1
     12               time;intnt'l2
     13-14            unused
*/
//______________________________________________________________________________
struct Header_struct
{
  int16 code;
  int16 length;
};
//______________________________________________________________________________
struct Margins_struct
{
   // Printing setting
   byte left;
   byte right;
   byte page_length;  // 0 if not pagination
   byte top;
   byte bottom;
};
//______________________________________________________________________________
struct Print_range_struct
{
   int16 start_col;
   int16 start_row;
   int16 end_col;
   int16 end_row;
};
//______________________________________________________________________________
class WKS_file
: public Common_spreadsheet_file                                                 //981016
{
 public:
   struct Margins_struct    margins;  // print margins
   bool print_range_enabled;
   struct Print_range_struct print_range;
   uint16 WKS_version;                                                           //001206
 public: // Constructors/destructors
   // Constructor for input
   WKS_file(const char *i_filename);                                             //981016
   // Constructor for output
   WKS_file
      (const char *i_filename
      ,int16 i_first_row   ,int16 i_rows
      ,int16 i_first_col   ,int16 i_cols);
   virtual inline WKS_file::~WKS_file()                                          //981016
   {
      write_EOF_record();
   }
 protected: // abstract methods not needed for WKS format
   inline virtual void write_dimensions
    (int16 first_row
    ,int16 rows
    ,int16 first_col
    ,int16 cols)
      {}                                                                           //981006
   inline virtual void write_col_width
   (int16 from_col
   ,int16 to_col
   ,int16 col_width_in_chars)
      {}
   virtual Record_type read_next(Record_type filter_type = any_record);
 public:
   void write_window1
   (
    int16 cursor_col,
    int16 cursor_row,
    byte format,
    int16 col_width,
    int16 cols_screen,
    int16 rows_screen,
    int16 col_left,
    int16 row_top,
    int16 cols_title,
    int16 rows_title,
    int16 col_title,
    int16 row_title,
    int16 col_width_border,
    int16 row_width_border,
    int16 win_width
   );
   void put_byte(byte value);
   void write_column_width(int16 col,int16 width);
   virtual void write_integer_cell  (int16 col, int16 row, int16 value);
   virtual void write_number_cell   (int16 col, int16 row, float64 value, int8 precision);
   virtual void write_label_cell    (int16 col, int16 row, CSS_justifications i_alignment,const char *i_value);
   byte gen_format(byte protection, byte format_type, byte decimals_special);
   void set_margins(int16 left_margin, int16 right_margin, int16 page_length, int16 top_margin, int16 bottom_margin);
public:
   // These variables are for the current cell
   // These could be set up as a union.
   bool protection;  // can be ignored
   byte format_type;    // can be ignored
   byte special_format; // can be ignored
   // These variables are for the worksheet
   byte  column_widths[MAX_COLUMNS];//The column width set by WKS_CODE_COLW1
   char  header[255];        // Header string set by WKS_CODE_HEADER
private:
   void  read_cell();
   void write_cell(int16 col, int16 row,uint8 format);
public: // The following are overrides of derived virtuals
   // The following functions should not be used by end programmer
   virtual void read_integer_cell(bool expect_header = false);
   virtual void read_number_cell(bool expect_header = false);
   virtual void read_label_cell(bool expect_header = false);                     //981016

   bool read_BOF_record();                                                       //981016
   virtual void write_BOF_record();                                              //981016
   virtual void write_EOF_record();                                              //981016
 protected: // The following are CSS overrides
   virtual uint16 get_BOF_code() const;
   virtual uint16 get_EOF_code() const;
 protected: // The following are specific to WKS format
   void read_column_width();
   void read_margins();
   void read_header(int16 length);
   void read_print_range();
   void extract_format(byte format);
   // use only the following functions:
   virtual int16 read_record();
   // Returns the type of record (the actual rec header code will be stored in rec_code),
   // Input settings for the cell will be set up if it is a data cell record
};

#define  WKS_CODE_BOF           0x0  /*  Beginning of file */
#define  WKS_CODE_EOF           0x1  /*  End of file */

// Not used by ROGER
//#define  WKS_CODE_CALCMODE      0x2  /*   1   Calculation mode        */
//#define  WKS_CODE_CALCORDER     0x3  /*   1   Calculation order       */
//#define  WKS_CODE_SPLIT         0x4  /*   1   Split window type       */
//#define  WKS_CODE_SYNC          0x5  /*   1   Split window sync       */
//#define  WKS_CODE_RANGE         0x6  /*   8   Active worksheet range  */
// end of not used

#define  WKS_CODE_WINDOW1       0x7  /* Window 1 record       */
#define  WKS_CODE_COLW1         0x8  /* Column width,window 1 */

// Not used by Roger
//#define  WKS_CODE_WINTWO        0x9  /*  31   Window 2 record         */
//#define  WKS_CODE_COLW2         0xA  /*   3   Column width,window 2   */
//#define  WKS_CODE_NAME          0xB  /*  24   Named range             */
/// end of not used

#define  WKS_CODE_BLANK         0xC  /*  Blank cell               */
#define  WKS_CODE_INTEGER       0xD  /*  Integer number cell      */
#define  WKS_CODE_NUMBER        0xE  /*  Floating point number    */
#define  WKS_CODE_LABEL         0xF  /*  Label cell               */

// Not used by Roger
//#define  WKS_CODE_FORMULA      0x10 /*  variable  Formula cell               */
//#define  WKS_CODE_TABLE        0x18 /*  25  Data table range                 */
//#define  WKS_CODE_ORANGE       0x19 /*  25  Query range                      */
#define  WKS_CODE_PRANGE       0x1A /*   8  Print range                      */
//#define  WKS_CODE_SRANGE       0x1B /*   8  Sort range                       */
//#define  WKS_CODE_FRANGE       0x1C /*   8  Fill range                       */
//#define  WKS_CODE_KRANGE1      0x1D /*   9  Primary sort key range           */
//#define  WKS_CODE_HRANGE       0x20 /*  16  Distribution range               */
//#define  WKS_CODE_KRANGE2      0x23 /*   9  Secondary sort key range         */
//#define  WKS_CODE_PROTEC       0x24 /*   1  Global protection                */
//#define  WKS_CODE_FOOTER       0x25 /* 242  Print footer                     */
#define  WKS_CODE_HEADER       0x26 /* 242  Print header                     */
//#define  WKS_CODE_SETUP        0x27 /*  40  Print setup                      */
#define  WKS_CODE_MARGINS      0x28 /*  10  Print margins code               */
//#define  WKS_CODE_LABELFMT     0x29 /*   1  Label alignment                  */
//#define  WKS_CODE_TITLES       0x2A /*  16  Print borders                    */
//#define  WKS_CODE_GRAPH        0x2D /* 437  Current graph settings           */
//#define  WKS_CODE_NGRAPH       0x2E /* 453  Named graph settings             */
//#define  WKS_CODE_CALCCOUNT    0x2F /*   1  Iteration count                  */
//#define  WKS_CODE_UNFORMATTED  0x30 /*   1  Formatted/unformatted print      */
//#define  WKS_CODE_CURSORW12    0x31 /*   1  Cursor location                  */
//#define  WKS_CODE_WINDOW       0x32 /* 144  Symphony window settings         */
//#define  WKS_CODE_STRING       0x33 /* variable  Value of string formula     */
//#define  WKS_CODE_PASSWORD     0x37 /*   4  File lockout (CHKSUM)            */
//#define  WKS_CODE_LOCKED       0x38 /*   1  Lock flag                        */
//#define  WKS_CODE_QUERY        0x3C /* 127  Symphony query settings          */
//#define  WKS_CODE_QUERYNAME    0x3D /*  16  Query name                       */
//#define  WKS_CODE_PRINT        0x3E /* 679  Symphony print record            */
//#define  WKS_CODE_PRINTNAME    0x3F /*  16  Print record name                */
//#define  WKS_CODE_GRAPH2       0x40 /* 499  Symphony graph record            */
//#define  WKS_CODE_GRAPHNAME    0x41 /*  16  Graph record name                */
//#define  WKS_CODE_ZOOM         0x42 /*   9  Orig coordinates expanded window */
//#define  WKS_CODE_SYMSPLIT     0x43 /*   2  Nos. of split windows            */
//#define  WKS_CODE_NSROWS       0x44 /*   2  Nos. of screen rows              */
//#define  WKS_CODE_NSCOLS       0x45 /*   2  Nos. of screen columns           */
//#define  WKS_CODE_RULER        0x46 /*  25  Named ruler range                */
//#define  WKS_CODE_NNAME        0x47 /*  25  Named sheet range                */
//#define  WKS_CODE_ACOMM        0x48 /*  65  Autoload.comm code               */
//#define  WKS_CODE_AMACRO       0x49 /*   8  Autoexecute macro address        */
//#define  WKS_CODE_PARSE        0x4A /*  16  Query parse                      */
// end of not used

#define  WKS_LEN_BOF            2
#define  WKS_LEN_EOF            0

// Not used by Roger
#define  WKS_LEN_CALCMODE       1  /* Calculation mode       */
#define  WKS_LEN_CALCORDER      1  /* Calculation order      */
#define  WKS_LEN_SPLIT          1  /* Split window type      */
#define  WKS_LEN_SYNC           1  /* Split window sync      */
#define  WKS_LEN_RANGE          8  /* Active worksheet range */
// End of not used

#define  WKS_LEN_WINDOW1       31
#define  WKS_LEN_COLW1          3

// Not used by Roger
//#define  WKS_LEN_WINTWO        31  /*  Window 2 record          */
//#define  WKS_LEN_COLW2          3  /*  Column width,window 2    */
//#define  WKS_LEN_NAME          24  /*  Named range              */
// end of not used

#define  WKS_LEN_BLANK          5
#define  WKS_LEN_INTEGER        7
#define  WKS_LEN_NUMBER        13
#define  WKS_LEN_LABEL    VAR_LEN

//Not used by roger
//#define  WKS_LEN_FORMULA variable  /* Formula cell                 */
//#define  WKS_LEN_TABLE         25  /* Data table range             */
//#define  WKS_LEN_ORANGE        25  /* Query range                  */
//#define  WKS_LEN_PRANGE         8  /* Print range                  */
//#define  WKS_LEN_SRANGE         8  /* Sort range                   */
//#define  WKS_LEN_FRANGE         8  /* Fill range                   */
//#define  WKS_LEN_KRANGE1        9  /* Primary sort key range       */
//#define  WKS_LEN_HRANGE        16  /* Distribution range           */
//#define  WKS_LEN_KRANGE2        9  /* Secondary sort key range     */
//#define  WKS_LEN_PROTEC         1  /* Global protection            */
//#define  WKS_LEN_FOOTER       242  /* Print footer                 */
#define  WKS_LEN_HEADER       242  /* Print header                 */
//#define  WKS_LEN_SETUP         40  /* Print setup                  */
#define  WKS_LEN_MARGINS       10  /* Print margins code           */
//#define  WKS_LEN_LABELFMT       1  /* Label alignment                  */
//#define  WKS_LEN_TITLES        16  /* Print borders                    */
//#define  WKS_LEN_GRAPH        437  /* Current graph settings           */
//#define  WKS_LEN_NGRAPH       453  /* Named graph settings             */
//#define  WKS_LEN_CALCCOUNT      1  /* Iteration count                  */
//#define  WKS_LEN_UNFORMATTED    1  /* Formatted/unformatted print      */
//#define  WKS_LEN_CURSORW12      1  /* Cursor location                  */
//#define  WKS_LEN_WINDOW       144  /* Symphony window settings         */
//#define  WKS_LEN_STRING  variable  /* Value of string formula          */
//#define  WKS_LEN_PASSWORD       4  /* File lockout (CHKSUM)            */
//#define  WKS_LEN_LOCKED         1  /* Lock flag                        */
//#define  WKS_LEN_QUERY        127  /* Symphony query settings          */
//#define  WKS_LEN_QUERYNAME     16  /* Query name                       */
//#define  WKS_LEN_PRINT        679  /* Symphony print record            */
//#define  WKS_LEN_PRINTNAME     16  /* Print record name                */
//#define  WKS_LEN_GRAPH2       499  /* Symphony graph record            */
//#define  WKS_LEN_GRAPHNAME     16  /* Graph record name                */
//#define  WKS_LEN_ZOOM           9  /* Orig coordinates expanded window */
//#define  WKS_LEN_SYMSPLIT       2  /* Nos. of split windows            */
//#define  WKS_LEN_NSROWS         2  /* Nos. of screen rows              */
//#define  WKS_LEN_NSCOLS         2  /* Nos. of screen columns           */
//#define  WKS_LEN_RULER         25  /* Named ruler range                */
//#define  WKS_LEN_NNAME         25  /* Named sheet range                */
//#define  WKS_LEN_ACOMM         65  /* Autoload.comm code               */
//#define  WKS_LEN_AMACRO         8  /* Autoexecute macro address        */
//#define  WKS_LEN_PARSE         16  /* Query parse                      */
/// end of not used

#endif
