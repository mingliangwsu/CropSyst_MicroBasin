#ifndef workbookH
#define workbookH

#include "corn/container/association.h"
#include "corn/const.h"
namespace CORN
{
//______________________________________________________________________________
   class Date;
//______________________________________________________________________________
interface_ Workbook
{
protected:
   Association_list sheets;        // move this to implementing classes
      // Now should be able to use Unidirectional_list
public:
   class Sheet  : public Association
   {
   public:
      Sheet() {};
      // CELL records were used in older versions of Excel with only 16bit row indexes
      // BIFF8 introduced new records for cell data that allowed for 32bit row indexes

      // Rows and columns are indexed from 0

      // The following are for setting data in the sheet
      virtual sint32    set_cell_date     (nat16 col, nat32 row, const CORN::Date &date_value) = 0;
      virtual bool      set_cell_bool     (nat16 col, nat32 row, bool value)     = 0;
      virtual sint32    set_cell_integer30  (nat16 col, nat32 row, sint32 value)   = 0;     //120105
         // Note: Excel only stores 30bits of integers.
      /* 120105 16bit integer records were only in BIFF2, so this is quite deprecated
      virtual sint16    set_cell_integer  (nat16 col, nat32 row, sint16 value)   = 0;
      */
      virtual float64   set_cell_number   (nat16 col, nat32 row, float64 value,nat8 precision) = 0;
      virtual int32     set_range_date    (const char *range, const CORN::Date &date_value  ) = 0;
      virtual bool      set_range_bool    (const char *range, bool value)        = 0;
      virtual sint32    set_range_integer30 (const char *range, sint32 value)      = 0;
         // Note: Excel only stores 30bits of integers.
      /* 120105 16bit integer records were only in BIFF2, so this is quite deprecated
      virtual sint16    set_range_integer (const char *range, sint16 value)      = 0;
      */
      virtual float64   set_range_number  (const char *range, float64 value,uint8 precision) = 0;
      virtual bool      set_range_color   (const char *range,nat8 red,nat8 green, nat8 blue) = 0;  //110815

      virtual const std::string &set_cell_label (nat16 col, nat32 row, const std::string &value) = 0;
      virtual const std::wstring &set_cell_label_wstring(nat16 col, nat32 row, const std::wstring &value) = 0; //130901
      virtual const std::string &set_range_label (const char *range, const std::string &value) = 0;
      virtual const std::wstring &set_range_label_wstring (const char *range, const std::wstring &value) = 0; //130901
      virtual const std::string &set_range_formula(const char *range, const std::string &formula) = 0;    //110815

          // Note I am not sure precision was used in cell records (maybe on of the attributes)
          // In later versions of Excel there is a reference to XF records
      // The following are for getting data in the sheet
      /* 120105 16bit integer records were only in BIFF2, so this is quite deprecated

      virtual sint16    get_cell_integer  (nat16 col, nat32 row)           const=0;
      virtual sint16    get_range_integer (const char *range)              const=0;        //111001
      */
      virtual sint32    get_cell_integer30  (nat16 col, nat32 row)         const=0;
      virtual sint32    get_range_integer30 (const char *range)            const=0;        //111001
         // Note: Excel only stores 30bits of integers.
      virtual bool         get_cell_bool(nat16 col, nat32 row)             const=0;//130328
      virtual bool         get_range_bool(const char *range)               const=0;//130328

      virtual float64   get_cell_number   (nat16 col, nat32 row)           const=0;
      virtual float64   get_range_number  (const char *range)              const=0;
      virtual bool      set_cell_color    (nat16 col, nat32 row,nat8 red,nat8 green, nat8 blue) = 0;  //110815

      virtual const std::wstring &get_cell_label  (nat16 col, nat32 row,std::wstring &label)   const=0;          //111001
      virtual const std::wstring &get_range_label (const char *range,std::wstring &label)      const=0;          //111001
      /*130402
      virtual const wchar_t      *get_cell_label  (nat16 col, nat32 row)   const=0;          //111001
      virtual const wchar_t      *get_range_label (const char *range)      const=0;          //111001
      */
      virtual const std::string  &set_cell_formula(nat16 col, nat32 row, const std::string &formula) =0;  //110815
//Excel does not have cell type for date      virtual int32 get_cell_date(nat16 col, nat32 row) = 0;
// Probably stored as a string (label) with a specified format
#ifdef DISABLED
101127
This is dependent on get_cell which I needed to disable.
instead, use Cell_reader
      virtual bool is_cell_empty(nat16 col, nat32 row)                     const=0;
      // returns true if the cell has no data
#endif
      virtual bool clear_cell(nat16 col, nat32 row)                             =0;
      virtual bool clear_range(const char *range)                               =0;
      virtual bool is_just_added_to_workbook()                             const=0; //110711
      // Sheet attributes:
      virtual void freeze_pane(nat16 left_most_column,nat32 top_most_row ) = 0;
      virtual const std::string &get_name(std::string &sheet_name)         const=0;   // the name of the sheet
//NYI      uint8       get_index() = 0;  // the sheet tab index (0 based).
      inline virtual const char *get_key() const = 0;// { return get_name();};
      virtual nat32 get_first_define_row()                                 const=0;
      virtual nat32 get_first_define_column()                              const=0;   // Excel only has 16bit column indexes
      virtual nat32 get_last_define_row()                                  const=0;
      virtual nat32 get_last_define_column()                               const=0;   // Excel only has 16bit column indexes
   };
public:
   inline Workbook()
      : sheets()
      {}
   virtual Sheet *provide_sheet(const std::string &sheet_name)                  =0;  // was get_sheet
   // Sets the specified sheet as active (Create if necessary).
   // For spreadsheet formats that only support single sheets,
   // this may be the name of the file for the sheet.
   // Returns a pointer to the sheet.
   // The sheet is owned by the workbook.
   virtual const std::string &get_name(std::string &return_name)           const=0;
   // Derived classes should return the name of the workbook
   // (This may be the fully qualified filename.
   /*110725 NYN
   virtual bool copy_sheet
      (const std::string &from_sheet_name
      ,const std::string &to_sheet_name)                           modification_=0; //110711
   */
   virtual bool save(bool display_alerts = false)                  performs_IO_=0;//111215
   virtual bool save_as(const std::wstring &filename,bool display_alerts = false)  performs_IO_=0; //140101_111215
};
//____________________________________________________________________Workbook_/
} // namespace CORN

#endif

