
// This source code was developed for Linux
// It requires the cURL library libcurl https://curl.haxx.se/
// It should work for Windows or other OS but it has not been tested as of 2016 Oct.

// For C++ projects dont include this file in your project/Makefile
// (it is #included by request_cURL.cpp).
// For C projects, do include this file.

// This code is compatible and used with C++ versions

#ifndef __cplusplus
#include <stdio.h>
#include <curl/curl.h>
#include <string.h>
#endif

/*
see simple examples https://curl.haxx.se/libcurl/c/example.html
specically
https://curl.haxx.se/libcurl/c/getinmemory.html

http://stackoverflow.com/questions/1636333/download-file-using-libcurl-in-c-c
*/
/*_________________________________________________________________________*/
struct MemoryStruct {
  char *memory;
  size_t size;
};
/*_________________________________________________________________________*/
static size_t WriteMemoryCallback(void *contents, size_t size, size_t nmemb, void *userp)
{
   size_t realsize = size * nmemb;
   struct MemoryStruct *mem = (struct MemoryStruct *)userp;
   mem->memory = realloc(mem->memory, mem->size + realsize + 1);
   if(mem->memory == NULL) {
      printf("not enough memory (realloc returned NULL)\n");
      return 0;
   }
   memcpy(&(mem->memory[mem->size]), contents, realsize);
   mem->size += realsize;
   mem->memory[mem->size] = 0;
   return realsize;
}
/*_________________________________________________________________________*/
bool WinINet_request_to_cstr
(int Method
, const char */*LPCSTR*/ Host
, const char */*LPCSTR*/ url
, const char */*LPCSTR*/ header
,       char */*LPSTR*/  data
,char *result)
{
   CURL *curl_handle;
   CURLcode res;
   struct MemoryStruct chunk;
   chunk.memory = malloc(1);  /* will be grown as needed by the realloc above */
   chunk.size = 0;    /* no data at this point */
   curl_global_init(CURL_GLOBAL_ALL);
   /* init the curl session */
   curl_handle = curl_easy_init();
   /* specify URL to get */



   char URI[1024]; strcpy(URI,Host);
   // strcat("/");
   strcat(URI,url); // I think URL includes leading /


   curl_easy_setopt(curl_handle, CURLOPT_URL, URI); // I.e. "http://www.example.com/"
   /* send all data to this function  */
   curl_easy_setopt(curl_handle, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);
   /* we pass our 'chunk' struct to the callback function */
   curl_easy_setopt(curl_handle, CURLOPT_WRITEDATA, (void *)&chunk);
   /* some servers don't like requests that are made without a user-agent field, so we provide one */
   curl_easy_setopt(curl_handle, CURLOPT_USERAGENT, "libcurl-agent/1.0");
   /* get it! */
   res = curl_easy_perform(curl_handle);
   /* check for errors */
   if(res != CURLE_OK)
      fprintf(stderr, "internet request failed: %s\n",curl_easy_strerror(res));
   else
      memcpy(result,chunk.memory,chunk.size);
   /* cleanup curl stuff */
   curl_easy_cleanup(curl_handle);
   free(chunk.memory);
   /* we're done with libcurl, so clean it up */
   curl_global_cleanup();
   return true;
}
/*_________________________________________________________________________*/
