#ifndef File_system_engine_commonH
#define File_system_engine_commonH
#include "corn/const.h"
#include "corn/primitive.h"
#include "corn/OS/file_system_engine.h"
/* May want to move  to primitive.h because more generally applicable
 * MING ?GCC? doesn't seem to consistently used 32bit float
//______________________________________________________________________________
#if (defined(__MINGW32__) || defined(__MINGW32__))
#define _QT_
// There doesn't appear to be a predefined macro identifying the Qt compiler
// currently assuming that if compiling with MinGW the compiler is Qt.
#endif
//______________________________________________________________________________
*/
namespace CORN { namespace OS {
//_______________________________________________________forward declarations__/
class File_system_engine_common
: public File_system_engine  // The file system engine must implement all the methods of the file system even though file systems specific for OS's are not themselves 'engines'
{
 public: // virtual methods declared in File_system (See file_system.h) for documentation.
   virtual File_system::Directory::Type identify_type
      (const Directory_entry_name &entry_name)                             const;
   virtual Directory_name *render_current_working_directory()              const;//091208
   virtual Directory_name *render_current_working_directory_on_drive
      (const Drive_designator &logical_drive_name)                         const;//120430
      // Instanciates a directory name corresponding to the
      // the current working directory on the specified drive.
      // The directory name object is relinquished to the caller.
   virtual Directory_entry_name *render_resolved_absolute_DEN //161013 directory_entry_name   //120430
      (const Directory_entry_name &relative_or_absolute_actual_directory_entry_or_shortcut_LNK
      ,const Directory_name &with_respect_to_directory_name)           rendition_;
   /**<
      // Returns 0 if nothing to resolve

      Respect directory
      C:/A/B/C/D/E

      relative:./filename.ext
      renders->C:/A/B/C/D/E

      relative:../../x/y/z.exe
      renders->C:/A/B/C/x/y/z.ext

      The method as implemented in this class cannot handle the form:
      relative:../../x/../y/z.exe
      This form is fairly rarely used, but
      derived classes should override this method using an OS API function
      which handles all cases properly.
   **/

   virtual bool create_directory                                                 //120622
      (const Directory_name &directory_name
      ,bool create_parents_as_needed = true)                               const;//121222
      // Note that derived classes must reimplement create_directory and must call this method first
   virtual bool provide_directory                                                //140825
      (const Directory_name &directory_name
      ,bool create_parents_as_needed)                                      const;
   virtual bool rename(const Directory_entry_name &old_name,const Directory_entry_name &new_name) const; //121209
   virtual Directory_entry_name *find_qualified_name_in_path                     //131111
      (const std::wstring &unqualified_name
      ,const CORN::OS::Directory_name &from_directory
      ,Path_inclusion include_path_directories_in_search = Directory_entry_name::include_all) rendition_;//140210
   virtual CORN::OS::File_name *find_file_name                                   //150412
      (const std::wstring             &target_filename//160922 can now have wild card
      ,const CORN::OS::Directory_name &from_directory
      ,File_system::Recursion          recursion                                 //150908
      ,const Directory_name *logical_root = 0
      ,bool                            case_sensitive=true)           rendition_;//160924
   virtual bool delete_directory                                                 //150320
      (const Directory_name & directory_name_to_delete
      ,bool recurse_subdirectories  // Note: must not recurse superdirectories so
      ,CORN::Container *remember_deleted_file_names         //optional
      ,CORN::Container *remember_not_deleted_file_names     //optional
      ,CORN::Container *remember_deleted_directory_names    //optional
      ,CORN::Container *remember_not_deleted_directory_name //optional
      ,CORN::Text_list *error_log                  //optional
      ,bool delete_only_file_and_preserve_folder_and_subfolders )          const;
   /*161105
   virtual nat32 list_entry_names_deprecated                                                //151212
      (const Directory_name & directory_name
      ,CORN::Container *file_DEN_list //= 0
      ,CORN::Container *directory_DEN_list //= 0
      ,File_system::Recursion recursion
      ,Directory_entry_name::Qualification qualification
      ,const wchar_t *name_wild_card = 0
      ,const wchar_t *extension_filter =0
      ,const CORN::Text_list *exclude_directories =0)                     const;
      // Note that this method is deprecated,
      // Now use Seclusion version
   */
   virtual nat32 list_DENs
      (const Directory_name & directory_name
      ,CORN::Container *file_name_list       //= 0 // Optional, pass null if file list not wanted
      ,CORN::Container *directory_name_list  //= 0 // optional, pass null if file list not wanted
      ,const Seclusion &seclusion
      ,File_system::Recursion recursion = File_system::none_recursion_inclusive
      ,const Directory_name *logical_root = 0
      ,Directory_entry_name::Qualification qualification = Directory_entry_name::full_qualification) const;
   virtual bool matches_any_in                                                   //151212
      (const std::wstring &name_with_ext
      ,const CORN::Text_list &wild_card_patterns_to_compare
      ,bool case_insensitive = false)                               affirmation_;
   virtual bool copy_directory_contents                                          //161105
      (const Directory_name &source, const Directory_name &target
      ,const Seclusion *seclusion_optional = 0
      ,bool use_links = false
      ,bool fail_if_exists = false)                                        const;
 protected:
   bool log_any_delete_error
      ( int unlink_or_rm_dir_error
      ,CORN::Text_list &error_log)                                         const;
};
//__________________________________________________File_system_engine_common__/
} } // namespace CORN OS
//______________________________________________________________________________
#endif

