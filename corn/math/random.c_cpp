#ifndef __cplusplus
#  include "corn/math/random.h"
#endif
//______________________________________________________________________________
float64 est_normal_random_between(float32 low,float32 high,bool conservative)
{
   float64 est_standard_deviation = (high - low) / (conservative ? 4.0 :6.0);
   float64 mean = (low + high)/2.0;
   float64 est_normal_rand = CORN_normal_random(mean,est_standard_deviation);
   return est_normal_rand;
}
//_2003-10-06_______________________________________est_normal_random_between__/
float64 triangle_random(float64 L, float64 H, float64 M )
{
   float64 A1 = (M-L) / (H-L);
   float64 RA = CORN_uniform_random();
   return (RA <= A1)
   ? L + sqrt(RA * (M - L) * (H - L))
   : H - sqrt((1.0 - RA) * (H - M) * (H - L));
}
//_1999-03-17_________________________________________________triangle_random__/
float64 Weibull_random(float64 alpha, float64 beta)
{  // Weibull distribution has the form:
   //   f(x) = 1 - exp(- pow((x/beta),alpha));
   float64 r;
   do
      r = CORN_uniform_random();  // was ran1
   while ((r <= 0) || (r >= 1));
   return beta * pow(-CORN_ln(r),1.0/alpha);
}
//_1998-03-18__________________________________________________Weibull_random__/
float64 gasdev_normal_random()
{ //returns a normally distributed deviate with zero mean and unit variance
  //From numerical recipies
  static int iset = 0;
  static float64 gset;
  float64 fac,r,v1,v2;
  if (iset == 0)
  {do
   { v1 = 2.0 * CORN_uniform_random() - 1.0;   // was ran1
     v2 = 2.0 * CORN_uniform_random() - 1.0;   // was ran1
     r = v1 * v1 + v2 *v2;
   }
   while (r >= 1.0 || r == 0.0);
   fac = sqrt(-2.0 * log(r)/r);
   gset = v1*fac;
   iset = 1;
   return v2 *fac;
  }
  else
  { iset = 0;
    return gset;
  }
}
//________________________________________________________gasdev_normal_random_/


