#include "CS_simulation_rotator.h"
#ifdef OLD_ROTATION
#include "corn/data_source/vv_file.h"
#endif
#include "crop/crop_interfaced.h"
#include "crop/phenology_interface.h"
#include "common/weather/weather.h"
#include "soil.h"
#include "CS_suite/UED/aggregation/aggregate_UEDs.h"
#include "csvc.h"
#include <assert.h>
#include <iostream>
#include "desired_vars.h"
#include "cs_scenario_directory.h"
#include "rotation.h"
//______________________________________________________________________________
extern CORN::Parameter_properties_literal PP_crop_biomass_yield;
extern CORN::Parameter_properties_literal PP_crop_biomass_useful;
extern CORN::Parameter_properties_literal PP_crop_biomass_disposal;
extern CORN::Parameter_properties_literal PP_crop_biomass_produced_above_ground ;
extern CORN::Parameter_properties_literal PP_crop_canopy_N_mass;
//______________________________________________________________________________
bool prevent_multiple_harvests_in_same_day;                                      //141230
namespace CS
{
//______________________________________________________________________________
Rotator::Rotator
(Command_options_data_source    &command_line_options_                           //160829
,const CS::Identification       &ID_
,bool                            CPF_mode_)                                      //151026
: Simulation_engine     (command_line_options_)                                  //160829_160222
, ID                    (ID_)                                                    //151028
, meteorological_ref    (0)                                                      //160525
, land_unit_simulations (sub_elements)                                           //160304_160222
, template_scenario     (CPF_mode_)                                              //150513
, weather_DB_daily      (0)                                                      //160708
{}
//_2013-06-20_______________________________________________Rotator::Rotator()_/
bool Rotator::initialize()                                       initialization_
{
   bool initialized = true;                                                      //150209_140722
   if (verbose)
   {
      std::clog
         << "info: creating directory" << std::endl
         << "dir=  " << get_output_directory_name().c_str() << std::endl;
  }

   CORN::OS::file_system_engine.create_directory(get_output_directory_name());
   if (is_rotation_cycling_enabled())                                            //160929
   {
      const CORN::OS::File_name &template_rotation_file_name = provide_template_rotation_file_name();

   #ifdef OLD_ROTATION
   //160602 This is moving to new Rotation class in rotation.cpp
   #ifdef _DEBUG
   std::clog << "Composing shifted rotations" << std::endl;
   #endif
   CropSyst::Rotation_parameters rotation;
   {  CORN::VV_File rotation_file(template_rotation_file_name.c_str());
      if (!rotation_file.get(rotation))
      {
         std::cerr << "error: Unable to load rotation: " << template_rotation_file_name << std::endl;
         return false;                                                           //151227
      }
   }
   #ifdef _DEBUG
   std::clog << "rotation file:" << template_rotation_file_name.c_str() << std::endl;
   #endif
   nat8 build_years = rotation.years;
   bool rotation_schedule_relative = build_years > 0;                            //140227
   // Note that phenology adjustment could be moved to Rotator::start() but current
   nat16 i;


      // After determining phenology adjustments,
      // we need to restart the weather for the starting date because
      // the soil temperature initialization that follows needs
      // the weather setup for the first day of the simulation.
   CropSyst::Sowing_event *sow_events[SOW_EVENTS_ARRAY_ALLOC]; // an arbitrary large number
   for (i = 0; i < SOW_EVENTS_ARRAY_ALLOC-1; i++)
   { sow_events[i] = 0; }
   nat8 template_sow_index = 0;
   nat8 sowing_count = 0;
   FOR_EACH_IN(sow_event,CropSyst::Sowing_event,rotation.sowing_events,each_sowing)
   {  sow_events[template_sow_index] = sow_event;
      rotation_schedule_relative &= sow_event->begin_sync.is_relative();         //140227
      template_sow_index ++;
      sowing_count++;
   } FOR_EACH_END(each_sowing)
   if (rotation_schedule_relative)                                               //140227
   {  nat8 rotation_cycling_count = is_rotation_cycling_enabled()                //151008
         ? build_years
         : 1;
   for (nat8 build_year_shift_index = 0
       ;build_year_shift_index<rotation_cycling_count;build_year_shift_index++)
   {  char build_year_shift_index_cstr[10];
      #ifdef _DEBUG
      std::clog << "shifted:" << (int)build_year_shift_index  << std::endl;
      #endif
      CORN::nat8_to_cstr((int)build_year_shift_index,build_year_shift_index_cstr,10);
      Rotated_scenario_simulation *shifted_scenario = render_scenario_simulation
         (build_year_shift_index); // The shift index is used as the cycle
      if (!shifted_scenario)
      {
         std::clog << "Rotator::initialize failed to render shifted_scenario"<< std::endl;
         return false;                                                           //151227
      }
      land_unit_simulations.append(shifted_scenario);
      nat8 target_seq_year_index = build_year_shift_index;
      for (Year year = ref_start_date().get_year()                               //151008
          ;year <= ref_stop_date().get_year()                                    //151008
          ;year ++)
      {  for (nat8 sow_index = 0; sow_index < sowing_count ;sow_index++)
         {  CropSyst::Sowing_event *template_sow_event = sow_events[sow_index];
            Year template_sow_seq_year =  template_sow_event->begin_sync.get_year();
            if ((template_sow_event) && (template_sow_seq_year == target_seq_year_index))
            {  CropSyst::Sowing_event *gen_event = new CropSyst::Sowing_event(); //130611
               CropSyst::Sowing_operation &template_sow_op =  dynamic_cast<CropSyst::Sowing_operation &>(*(template_sow_event->get_operation()));
               char sow_year_cstr[10]; CORN::nat16_to_cstr((int)year,sow_year_cstr,10);
               gen_event->ID = "Sowing:";  gen_event->ID.append(build_year_shift_index_cstr); gen_event->ID.append(":");gen_event->ID.append(sow_year_cstr);
               // We have to have a copy of the sowing operation because
               // loaded events are transfer for each sowing event.
               CropSyst::Sowing_operation *gen_sow_op =new CropSyst::Sowing_operation(template_sow_op); //130909 *(dynamic_cast<const CropSyst::Sowing_operation *>(template_sow_event->get_operation())));
               gen_event->set_operation(gen_sow_op,true);                        //130906_130611
               Year gen_event_year = year;                                       //130611
               CORN::DOY gen_event_DOY =template_sow_event->begin_sync.get_DOY();//130611
               gen_event->begin_sync.set_YD(gen_event_year,gen_event_DOY);       //130611
               gen_event->begin_sync.sync_mode_labeled.set(ACTUAL_DATE_MODE);    //130611
               gen_event->date.set_YD(gen_event_year,gen_event_DOY);             //130830
               CORN::Date planting_date (year,gen_event_DOY);
               const CORN::OS::Directory_name &rotation_dir = template_rotation_file_name.get_parent_directory_name_qualified();
               CORN::OS::File_name_concrete crop_filename_unresolved(gen_sow_op->crop_filename.c_str());
               CORN::OS::Directory_entry_name *crop_filename_reset
                 = CORN::OS::file_system_engine.render_resolved_absolute_directory_entry_name
                  (CORN::OS::Directory_entry_name_concrete(gen_sow_op->crop_filename.c_str(),CORN::OS::directory_entry),rotation_dir);
               if (crop_filename_reset)
                  gen_sow_op->crop_filename.set_DEN(*crop_filename_reset);
               delete crop_filename_reset;
               CORN::OS::Directory_entry_name *management_filename_reset
                  = CORN::OS::file_system_engine.render_resolved_absolute_directory_entry_name
                   (CORN::OS::Directory_entry_name_concrete(gen_sow_op->management_filename.c_str(),CORN::OS::directory_entry),rotation_dir);
               if (management_filename_reset)
                  gen_sow_op->management_filename.set_DEN(*management_filename_reset);
               delete management_filename_reset;
               shifted_scenario->
                  scenario_event_list.append(gen_event);                         //130830
               shifted_scenario->schedule_planting_event
                 (planting_date.get_date32(),*gen_sow_op,gen_event->ID.c_str());
               know_sowing_for_phenology_adjustment(*gen_sow_op,planting_date);
         }  }
         target_seq_year_index ++;                                               //130611
         if (target_seq_year_index >= build_years)                               //130611
            target_seq_year_index = 0;                                           //130611
      }
      if (is_detailed_output_cell(ID))
      {  // These outputs are only for debugging they are not used.
         char debug_X_csn[25];  strcpy(debug_X_csn,"X.CS_scenario");
         debug_X_csn[0] = (int)('0') + build_year_shift_index;
         CORN::OS::File_name_concrete dbg_scenario_filename(get_output_directory_name(),debug_X_csn);
         CORN::VV_File debug_scenario(dbg_scenario_filename.c_str());
         debug_scenario.set(shifted_scenario->scenario_control_and_model_options);

         char debug_X_rot[25];  strcpy(debug_X_rot,"X.scheduled_operations");
         debug_X_rot[0] = (int)('0') + build_year_shift_index;
         CORN::OS::File_name_concrete dbg_rotation_filename(get_output_directory_name(),debug_X_rot);

         std::ofstream debug_rotation(dbg_rotation_filename.c_str());
         FOR_EACH_IN(sow_evnt,CropSyst::Sowing_event,shifted_scenario->scenario_event_list,each_SE)
            shifted_scenario->scenario_event_list.write(debug_rotation);
         FOR_EACH_END(each_SE)
      }
   } // for
   } else // not a relative rotation schedule                                    //140126
   {  // This is the case using rotation shifting, just a single land unit
      std::clog << "warning: The rotation is not relative, shifting rotations disabled" << std::endl;
      Rotated_scenario_simulation *single_scenario=render_scenario_simulation(1);//140126
      single_scenario->CropSyst:: LAND_UNIT_SIMULATION_SUPERCLASS::setup_cropping_system();                                  //140224
      land_unit_simulations.append(single_scenario);                             //140126
   } // if rotation relative
   #else
   const CropSyst::Rotation *rotation = CropSyst::rotations_global.provide
      (template_rotation_file_name,is_rotation_cycling_enabled());               //160708
   nat8 cycles = rotation->get_cycles();
   for (nat8 cycle = 0; cycle < cycles; cycle++)
   {
      Rotated_scenario_simulation *cycled_scenario = render_scenario_simulation(cycle);
      if (!cycled_scenario)
      {
         std::clog << "Rotator::initialize failed to render shifted_scenario"<< std::endl;
         return false;                                                           //151227
      }
      land_unit_simulations.append(cycled_scenario);
      CORN::Unidirectional_list cycled_plantings;
      if (verbose) std::clog << "Rendering planting events adjusted for weather conditions cycle=" << (int)cycle << std::endl;
      rotation->render_planting_events_adjusted_for_weather_conditions
         (provide_weather_database_daily()                                                    //160728
         //160728 *weather_daily
         ,cycled_plantings
         ,ref_start_date().get_year()
         ,ref_stop_date().get_year()
         ,cycle);

//std::clog << "Cycled plantings:" << std::endl;
//cycled_plantings.write(std::clog);

      CropSyst::Sowing_event *cycled_planting = 0;
      while (cycled_planting = dynamic_cast<CropSyst::Sowing_event *>(cycled_plantings.pop_at_head()))
      {  cycled_scenario->scenario_event_list.append(cycled_planting);
         CropSyst::Sowing_operation *sow_op = cycled_planting->sowing_op;
         cycled_scenario->schedule_planting_event
            (cycled_planting->date.get_date32(),*sow_op,cycled_planting->ID.c_str());
         know_sowing_for_phenology_adjustment(*sow_op,cycled_planting->date.get_date32());
      }
   }

   #endif
   }
   initialized &= Simulation_engine::initialize();                               //150731
   if (!initialized) std::clog << "Rotator::initialize Simulation_engine::initialize failed" << std::endl;
   return initialized;
}
//______________________________________________________________________________
bool Rotator::stop()                                               modification_
{  bool stopped = true;
   stopped &= Simulation_engine::stop();
      // Engine must be stopped first because we need UED outputs to be written.
   #ifdef AGGREGATE_CYCLES_SEASONAL
   CORN::OS::File_name_concrete aggregated_season_UED_filename(get_output_directory_name(),"season.UED");     //140119
   UED::Aggregator season_aggregator(UED::Aggregator::merge  , aggregated_season_UED_filename.c_str(),true); //140119_140829 now writing 16bit floats
   #if (CROPSYST_VERSION < 5)
   FOR_EACH_IN(scenario_sim,Rotated_scenario_simulation,land_unit_simulations,each_rotated_scenario_simulation)
   {
      if (scenario_sim->season_UED_db) season_aggregator.append_source(*scenario_sim->season_UED_db); //140119
   } FOR_EACH_END(each_rotated_scenario_simulation)
   #endif
   // else each rotated cycle has its own enumerated directory for the outputs
   stopped &= season_aggregator.finalize();
   #endif

   //NYN    CORN::OS::File_name_concrete harvest_UED_filename(output_dir,"harvest.UED");
   CORN::OS::File_name_concrete aggregated_annual_UED_filename(get_output_directory_name(),"annual_aggr.UED");     //140119
   //NYN UED::Aggregator harvest_aggregator(UED::Aggregator::merge,harvest_UED_filename.);       //140119
   #if (CROPSYST_VERSION < 5)
   UED::Aggregator annual_aggregator(UED::Aggregator::average, aggregated_annual_UED_filename.c_str(),true); //140119_140829 now writing 16bit floats
   FOR_EACH_IN(scenario_sim,Rotated_scenario_simulation,land_unit_simulations,each_rotated_scenario_simulation)
   {
      CORN::OS::File_name_concrete cycle_annual_UED(scenario_sim->get_output_directory_name(),"annual.UED");
      annual_aggregator.append_source_file(cycle_annual_UED.c_str());
   } FOR_EACH_END(each_rotated_scenario_simulation)
   stopped &= annual_aggregator.finalize();
   #endif
   return stopped;                                                               //160308_140728
}
//_2013-10-30___________________________________________________________________
bool Rotator::end_year()                                           modification_
{  bool ended = true;                                                            //151218
   CORN::Date over_a_year_ago((CORN::Year)(today.get_year()-1),(CORN::DOY)1); // Don't need to keep lots weather data in memory //141103
   #ifndef REACCH_VERSION
   // I think REACCH was having a problem because multiple years in one record
   #if (CROPSYST_PROPER==4)
   weather->done_with_dates_before(over_a_year_ago);                             //141103
   #endif
   #endif
   ended &= Simulation_engine::end_year();                                       //140105
   return ended;
}
//______________________________________________________________________________
CropSyst::Desired_variables debug_desired_variables_(true);                       //140515
char buffer_numeric_conversion[20];
//______________________________________________________________________________
Rotator::Rotated_scenario_simulation::Rotated_scenario_simulation
(const CS::Identification &LBF_ID_                                          //151026
,nat32                         cycle_shift_                                 //151026
,CropSyst::Scenario  &scenario_control_and_model_options_
,const CORN::Date    &today_
,const Geocoordinate &geocoordinate_                                             //151116
,const Land_unit_meteorological &meteorology_
,const CropSyst::Scenario_directory *scenario_directory_
,bool want_detailed_output_
,const CORN::OS::Directory_name &rotator_output_directory_                       //160311
)
: CropSyst::LAND_UNIT_SIMULATION_SUPERCLASS
   (
    LBF_ID_
   ,cycle_shift_                                                                 //151026
   ,scenario_control_and_model_options_
   ,today_
   ,geocoordinate_                                                               //151116
   ,meteorology_
   #if (CS_VERSION==4)
   // Need to remove this replace with explainations
   ,event_log_currently_unused
   #endif
   ,scenario_directory_
   #if (CROPSYST_VERSION < 5)
   ,want_detailed_output_                                                        //151227
      ? &debug_desired_variables_ : 0
   #endif
   )
, rotator_output_directory(rotator_output_directory_)                            //160311
, provided_cycle_directory(0)                                                    //160310
{}
//______________________________________________________________________________
const CORN::OS::Directory_name &Rotator::Rotated_scenario_simulation::provide_cycle_directory() provision_ //160310
{  if (!provided_cycle_directory)
      provided_cycle_directory = new CORN::OS::Directory_name_concrete
         (rotator_output_directory
         ,CORN::nat32_to_cstr(cycle_shift,buffer_numeric_conversion,10));
   CORN::OS::file_system_engine.create_directory(*provided_cycle_directory);
   return *provided_cycle_directory;
}
//_2016-03-11___________________________________________________________________
bool Rotator::Rotated_scenario_simulation::setup_cropping_system()
{  // We disable the cropping system mode because we generate from
   // rotation template which sets up the cropping system
   scenario_control_and_model_options.cropping_system_mode_labeled.set(rotation_cropping_system);
   return true;
}
//______________________________________________________________________________
bool Rotator::Rotated_scenario_simulation::start()                 modification_
{  bool started = CropSyst:: LAND_UNIT_SIMULATION_SUPERCLASS::start();
   return started;
}
//______________________________________________________________________________
bool Rotator::start_year()                                         modification_
{  bool started = Simulation_engine::start_year();
   // we must have the rotation sim started inorder to have var recorders
   // to print the headers
   return started;
}
//______________________________________________________________________________
bool Rotator::Rotated_scenario_simulation::end_day()               modification_
{  perform_triggered_synchronizations_today(); // triggered sync may need to be in process method as it is with
   bool ended = CropSyst::  LAND_UNIT_SIMULATION_SUPERCLASS::end_day();
   // Not sure if I should commit before or after Land_unit_simulation::end_day
   // after because there may be last minute cleanup and variables to be settled
   // however before because end day might
   return ended;
}
//_2013-08-02__________________________________________________________________/
bool Rotator::Rotated_scenario_simulation::stop()                  modification_
{
   bool stopped = CropSyst::  LAND_UNIT_SIMULATION_SUPERCLASS::stop();
   return stopped;
}
//_2016-03-06___________________________________________________________________
const CORN::OS::Directory_name &Rotator::Rotated_scenario_simulation
::get_output_directory_name()                                              const
{ return provide_cycle_directory();                                              //160311
}
//_2015-01-08___________________________________________________________________
bool Rotator::start_day()
{  bool started = true;
   prevent_multiple_harvests_in_same_day = false;                                //141231
   weather_DB_daily->start_day();                                                //160802
      // weather_DB_daily currently is not on elements list
   started &= Simulation_engine::start_day();
   return started;
}
//_2013-08-30__________________________________________________________________/
bool Rotator::end_day()
{
   weather_DB_daily->end_day();                                                //160802
      // weather_DB_daily currently is not on elements list

   return Simulation_engine::end_day();
}
//_2013-08-30__________________________________________________________________/
modifiable_ Rotator::Rotated_scenario_simulation *Rotator::render_scenario_simulation(nat32 cycle_shift_) /*rendition_*/
{
   const CropSyst::Scenario_directory *scenario_directory                        //160530
      = provide_scenario_directory();
   return new Rotator::Rotated_scenario_simulation
      (ID
      ,cycle_shift_
      ,template_scenario
      ,today
      ,geolocation
      ,*meteorological_ref                                                       //160525
      ,scenario_directory
      ,true // CropSyst Proper and OFoot we want_detail_output
      ,get_output_directory_name());
}
//_2016-05-14___________________________________________________________________
CS::Weather_database_daily &Rotator::provide_weather_database_daily() provision_
{  if (!weather_DB_daily)
   {
        weather_DB_daily = new Weather_database_daily_UED
           (template_scenario.weather_filename,today,template_scenario.extend_available_weather);
      weather_DB_daily->know_weather_provider(&(meteorological_ref->mod_weather_provider()));
   }
   return *weather_DB_daily;
}
//_2016-07-29___________________________________________________________________
} //namespace CS

