#ifndef CS_UED_recorderH
#define CS_UED_recorderH
#include "corn/OS/directory_entry_name_concrete.h"
#include "corn/container/unilist.h"
#include "CS_suite/observation/CS_examination.h"
#include "UED/library/varcodes.h"
//______________________________________________________________________________
namespace UED
{
   class Database_file;
}
//______________________________________________________________________________
namespace CS
{
//______________________________________________________________________________
class UED_Recorder
{
   class UED_File_association
   : public CORN::Item
   {
    public:
      CORN::OS::File_name *UED_filename; //owned
      UED::Database_file  *UED_file    ; //owned
      CORN::Dynamic_array<nat32> committed_variables;
         //List of variable codes whose definitions have already been committed.

      //CORN::Unidirectional_list variable_definitions; // this could be binary tree for faster lookup
    public:
      inline UED_File_association
      (CORN::OS::File_name *UED_filename_given //given
         ,UED::Database_file  *UED_file_given     //given
         )
         : CORN::Item()
         , UED_filename(UED_filename_given)
         , UED_file    (UED_file_given)
         {}
      inline virtual ~UED_File_association()
         {  delete UED_file;
std::clog << "deleting:" << UED_filename->c_str() << std::endl;
            delete UED_filename;
         }
      inline virtual const wchar_t  *get_key_wide()                           const
         { return UED_filename->w_str(); }
      bool append_variable_definition
         (UED::Variable_code  var_code
         ,CORN::Units_code    units_code
         ,const std::string  &ontology);
   };
//_2016-06-16___________________________________________________________________

   const CORN::OS::Directory_name &output_directory;
 private: // could be protected.
 /*160620
   contribute_ CORN::Unidirectional_list UED_dataset_filesX; // list of UED_File_association
   contribute_ CORN::Unidirectional_list UED_tally_filesX;   // list of UED_File_association
*/
   contribute_ CORN::Unidirectional_list UED_files;
 public:
   UED_Recorder(const CORN::OS::Directory_name &output_directory);
   //virtual ~UED_Recorder();
   virtual bool end_day()                                          modification_;
   virtual bool end_year()                                         modification_;
   virtual bool stop()                                             modification_;
 protected:
   bool commit_inspections(CORN::Container &inspections);
   bool commit_tallies(CORN::Container &tallies);
 private:
   UED_File_association &provide_UED_file_association
      (CORN::OS::File_name_concrete *target_UED_filename_given)       provision_;
   /*
   UED::Database_file &provide_UED_file
      (CORN::OS::File_name_concrete *target_UED_filename_given);
   UED::Database_file &provide_inspection_UED_file(const Inspection &inspection);
   UED::Database_file &provide_tally_UED_file
      (const Examination::Inspection_tally_store &inspection_tally);
   */
   UED_File_association &provide_inspection_UED_file_association(const Inspection &inspection);
   UED_File_association &provide_tally_UED_file_association
      (const Examination::Inspection_tally_store &inspection_tally);



};
//_2016-06-14___________________________________________________________________
extern UED_Recorder *UED_recorder_global;
extern UED_Recorder &provide_global_UED_recorder
   (const CORN::OS::Directory_name &output_directory);
//UED recording is options extern UED_Recorder &ref_global_UED_recorder();
//______________________________________________________________________________

} // namespace CS
#endif

