#include <vcl.h>
#pragma hdrstop

#include "form_rotation_editor.h"
#include "form_sowing_event.h"
//140124 #include "CropSyst/source/cs_paths.h"
#include "CropSyst/GUI/help/rotation.h"
#include "corn/data_source/vv_file.h"
#include "GUI/parameter/form_param_file.h"
//140124 #include "CropSyst/source/database_dir.h"
#include "CS_suite/file_system/database_directory.h"

#include "CropSyst/source/rot_param.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma link "AutoContainerListBox"
#pragma link "AutoDateButton"
#pragma link "AutoFileEditBar"
#pragma link "AutoInt16Edit"
#pragma link "AutoRadioGroup"
#pragma link "AutoContainerCheckListBox"
#pragma link "AutoSimDatabaseDropdownFileEditBar"
#pragma link "AutoSimDatabaseFileEditBar"
#pragma link "AutoCheckBox"
#pragma resource "*.dfm"

/*
# define HELP_P_rotation_page          "simulation\\rotation.htm#rotation_page"
# define HELP_P_sim_rotation_page          "simulation\\rotation.htm#rotation_page"
# define HELP_P_sim_rot_delete             "simulation\\rotation.htm#delete"
# define HELP_P_sim_rot_insert             "simulation\\rotation.htm#insert"
# define HELP_P_sim_build                  "simulation\\rotation.htm#build"
# define HELP_P_sim_planting_date          "simulation\\rotation.htm#planting_date"
*/
Trotation_editor_form *rotation_editor_form;
//---------------------------------------------------------------------------
 __fastcall Trotation_editor_form::Trotation_editor_form(TComponent* Owner)
 : TForm(Owner)
 , rotation_filename(0)
 , rotation_directory()
 , rotation(0)
 , master_database_dir(0)
 , project_database_dir(0)
 , scenario_database_dir(0)
{  Application->HintHidePause = 8000;                                            //030514
}
//---------------------------------------------------------------------------
void __fastcall Trotation_editor_form::Update()
{  rot_listbox       ->Update();
   years_in_rot_edit ->Update();
   end_edit          ->Update();
   checkbox_relative ->Update();                                                 //140124
   groupbox_build_rotation->Visible = !rotation->relative;                       //140124
}
//---------------------------------------------------------------------------
void __fastcall Trotation_editor_form::bind_to
(CropSyst::Rotation_parameters *_rotation
,Tparameter_file_form *_parameter_form                                           //071204
,const char *_master_dir     // should not be 0
,const char *_project_dir    // may be 0
,const char *_scenario_dir   //note/ may be 0
/*140124
#if (CROPSYST_VERSION < 5)
,bool converting_from_V3                                                         //040711
#endif
*/
)
{
//Application->MessageBox("RE bind start","DEBUG",MB_OK);
   rotation = _rotation;
   parameter_form = _parameter_form;                                             //071204
/*140124
#if (CROPSYST_VERSION < 5)
   V3_warning_label->Visible = converting_from_V3;
#endif
*/
    master_database_dir = new CS::Database_directory(_master_dir);               //140124_051228
    if (_project_dir)      project_database_dir = new CS::Database_directory(_project_dir);  //051228
    if (_scenario_dir)     scenario_database_dir = new CS::Database_directory(_scenario_dir);//051228
    rot_listbox       ->bind_to(&(rotation->sowing_events)V4_HELP_URL(HELP_P_rotation_build));
    years_in_rot_edit ->bind_to(&(rotation->years)        V4_HELP_URL(HELP_P_rotation_build)); //020910
    end_edit          ->bind_to(&(rotation->end_year)     V4_HELP_URL(HELP_P_rotation_build)); //020910
//Not available for some reason/*020909*/     rot_listbox->SetMultiSelect(true);
}
//---------------------------------------------------------------------------
void __fastcall Trotation_editor_form::insert_button_onclick(TObject *Sender)
{  if (rotation)                                                                 //020514
   {  CropSyst::Sowing_event *sowing_event = new CropSyst::Sowing_event();
      sowing_event->begin_sync.sync_mode_labeled.set(ACTUAL_DATE_MODE);
      Tsowing_event_form *sow_event_form = new Tsowing_event_form(this);
      sow_event_form->bind_to(sowing_event,parameter_form,master_database_dir
         ,project_database_dir,scenario_database_dir);                           //051228
      if (sow_event_form->ShowModal() == mrOk)
      {  rotation->sowing_events.add_sorted(sowing_event);
         rot_listbox->Update();
      };
   };
}
//_1999-02-23__________________________________________________________________/
void __fastcall Trotation_editor_form::rot_listbox_onclick(TObject *Sender)
{  if (rotation)
   {  int rot_index = rot_listbox->ItemIndex;
      CropSyst::Sowing_event  *sowing_evnt = dynamic_cast<CropSyst::Sowing_event *>(rotation->sowing_events.get_at(rot_index)); //120316
      if (sowing_evnt)
      {
         Tsowing_event_form *sow_event_form = new Tsowing_event_form(this);
         sow_event_form->bind_to(sowing_evnt,parameter_form,master_database_dir,project_database_dir,scenario_database_dir);
         sow_event_form->ShowModal();
         rotation->sowing_events.sort();                                         //020617
      };
   };
   rot_listbox->Update();                                                        //990227
}
//---------------------------------------------------------------------------
void __fastcall Trotation_editor_form::delete_button_onclick(TObject *Sender)
{  rot_listbox->delete_selected();
}
//_1999-02-25___________________________________________________________________
void __fastcall Trotation_editor_form::build_button_onclick(TObject *Sender)
{
   // We don't need to specify the years in rotation, this is computed
   // from the selections that are made in the list box
   int num_slctns = rot_listbox->SelCount;
   if (rot_listbox->Items->Count == 0) return;                                   //990528
   if (num_slctns == 0)
   {  // If no items are specially selected, select everything
      num_slctns = rot_listbox->Items->Count;                                    //990229
      for (int i = 0; i < num_slctns; i++)                                       //990229
      rot_listbox->Selected[i] = true;                                           //990229
   };
   Year first_slct_year = 0;
   int16 slctn = 0;
   int16 rot= 1;
   Year new_year = 0;                                                            //990224
   while (new_year < rotation->end_year)                                         //020517
   for (nat16 i = 0; i < rot_listbox->Items->Count; i++)
   {  if (rot_listbox->Selected[i])                                              //020514
      {  CropSyst::Sowing_event *rot_entry = dynamic_cast<CropSyst::Sowing_event *>
               (rotation->sowing_events.get_at(i));                              //120316
         if (rot_entry)                                                          //990223
         {  CORN::Date date(rot_entry->begin_sync,D_YMD,D_YYYY|D_M|D_lead_zero,'/');   //990223
            if (!first_slct_year) first_slct_year = date.get_year();             //990223
            new_year = (Year)( (date.get_year() - first_slct_year)
               + (rotation->years* rot) + first_slct_year);                      //980508
            CORN::Date new_entry_date(new_year,date.get_DOY()
               ,D_YMD,D_YYYY|D_M|D_lead_zero,'/');                               //990223
            if (new_entry_date.get_year() <=rotation->end_year)                  //980508
            {  CropSyst::Sowing_event *new_rot_entry = new CropSyst::Sowing_event();
			   /*
				120624 continue here

				give new_rot_entry a new unique event ID
			   */
               CropSyst::Sowing_operation *new_sow_op = new CropSyst::Sowing_operation
                  (rot_entry->provide_sowing_operation());                       //031014_130516 was get_sowing_operation()
               new_rot_entry->set_operation(new_sow_op,true);                    //031014
               new_rot_entry->date.set(new_entry_date);                          //020910
               new_rot_entry->begin_sync.set(new_entry_date);                    //020910
               new_rot_entry->begin_sync.sync_mode_labeled.set(ACTUAL_DATE_MODE);//020910
               rotation->sowing_events.append(new_rot_entry);                    //990223
            };
         };                                                                      //980507
         slctn++;                                                                
         if (slctn >= num_slctns)                                                
         {  slctn = 0;                                                           
            rot++;                                                               
         };
      };                                                                         //020514
   };                                                                            //980508
   rot_listbox->Update();                                                        //990223
}
//_1998-05-08_____________________________________________build_button_onclick_/
void __fastcall Trotation_editor_form::edit_button_onclick(TObject *Sender)
{  rot_listbox_onclick(Sender);
}
//---------------------------------------------------------------------------
void __fastcall Trotation_editor_form::button_sortClick(TObject *Sender)
{  rotation->sowing_events.sort();
   rot_listbox       ->bind_to(&(rotation->sowing_events) V4_HELP_URL(HELP_P_rotation_build));
}
//_2010-11-25__________________________________________________________________/
void __fastcall Trotation_editor_form::checkbox_relativeClick(
      TObject *Sender)
{
   groupbox_build_rotation->Visible = !rotation->relative;
}
//---------------------------------------------------------------------------

