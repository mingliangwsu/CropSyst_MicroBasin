//______________________________________________________________________________
#include <vcl.h>
#pragma hdrstop
#include "CS_explorer_engine.h"

#include "CropSyst/source/options.h"
#include "CS_suite/CropSyst/file_system/project_directory_CropSyst.h"
#include "CS_suite/file_system/CS_directory_contexts.hpp"
#include "CS_suite/file_system/database_directory.h"
#include "CS_suite/CS_suite_directory.h"
#include "corn/container/text_list.h"
#include "corn/data_source/vv_file.h"
#include "corn/OS/OS.h"
#include "corn/OS/directory_entry_name.h"
#include "corn/OS/file_system_engine.h"
#include "corn/string/strconv.hpp"
#include "UED/convert/convert_response.h"
#include "UED/library/UED_fname.h"
#include "CropSyst/source/cs_filenames.h"
#include "CropSyst/source/cs_scenario.h"
#include "CropSyst/source/output.h"

#include <assert.h>
#include <fstream>

using namespace std;
using namespace CS;
#include "corn/Internet/HTTP.h"
#include "corn/Internet/HTTP/request.hpp"
//______________________________________________________________________________
CS_Explorer_engine::CS_Explorer_engine()
: Explorer_engine_abstract
(&user_settings
,&user_application_directory
,&CS::Suite_directory->CS_Explorer()
,(CS::Suite_directory))
, user_application_directory(CS::Suite_directory->CS_explorer_executable())
, project_directory(0)
, output_options(0)
, identified_context(UNKNOWN_context)
, UED_tools_mode(false)
{}
//______________________________________________________________________________
CS_Explorer_engine::~CS_Explorer_engine()
{  if (project_directory)        delete project_directory;
   if (output_options)           delete output_options;
}
//______________________________________________________________________________
Directory_context CS_Explorer_engine::identify_context_of
(const CORN_Directory_name &dir_name_qualified)                            const
{
   identified_context =
      UED_tools_mode ? weather_context : arbitrary_context ;
   std::string directory_name;                                                   //120614
   dir_name_qualified.append_components_to_string(directory_name,CORN::OS::Directory_entry_name::include_name_extension);
      // Identifies the current directory context by either:
      // - The name of the directory.
      // - The presence of key files.
      // - The key extension of some files.
      // - The desktop.ini file has a CS context description InfoTip
      //      or one of the CS icons.
   {  // Check for CS version 5 project file
      CORN::OS::File_name_concrete CS_project_filename(dir_name_qualified,L"","CS_project"); // 120515
      if (CORN::OS::file_system_engine.exists(CS_project_filename))
         return  identified_context = project_context;
   }
   {  // Check for CS_version 4 project file
      CORN::OS::File_name_concrete CS_project_filename(dir_name_qualified,dir_name_qualified.get_name(),OS::Extension("csp"));
      if (CORN::OS::file_system_engine.exists(CS_project_filename))
         return  identified_context = project_context;
   }
   {  // check if database
      if (directory_name.compare("Database"  ) == 0)
          return identified_context = database_context;
   }
   {  // check if scenarios
      if (directory_name.compare("Scenarios"  ) == 0)
          return identified_context = scenarios_context;
   }
   {  // check if enterprises
      if (directory_name.compare("Enterprises"  ) == 0)
          return identified_context = enterprises_context;
   }
   {  // check if CropSyst scenario context
      CORN::OS::File_name_concrete CS_scenario_filename(dir_name_qualified,L"",L"CropSyst_scenario");
      if (CORN::OS::file_system_engine.exists(CS_scenario_filename))
         return  identified_context = scenario_context;
   }
   {  // check if CANMS scenario context
      CORN::OS::File_name_concrete CANMS_scenario_filename(dir_name_qualified,L"",L"CANMS_scenario");
      if (CORN::OS::file_system_engine.exists(CANMS_scenario_filename))
         return  identified_context = scenario_context;
   }
   {  // check if CAFE dairy scenario context
      CORN::OS::File_name_concrete CAFE_dairy_scenario_filename(dir_name_qualified,L"",L"CAFE_dairy_scenario");
      if (CORN::OS::file_system_engine.exists(CAFE_dairy_scenario_filename))
         return  identified_context = scenario_context;
   }
   {  // check if NIFA dairy scenario context                                    //141111
      CORN::OS::File_name_concrete NIFA_dairy_scenario_filename(dir_name_qualified,L"",L"NIFA_dairy_scenario");
      if (CORN::OS::file_system_engine.exists(NIFA_dairy_scenario_filename))
         return  identified_context = scenario_context;
   }
   {  // check if CS project context                                             //141025
      CORN::OS::Directory_name_concrete project_scenarios_dirname(dir_name_qualified,L"Scenarios");
      if (CORN::OS::file_system_engine.exists(project_scenarios_dirname))
         return  identified_context = project_context;
   }
   {  // Check for CS_version 4 project file
      CORN::OS::File_name_concrete CS_scenario_filename(dir_name_qualified,dir_name_qualified.get_name(),OS::Extension("csn"));
      if (CORN::OS::file_system_engine.exists(CS_scenario_filename))
         return identified_context = scenario_context;
   }
   {  // check if scenarios
      if (directory_name.compare("Generated_scenarios"  ) == 0)
          return identified_context = generated_scenarios_context;
   }
   {  // check if scenario output
      if (directory_name.compare("Output"  ) == 0)
          return identified_context = scenario_output_context;
      // NYI Should also check if the parent folder is a scenario context
   }
   {  // check if database weather
      if (directory_name.compare("Weather"  ) == 0)
          return identified_context = weather_context;
      // NYI Should also check if the parent folder is a database context
   }
   {  // check if database soil
      if (directory_name.compare("Soil"  ) == 0)
      {  // We need to distinguish between database soil directory and output soil directory   (090803)
         return identified_context = (dir_name_qualified.get_parent_directory_name_qualifiedX().get_name()==L"Output")
            ? scenario_output_context
            : soil_context;
      }
      // NYI Should also check if the parent folder is a database context
   }
   {  // check if database rotation
      if (directory_name.compare("Rotation"  ) == 0)
          return identified_context = rotation_context;
      // NYI Should also check if the parent folder is a database context
   }
   {  // check if database crop
      if (directory_name.compare("Crop"  ) == 0)
          return identified_context = crop_context;
      // NYI Should also check if the parent folder is a database context
   }
   {  // check if database management
      if (directory_name.compare("Management"  ) == 0)
          return identified_context = management_context;
      // NYI Should also check if the parent folder is a database context
   }
   {  // check if database Biomatter
      if (directory_name.compare("Biomatter"  ) == 0)
          return identified_context = biomatter_context;
      // NYI Should also check if the parent folder is a database context
   }
#if (CS_VERSION==4)
   {  // check if database format
      if (directory_name.compare("Format"  ) == 0)
          return identified_context = format_context;
      // NYI Should also check if the parent folder is a database context
   }
   {  // check if database STATSGO
      if (directory_name.compare("STATSGO"  ) == 0)
          return identified_context = STATSGO_context;
      // NYI Should also check if the parent folder is a database context
   }
#endif
   {  // This checks the desktop.ini                                             //101124
      CORN::OS::File_name_concrete desktop_ini_filename("desktop.ini");
      char infotip[512];
      GetPrivateProfileString(".ShellClassInfo","InfoTip","",infotip,sizeof(infotip),desktop_ini_filename.c_str());
      char iconfile[512];
      GetPrivateProfileString(".ShellClassInfo","IconFile","",iconfile,sizeof(iconfile),desktop_ini_filename.c_str());
      for (nat8 context_index = 0;  context_index < CONTEXT_COUNT; context_index++)
      {
         if (strcmp(infotip,context_strings[context_index].description) == 0)
            identified_context = context_index;
         if (strcmp(iconfile,context_strings[context_index].icon) == 0)
            identified_context = context_index;
      }
   }
   if (identified_context == arbitrary_context)
   {  // If we still haven't found the context it is possible that we are in a subdirectory
      // of a context (For example we often of subdirectories of the weather database)
      if (directory_name.find("\\Weather\\")    != std::string::npos) identified_context = weather_context;
      if (directory_name.find("\\Soil\\")       != std::string::npos) identified_context = soil_context;
      if (directory_name.find("\\Crop\\")       != std::string::npos) identified_context = crop_context;
      if (directory_name.find("\\Output\\")     != std::string::npos) identified_context = scenario_output_context;
      if (directory_name.find("\\Management\\") != std::string::npos) identified_context = management_context;
      if (directory_name.find("\\Rotation\\")   != std::string::npos) identified_context = rotation_context;
      if (directory_name.find("\\Biomatter\\")  != std::string::npos) identified_context = biomatter_context;
      if (directory_name.find("\\Scenarios\\")  != std::string::npos) identified_context = scenarios_context;
      if (directory_name.find("\\Enterprises\\")!= std::string::npos) identified_context = enterprises_context;
#if (CS_VERSION==4)
      if (directory_name.find("\\STATSGO\\")    != std::string::npos) identified_context = STATSGO_context;
#endif
      // Don't check here for the following contexts:
      // arbitrary_context            //  0
      // project_context              //  1
      // database_context             //  2
      // scenario_context             //  5
      // generated_scenarios_context  //  6
   }
   if (UED_tools_mode)
      identified_context = weather_context;
   return identified_context;
}
//______________________________________________________________________________
CS::Directory_context CS_Explorer_engine::identify_context()               const
{  return identify_context_of(*directory_name_qualified);
/*
      ((identified_context == UNKNOWN_context)
      && directory_name_qualified)
      ? identify_context_of(*directory_name_qualified)
      : identified_context;
*/
}
//______________________________________________________________________________
const STRING_WITH_FILENAME &CS_Explorer_engine::project_create_scenario(const std::wstring &new_scenario_name)
{  // in this case we are in the project directory
   // Setup the scenarios directory (if it doesn't aready exist)
   CORN::OS::Directory_name_concrete scenarios_dir(*directory_name_qualified,L"Scenarios",L"");
   if (CORN::OS::file_system_engine.exists(scenarios_dir))
   {  CORN::OS::file_system_engine.create_directory(scenarios_dir); // if the Scenarios directory doesn't already exist.
      directory_name_qualified->set_DEN(scenarios_dir);                          //130123
      CORN::OS::file_system_engine.set_current_working_directory(scenarios_dir);
      setup_context(true);
   }
   // Now set up the scenario directory (probably will be creating but this doesn't hurt if it already exists).
   // 090624 Although the version 4 scenario editor will create the scenario directory
   // it doesn't currently setup the context.
   CORN::OS::Directory_name_concrete scenario_directory(scenarios_dir,new_scenario_name,L"");
   bool scenario_already_exists = CORN::OS::file_system_engine.exists(scenario_directory); //140213
   CORN::OS::file_system_engine.create_directory(scenario_directory);
   directory_name_qualified->set_DEN(scenario_directory);                        //130123
   CORN::OS::File_name_concrete  created_scenario_filename(scenarios_dir,L"",OS::Extension(CS_scenario_EXT));
   // In version 4 I don't want to create a context because

   CORN::OS::File_name_concrete  scenario_editor
      (CS::Suite_directory->CropSyst().scenario_editor_executable()/*I.e. "C:\\CS_suite_4\\CropSyst\\scenario_editor.exe"*/);
   #ifdef _Windows
   WritePrivateProfileString("scenario","","",created_scenario_filename.c_str()); // This is to ensure that a scenario file exists so we can recognize the context
   #endif
   setup_context(); // Setup the scenario directory context
   return run_program_with_primary_DEN
      ( scenario_editor
      , created_scenario_filename
      , L""
      , false // dont wait_for_termination     // True if this editor is held until the other program exits
      , SW_SHOWNORMAL);
}
//______________________________________________________________________________
const STRING_WITH_FILENAME  & CS_Explorer_engine::project_scenarios_create_scenario
(const STRING_WITH_FILENAME & new_scenario_name
,const STRING_WITH_FILENAME & scenario_file_name_or_extension
,const CORN::OS::File_name  & scenario_editor_exe)
// In version 4 we use extension, in version 5 it is just the name
{  // In this case we are already in the scenarios directory

   CORN::OS::Directory_name_concrete scenarios_dir(*directory_name_qualified);
   CORN::OS::file_system_engine.create_directory(scenarios_dir);

   directory_name_qualified->set_DEN(scenarios_dir);                             //130123
   setup_context(); // In most cases the scenarios directory will already have been setup but this could be the first scenario.

   CORN::OS::file_system_engine.set_current_working_directory(scenarios_dir); // setting this CWD is probably not needed.
   CORN::OS::Directory_name_concrete scenario_dir(scenarios_dir,new_scenario_name);
   CORN::OS::file_system_engine.create_directory(scenario_dir);
   directory_name_qualified->set_DEN(scenario_dir);                              //130123

//   NYI the scenario will be a scenario directory with an associated directory file: .CropSyst_scenario .

   CORN::OS::file_system_engine.set_current_working_directory(scenarios_dir);
   CORN::OS::File_name_concrete created_scenario_filename(scenario_dir,scenario_file_name_or_extension); // the filename is simply .CropSyst_scenario
   // Use the last selected scenario file as the template to copy to this new scenario
   if (/*recently_selected_DEN[scenarios_context] && */CORN::OS::file_system_engine.exists(recently_selected_DEN[scenarios_context]))
      CORN::OS::file_system_engine.copy_file(recently_selected_DEN[scenarios_context],created_scenario_filename,true);
#ifdef _Windows
   WritePrivateProfileString("scenario","","",created_scenario_filename.c_str()); // This is to ensure that a scenario file exists so we can recognize the context
#else
   NYI , open the file name and write [scenario]
#endif
   setup_context(); // Although the version 4 scenario editor will create the scenario directory as needed it might not setup the directory context
   return run_program_with_primary_DEN
      ( scenario_editor_exe
      , created_scenario_filename
      , L""
      , false // not wait_for_termination     // True if this editor is held until the other program exits
      , SW_SHOWNORMAL);
}
//______________________________________________________________________________
/*NYN
const std::string &CS_Explorer_engine::project_scenarios_create_scenario
(const wchar_t *new_scenario_name
,const char *scenario_file_name_or_extension
,const CORN::Smart_file_name &scenario_editor_exe)
{
   std::wstring new_scenario_name_wstr(new_scenario_name);
   std::string  new_scenario_name_str;
   wstring_to_string(new_scenario_name_wstr,new_scenario_name_str);
   return project_scenarios_create_scenario(new_scenario_name_str.c_str(),scenario_file_name_or_extension,scenario_editor_exe);
}
*/
//______________________________________________________________________________

const STRING_WITH_FILENAME &CS_Explorer_engine::project_enterprises_create_enterprise
(const STRING_WITH_FILENAME &new_enterprise_name)
{  // In this case we are already in the scenarios directory
   CORN::OS::Directory_name_concrete enteprises_dir(*directory_name_qualified);
   CORN::OS::file_system_engine.create_directory(enteprises_dir); // if the enterpries  directory doesn't already exist.
   directory_name_qualified->set_DEN(enteprises_dir);                            //130123
   setup_context(); // In most cases the scenarios directory will already have been setup but this could be the first scenario.
   CORN::OS::file_system_engine.set_current_working_directory(enteprises_dir); // setting this CWD is probably not needed.
   CORN::OS::Directory_name_concrete enterprise_dir(enteprises_dir,new_enterprise_name);
   CORN::OS::file_system_engine.create_directory(enterprise_dir);
   directory_name_qualified->set_DEN(enterprise_dir);                            //130123
   CORN::OS::file_system_engine.set_current_working_directory(enteprises_dir);
   CORN::OS::File_name_concrete created_enterprise_filename(enterprise_dir,".CANMS_enterprise");
#ifdef _Windows
   WritePrivateProfileString("enterprise","","",created_enterprise_filename.c_str()); // This is to ensure that a scenario file exists so we can recognize the context
#else
   NYI file the files doesn't exists, just create a file with the [enterprise] section
#endif
   setup_context(); // Although the version 4 scenario editor will create the scenario directory as needed it might not setup the directory context
   return run_program_with_primary_DEN
      ( CS::Suite_directory->CANMS().scenario_editor_exe // the scenario editor also edits enterprises
      , created_enterprise_filename
      , L""
      , false // dont wait_for_termination     // True if this editor is held until the other program exits
      , SW_SHOWNORMAL);
}
//______________________________________________________________________________
const STRING_WITH_FILENAME & CS_Explorer_engine::project_GIS_simulation()
{  // In this case I may still need to update the desktop file icon
   return edit_parameter_file(
      CS_PROJECT_FILENAME                                                       // 120515
      ,""
      ,"GIS_project_editor",L"");
}
//______________________________________________________________________________
const STRING_WITH_FILENAME & CS_Explorer_engine::project_watershed_simulation()
{
#if (CROPSYST_VERSION == 4)
   CORN::OS::File_name_concrete
      project_filename(*directory_name_qualified);
#endif

// In this case I may still need to update the desktop file  icon
   return edit_parameter_file(
      CS_PROJECT_FILENAME                                                       // 120515
      ,""
      ,"project_editor",L"Watershed");
}
//______________________________________________________________________________
const STRING_WITH_FILENAME &CS_Explorer_engine::project_carbon_sequestration_for_grazing_regimen()
{  return edit_parameter_file(CS_PROJECT_FILENAME,"","project_editor",L"Grazing");
}
//______________________________________________________________________________
CORN_Directory_name
*CS_Explorer_engine::create_project(const STRING_WITH_FILENAME &project_name)
{  CORN::OS::Directory_name_concrete new_project_name_qual(*directory_name_qualified,project_name);
   CORN::OS::file_system_engine.create_directory(new_project_name_qual);
   CORN::OS::file_system_engine.set_current_working_directory(new_project_name_qual);
   CORN::OS::File_name_concrete project_filename(new_project_name_qual,CS_PROJECT_FILENAME); //120515
   {  // Create a project file if it doesn't already
      WritePrivateProfileString("Project","x"," ",project_filename.c_str());
   }
   directory_name_qualified->set_DEN(new_project_name_qual);
   setup_context(false);
   return directory_name_qualified;
}
//______________________________________________________________________________
CORN_Directory_name *CS_Explorer_engine::create_simulation_directory
(const STRING_WITH_FILENAME &simulation_folder_name
,const STRING_WITH_FILENAME &projects_folder_name)
{  CORN::OS::Directory_name_concrete simulation_dir(*directory_name_qualified,simulation_folder_name/*"Simulation"*/);
   CORN::OS::file_system_engine.create_directory(simulation_dir);
   directory_name_qualified->set_DEN(simulation_dir);
   setup_context(false);
   CORN::OS::Directory_name_concrete projects_dir(simulation_dir,projects_folder_name /*"Projects"*/);
   CORN::OS::file_system_engine.create_directory(projects_dir);
   CORN::OS::Directory_name_concrete database_dir(simulation_dir,"Database");
   CORN::OS::file_system_engine.create_directory(database_dir);
   directory_name_qualified->set_DEN(database_dir);
   setup_context(false);
   CORN::OS::File_name_concrete database_desktop_ini(database_dir,"desktop.ini");
   std::ofstream desktop_ini(database_desktop_ini.c_str());
   const CORN::OS::File_name *database_ico_fname_ptr
      = CS::Suite_directory->find_file_name
         (L"database.ico"
         ,
         //150909,true
         );
   if (database_ico_fname_ptr)
      desktop_ini << "[.ShellClassInfo]" << endl
               << "IconFile=" << database_ico_fname_ptr->c_str() /*"C:\\CS_suite_4\\icons\\database.ico"*/ << endl // NYI warning, need to get the icon file from CS_suite icons path
               << "IconIndex=0" << endl
               << "InfoTip=CropSyst Suite project" << endl;
   // Go into the projects directory because the next likely thing to
   // do is create a project.
   directory_name_qualified->set_DEN(projects_dir);
   setup_context(false);
   return directory_name_qualified;
}
//______________________________________________________________________________
CORN_Directory_name *CS_Explorer_engine::add_database_context
(const STR_WITH_FILENAME parameter_file_directory_name_unqual
,bool set_parameter_directory_as_current)                                        //110423
{
   CORN::OS::Directory_name_concrete database_dir(*directory_name_qualified);     //110423
   CORN::OS::Directory_name_concrete database_param_dir(*directory_name_qualified,parameter_file_directory_name_unqual);
   CORN::OS::file_system_engine.create_directory(database_param_dir);
   // Set the database parameter directory to the new context.
   directory_name_qualified->set_DEN(database_param_dir);
   setup_context(false);
   change_current_directory(set_parameter_directory_as_current                   //110423
      ? database_param_dir.c_str()                                               //110423
      : database_dir.c_str());                                                   //110423
   return directory_name_qualified;
}
//______________________________________________________________________________
bool CS_Explorer_engine::database_has_directory(const STR_WITH_FILENAME subdirectory_name) const
{  CORN::OS::Directory_name_concrete subdirectory(*directory_name_qualified,subdirectory_name);
   return CORN::OS::file_system_engine.exists(subdirectory);
}
//______________________________________________________________________________
const STRING_WITH_FILENAME &CS_Explorer_engine::edit_parameter_file
(const STRING_WITH_FILENAME & name
,const_ASCIIz extension
,const_ASCIIz editor_name  /* without .exe extension */
,const_Unicodez option)                                                    const
{
      STRING_WITH_FILENAME unqualified_editor_name;
      CORN::ASCIIz_to_wstring(editor_name,unqualified_editor_name);
      #ifdef _WIN32
      append_ASCIIz_to_wstring(".exe",unqualified_editor_name);  // Windows executables have .exe extension
      #endif
   std::wstring options(option? option:L"");
   CORN::OS::File_name_concrete *parameter_file_name = new CORN::OS::File_name_concrete (name);   // First assume name is fully qualified
   if (!CORN::OS::file_system_engine.exists(*parameter_file_name))
   {  // Probably then the name is unqualified name with no extension.
      delete parameter_file_name;
      parameter_file_name = new CORN::OS::File_name_concrete(*directory_name_qualified,name,extension);
   }
   CORN::OS::File_name *parameter_editor = CS::Suite_directory->find_file_name(unqualified_editor_name,true);    //131006_120412
   if (parameter_editor)
      const STRING_WITH_FILENAME &command =
       run_program_with_primary_DEN
      ( *parameter_editor
      , *parameter_file_name
      , options
      , false // wait_for_termination     // True if this editor is held until the other program exits
      , SW_SHOWNORMAL);
   //else  should output status message that the parameter editor could not be found
   delete parameter_editor;
   delete parameter_file_name;
   return command;
}
//______________________________________________________________________________
const STRING_WITH_FILENAME &CS_Explorer_engine::edit_context_file
(const STRING_WITH_FILENAME &name,const_Unicodez option)                   const
{
   const char *parameter_file_ext_or_name = context_strings[identified_context].
            #if (CS_VERSION == 4)
            parameter_file_ext;
            #else
            parameter_file_ext_or_name;
            #endif
   CORN::OS::File_name_concrete *parameter_file_name =
      (context_strings[identified_context].parameter_directory)
      ? new CORN::OS::File_name_concrete
         (*directory_name_qualified,name,parameter_file_ext_or_name)
      : new CORN::OS::File_name_concrete
         (*directory_name_qualified,context_strings[identified_context].parameter_directory);
   CORN::OS::File_name_concrete parameter_editor(*CS::Suite_directory,context_strings[identified_context].editor);
   const STRING_WITH_FILENAME &command =
      run_program_with_primary_DEN
      ( parameter_editor
      ,*parameter_file_name
      , option ? option : L"" // options
      , false // wait_for_termination     // True if this editor is held until the other program exits
      , SW_SHOWNORMAL);
   delete parameter_file_name;                                                   //141122
   return command;
}
//______________________________________________________________________________
const STRING_WITH_FILENAME &CS_Explorer_engine::edit_database_parameter_file
(const CORN::OS::Directory_name  &database_dirname // fully qualified
,CS::Directory_context           parameter_context
,const STRING_WITH_FILENAME     &name)                                     const
{  // This is used by CropSyst Wizard
   CORN::OS::Directory_name_concrete parameter_directory
      (database_dirname,context_strings[parameter_context].context);
   const char *parameter_file_ext_or_name = context_strings[parameter_context].
            #if (CS_VERSION == 4)
            parameter_file_ext;
            #else
            parameter_file_ext_or_name;
            #endif
   CORN::OS::File_name_concrete parameter_file_name
      (parameter_directory,name,parameter_file_ext_or_name);
   CORN::OS::File_name_concrete parameter_editor(*CS::Suite_directory,context_strings[parameter_context].editor);
   const STRING_WITH_FILENAME &command =
      run_program_with_primary_DEN
      ( parameter_editor
      ,parameter_file_name
      ,  L"" // options
      , false // wait_for_termination     // True if this editor is held until the other program exits
      , SW_SHOWNORMAL);
   return command;
}
//_2014-11-22__________________________________________________________________/
const STRING_WITH_FILENAME &CS_Explorer_engine::launch_UED_import()        const
{  return run_program                                                            //120411
         (CS::Suite_directory->UED().import_wizard_executable()
         ,directory_name_qualified ? directory_name_qualified->w_str() : L""     //120411
         , false // do not wait for termination
         , true /*visible was SW_SHOWNORMAL*/);
}
//______________________________________________________________________________
const STRING_WITH_FILENAME &CS_Explorer_engine::launch_UED_export()        const
{  return run_program_with_primary_DEN
         (CS::Suite_directory->UED().export_wizard_executable()
         ,recently_selected_DEN[identify_context()]
         , L"" // no options
         , false // do not wait for termination
         , true /*visible was SW_SHOWNORMAL*/);
}
//______________________________________________________________________________
const STRING_WITH_FILENAME &CS_Explorer_engine::launch_UED_spatial_interpolator()   const
{  return run_program                                                            //120411
         (CS::Suite_directory->UED().spatial_interpolator_executable()
         , L"" // no options
         , false // do not wait for termination
         , SW_SHOWNORMAL);
}
//______________________________________________________________________________
const STRING_WITH_FILENAME &CS_Explorer_engine::launch_ClimGen()           const
{  // If the current selected file in the file list is a UED file.
   // setproviteprofile string the associated location file with the database filename
   // to the ued file
   bool parameterization_mode = false;
   if (!CORN::OS::file_system_engine.exists(recently_selected_DEN[identify_context()]))
       recently_selected_DEN[identify_context()].set_DEN(CORN::OS::File_name_concrete(directory_name_qualified,"unnamed","UED"));
   CORN::OS::File_name_concrete location_filename(recently_selected_DEN[identify_context()] ,Extension("loc"));
   if (recently_selected_DEN[identify_context()].is_extension_ASCII("UED"))
   {  parameterization_mode = CORN::OS::file_system_engine.exists(location_filename);
      WritePrivateProfileString("[location]","database", recently_selected_DEN[identify_context()].c_str() ,location_filename.c_str());
   }
   return run_program_with_primary_DEN
         (CS::Suite_directory->ClimGen().ClimGen_exe()
         ,location_filename
         ,L"" // location_filename.exists() ? (parameterization_mode ? "PARAMETERIZE" : "GENERATE") : "" // no options
         , false // do not wait for termination
         , SW_SHOWNORMAL);
}
//______________________________________________________________________________
const STRING_WITH_FILENAME &CS_Explorer_engine::launch_soil_convertor()    const
{  command.clear();
   if (CORN::OS::file_system_engine.exists(recently_selected_DEN[identify_context()])) //140311
      run_program_with_primary_DEN
         (CS::Suite_directory->CropSyst().soil_convertor_executable()
         ,recently_selected_DEN[identify_context()]
         ,L"" // no options
         , false // do not wait for termination
         , SW_SHOWNORMAL);
   return command;                                                               //120412
}
//______________________________________________________________________________
nat16 CS_Explorer_engine::project_scenarios_run_scenarios
(const CORN::Text_list  &selected_scenario_file_or_dir_names_qual_or_unqual  // These may or may not be qualified
,const CORN_File_name   *report_format_filename_optional                         //131006
,bool                   &abort_run
,bool                    runtime_graph
,bool                    run_simulateously
,nat32                   CPF_percents_water                                    //150418
)                         const //150414
{  nat16 scenarios_run = 0;
   CORN::Association_list actual_scenario_dirnames_qual(true);
   // Unique keys so that we don't duplicate scenario runs if the user selected both the .CSN file and its associated folder.
   std::wstring scenario_run_options; //150421 (runtime_graph ? L"" : L"NOGRAPH ");                                           //110106
   // First assume the scenario run program is CropSyst
   CORN::OS::File_name_concrete scenario_run_executable
      (CS::Suite_directory->CropSyst().cropsyst_model_executable());
   FOR_EACH_IN(scenario_entry_qual_or_unqual,CORN::Text_list::Item,selected_scenario_file_or_dir_names_qual_or_unqual,each_scenario);
   {
      // Note that selected_scenario_file_or_dir_names_qual_or_unqual could be any directory entry
      // that happens to be in the scenarios (or generated_scenarios) folder.
      // In most situations these will be scenarios directories (and/or in the case of V4 .CSN files)
      // but the user may have put arbitrary files in this directory.
      CORN::OS::Directory_entry_name_concrete *scenario_dirent_qual = new CORN::OS::Directory_entry_name_concrete(*scenario_entry_qual_or_unqual);
      if (!scenario_dirent_qual->is_qualified(false))                            //120212
      {  delete scenario_dirent_qual;
         scenario_dirent_qual = new CORN::OS::Directory_entry_name_concrete(*directory_name_qualified,*scenario_entry_qual_or_unqual);
      }
      // scenario_filename should now be qualified
      //CORN::OS::File_name_concrete *Xscenario_parameter_filename = 0;
      CORN::OS::File_system::Directory_entry::Type dir_entry_type = CORN::OS::file_system_engine.identify_type(*scenario_dirent_qual);
      switch (dir_entry_type)
      {  case CORN::OS::directory_entry :
         {  //if it is a directory, then compose the various possible recognized scenario file names
            CORN::OS::File_name_concrete CropSyst_scenario_filename(*scenario_dirent_qual,".CropSyst_scenario");
            if (CORN::OS::file_system_engine.exists(CropSyst_scenario_filename))
               actual_scenario_dirnames_qual.append(scenario_dirent_qual);
            else
            {  // this isn't a CropSyst simulation
               // May be it is a CAFE dairy scenario                             //110106
               //150410 delete scenario_parameter_filename;
               CORN::OS::File_name_concrete CAFE_dairy_scenario_parameter_filename(*scenario_dirent_qual,".CAFE_dairy_scenario"); //110106
               if (CORN::OS::file_system_engine.exists(CAFE_dairy_scenario_parameter_filename)) //120412
               {  actual_scenario_dirnames_qual.append(scenario_dirent_qual);
                  scenario_run_executable.set_DEN(CS::Suite_directory->CAFE().Dairy().scenario_editor_executable());//110106
                  scenario_run_options.assign(L" run ");
               } else                                                            //110106
               {  // Maybe is is NIFA dairy
                  CORN::OS::File_name_concrete NIFA_dairy_scenario_parameter_filename(*scenario_dirent_qual,".NIFA_dairy_scenario"); //110106
                  if (CORN::OS::file_system_engine.exists(NIFA_dairy_scenario_parameter_filename)) //120412
                  {  actual_scenario_dirnames_qual.append(scenario_dirent_qual);
                     scenario_run_executable.set_DEN(CS::Suite_directory->NIFA().Dairy().scenario_editor_executable());//110106
                     scenario_run_options.assign(L" run ");
                  }  else
                     {
                     // May be it is a CANMS scenario                               //110106
                     //delete scenario_parameter_filename;
                     CORN::OS::File_name_concrete CANMS_scenario_filename(*scenario_dirent_qual,".CANMS_scenario");                      //110106
                     if (CORN::OS::file_system_engine.exists(CANMS_scenario_filename)) //120412
                     {  actual_scenario_dirnames_qual.append(scenario_dirent_qual);
                        assert(false); //                                           //110106
                        // need to add the CANMS executable to CANMS directory
                        // scenario_run_executable.set(CS::Suite_directory->CANMS().xxxxx_executable);  //110106
                     }
                  }
               }                                                                 //110106
            }                                                                    //110106
            /*150420
            #if (CS_VERSION < 6)
            // only support .CSN files through version 5
            if (!scenario_parameter_filename)                                    //120412
            {
               scenario_parameter_filename = new CORN::OS::File_name_concrete(*scenario_dirent_qual,Extension(".csn")); //120412
               if  (CORN::OS::file_system_engine.exists(*scenario_parameter_filename)) //120412
               {  // Maybe is a version 4 .CSN file associated directory
                  scenario_run_executable.set_DEN(CS::Suite_directory->CAFE().Dairy().scenario_editor_executable());//110106
               } else { delete scenario_parameter_filename; scenario_parameter_filename = 0;}
            }
            #endif
            */
         } break;
         #if (CS_VERSION < 6)
         case CORN::OS::file_entry :
         {  //if the selected item is a file and has extension .CSN then it is a .CSN style scenario file
            CORN::OS::File_name_concrete CropSyst_CSN_scenario_filename(*scenario_dirent_qual);
            if (CropSyst_CSN_scenario_filename.has_extension_ASCII("csn"))       //150420
            {  delete scenario_dirent_qual; scenario_dirent_qual = 0;            //150420
               scenario_dirent_qual = new CORN::OS::Directory_entry_name_concrete//150420
                  (*(CropSyst_CSN_scenario_filename.get_path_directory_name()));    //150420
               actual_scenario_dirnames_qual.append(scenario_dirent_qual);       //150420
               //scenario_parameter_filename = scenario_dirent_qual;           //150420
            }
         } break;
         default :   // This was some other kind of file we don't recognize in this context
         {  // scenario_parameter_filename = 0;                                     //150420
         } break;
         #endif
      } // switch
      /*150420
      if (scenario_parameter_filename)
         if (CORN::OS::file_system_engine.exists(*scenario_parameter_filename))
            actual_scenario_filenames_qual.append(scenario_parameter_filename);        // append checks for non-null
         else { delete scenario_parameter_filename; scenario_parameter_filename = 0; }
      */
      //150420 delete scenario_dirent_qual;
   } FOR_EACH_END(each_scenario)
   FOR_EACH_IN(scenario_dirent_qual,
         CORN::OS::Directory_entry_name_concrete
         ,actual_scenario_dirnames_qual,each_scenario_qual);
   {
// Here I could run multiple simulation simultaneously
// limiting the number for simulations run per core of the processor
/*

SYSTEM_INFO sysinfo;
GetSystemInfo( &sysinfo );
numCPU = sysinfo.dwNumberOfProcessors;

*/
      if (abort_run) continue;                                                   //150419
      CORN::OS::File_name_concrete crop_production_function_irrigation_adjustments_filename
         (get_directory_name_qualified(),"irrigation_adjustments.dat");
      if (CORN::OS::file_system_engine.exists(crop_production_function_irrigation_adjustments_filename))             //150418
      {
         scenario_run_executable.set_DEN(CS::Suite_directory->CropSyst().CPF_runner_executable());
         crop_production_function_irrigation_adjustments_filename.append_components_to(scenario_run_options);
      } else if (CPF_percents_water)                                                  //150418
      {
         //scenario_run_options.append(L"irrigation_adjustments_percent=");
         for (nat8 percent_index = 0; percent_index < 16; percent_index++)
         {
            scenario_run_executable.set_DEN(CS::Suite_directory->CropSyst().CPF_runner_executable());
            if ((1 << percent_index) & CPF_percents_water)
            {
               nat8 percent = percent_index * 10;
               CORN::append_nat32_to_wstring(percent,scenario_run_options);
               scenario_run_options.append(L" ");
            }
         }
      }
      command_history.
         add_wstring
         (report_format_filename_optional                                        //131006
            ?run_program_with_primary_and_secondary_DEN
               (scenario_run_executable
               ,*scenario_dirent_qual
               ,*report_format_filename_optional                                 //131006_130610
               ,scenario_run_options
               , !run_simulateously // don't wait for termination if simultaneous run
               , SW_SHOWNORMAL)
            : run_program_with_primary_DEN                                      //131006
               (scenario_run_executable
               ,*scenario_dirent_qual
               ,scenario_run_options
               , !run_simulateously // don't wait for termination if simultaneous run
               , SW_SHOWNORMAL)
         );
/*150418
      if (crop_production_function)                                              //150414
         generate_and_run_crop_production_function(*scenario_dirent_qual);       //150414
*/
      scenarios_run++;
   } FOR_EACH_END(each_scenario_qual)
   return scenarios_run;
}
//______________________________________________________________________________
nat32 CS_Explorer_engine::project_combinatorial_scenario_generation_generate_all
(const CORN_Directory_name &passed_template_scenario_dirname                   //111103
,const CORN_Directory_name &generated_scenarios_dirname                        //111104
,const std::string &prefix
,bool precount
) modification_ // was combinatorial_generate_all
{  nat32 generated = 0;
   if (!project_directory) return 0;
   const CS::Database_directory &project_database = project_directory->provide_database_directory(false /*do not create */);
   CORN::OS::File_name_concrete template_scenario_filename(passed_template_scenario_dirname,".CropSyst_scenario"); //111103
   // I may want to have a separate program for this function because it is so rarely used
   // And probably something more general that will work also with CANMS
   if (!CORN::OS::file_system_engine.exists(project_database)) return 0;  // If there is no database then there are no parameter files to combine in generation.
   CORN::Text_list  soil_filenames_unqual          ; CORN::OS::file_system_engine.list_file_names(project_database.Soil()           ,false,soil_filenames_unqual           ,NAME_WILDCARD_NONE,CS_soil_LEXT);
   CORN::Text_list  UED_filenames_unqual           ; CORN::OS::file_system_engine.list_file_names(project_database.Weather()        ,false,UED_filenames_unqual            ,NAME_WILDCARD_NONE,UED_LEXT);
   CORN::Text_list  rotation_filenames_unqual      ; CORN::OS::file_system_engine.list_file_names(project_database.Rotation()       ,false,rotation_filenames_unqual       ,NAME_WILDCARD_NONE,CS_rotation_LEXT);
   CORN::Text_list  recalibration_filenames_unqual ; CORN::OS::file_system_engine.list_file_names(project_database.Recalibration()  ,false,recalibration_filenames_unqual  ,NAME_WILDCARD_NONE,CS_recalibration_LEXT);
   CORN::Text_list  water_table_filenames_unqual   ; CORN::OS::file_system_engine.list_file_names(project_database.Water_table()    ,false,water_table_filenames_unqual    ,NAME_WILDCARD_NONE,CS_water_table_LEXT);

   //111103 also include link files
   CORN::OS::file_system_engine.list_file_names(project_database.Soil()           ,false,soil_filenames_unqual           ,NAME_WILDCARD_NONE,L"lnk");
   CORN::OS::file_system_engine.list_file_names(project_database.Weather()        ,false,UED_filenames_unqual            ,NAME_WILDCARD_NONE,L"lnk");
   CORN::OS::file_system_engine.list_file_names(project_database.Rotation()       ,false,rotation_filenames_unqual       ,NAME_WILDCARD_NONE,L"lnk");
   CORN::OS::file_system_engine.list_file_names(project_database.Recalibration()  ,false,recalibration_filenames_unqual  ,NAME_WILDCARD_NONE,L"lnk");
   CORN::OS::file_system_engine.list_file_names(project_database.Water_table()    ,false,water_table_filenames_unqual    ,NAME_WILDCARD_NONE,L"lnk");

   // when precount is true this only counts the number of scenarios generated, without actually generating the scenarios
   //                                                                                                                       qualify   display
   // list files in project database:                                                       (   filenames            ,?????,path,ext ,path ,ext  ,file types                      ,ext)

   {  // We need to have at least one of each paramater file listed in order
      // to loop through all the combinations.
      // When no files of each type are found in the project then list as the default the file specified in the template
      // Which may indeed be "optional" or "not specified"

      //CropSyst_scenario template_scenario;
      CropSyst::Scenario template_scenario(&passed_template_scenario_dirname);    //140313_130729
      CORN::VV_File template_scenario_file(template_scenario_filename.c_str());
      template_scenario_file.get(template_scenario);
      if (soil_filenames_unqual         .count() == 0) { std::string name_ext; soil_filenames_unqual          .add_string(template_scenario.soil_filename          .append_components_to_string(name_ext,CORN::OS::Directory_entry_name::include_name_extension));}
      if (UED_filenames_unqual          .count() == 0) { std::string name_ext; UED_filenames_unqual           .add_string(template_scenario.weather_filename       .append_components_to_string(name_ext,CORN::OS::Directory_entry_name::include_name_extension));}
      if (rotation_filenames_unqual     .count() == 0) { std::string name_ext; rotation_filenames_unqual      .add_string(template_scenario.rotation_filename      .append_components_to_string(name_ext,CORN::OS::Directory_entry_name::include_name_extension));}
      if (recalibration_filenames_unqual.count() == 0) { std::string name_ext; recalibration_filenames_unqual .add_string(template_scenario.recalibration_filename .append_components_to_string(name_ext,CORN::OS::Directory_entry_name::include_name_extension));}
      if (water_table_filenames_unqual  .count() == 0) { std::string name_ext; water_table_filenames_unqual   .add_string(template_scenario.water_table_filename   .append_components_to_string(name_ext,CORN::OS::Directory_entry_name::include_name_extension));}
    }
    CropSyst::Scenario generated_scenario;                                       //130729
    FOR_EACH_IN(soil_filename_unqual,CORN::Text_list::Item,soil_filenames_unqual,each_soil)
    {             CORN::OS::File_name_concrete soil_filename          (project_database.Soil()         ,*soil_filename_unqual);
      FOR_EACH_IN(ued_filename_unqual,CORN::Text_list::Item,UED_filenames_unqual,each_ued)
      {           CORN::OS::File_name_concrete ued_filename           (project_database.Weather()      ,*ued_filename_unqual);
         FOR_EACH_IN(rotation_filename_unqual,CORN::Text_list::Item,rotation_filenames_unqual,each_rotation)
         {        CORN::OS::File_name_concrete rotation_filename      (project_database.Rotation()     ,*rotation_filename_unqual);
            FOR_EACH_IN(recalibration_filename_unqual,CORN::Text_list::Item,recalibration_filenames_unqual,each_recalibration)
            {     CORN::OS::File_name_concrete recalibration_filename (project_database.Recalibration(),*recalibration_filename_unqual);
               FOR_EACH_IN(water_table_filename_unqual,CORN::Text_list::Item,water_table_filenames_unqual,each_water_table)
               {  CORN::OS::File_name_concrete water_table_filename   (project_database.Water_table()  ,*water_table_filename_unqual);
                  std::wstring generated_scenario_name;
                  CORN::append_string_to_wstring(prefix,generated_scenario_name);
                  #define UNDERSCORE_ L"_"
                  //CropSyst::Scenario generated_scenario;                         //140313
                  VV_File template_scenario_file(template_scenario_filename.c_str());
                  template_scenario_file.get(generated_scenario);
                  std::string generated_scenario_description;                   //131006
                  generated_scenario.description.brief =generated_scenario_description; //131006
                  // The filename should exist otherwise it would not have been listed if (soil_filename->exists())
                  {  generated_scenario_description.append(" ");
                     soil_filename.append_components_to_string(generated_scenario_description,CORN::OS::Directory_entry_name::include_name|CORN::OS::Directory_entry_name::include_extension_with_dot);
                     generated_scenario_name.append(UNDERSCORE_);
                     soil_filename.append_components_to(generated_scenario_name,CORN::OS::Directory_entry_name::include_name); //130417
                  }
                  // The filename should exist otherwise it would not have been listed                   if (ued_filename->exists())
                  {  generated_scenario_description.append(" ");
                     ued_filename.append_components_to_string(generated_scenario_description,CORN::OS::Directory_entry_name::include_name|CORN::OS::Directory_entry_name::include_extension_with_dot);
                     generated_scenario_name.append(UNDERSCORE_);
                     ued_filename.append_components_to(generated_scenario_name,CORN::OS::Directory_entry_name::include_name); //130417
                  }
                  // The filename should exist otherwise it would not have been listed                   if (rotation_filename->exists())
                  {  generated_scenario_description.append(" ");
                     rotation_filename.append_components_to_string(generated_scenario_description,CORN::OS::Directory_entry_name::include_name|CORN::OS::Directory_entry_name::include_extension_with_dot);
                     generated_scenario_name.append(UNDERSCORE_);
                     rotation_filename.append_components_to(generated_scenario_name,CORN::OS::Directory_entry_name::include_name); //130417
                  }
                  // The filename should exist otherwise it would not have been listed                   if (recalibration_filename->exists())
                  {  generated_scenario_description.append(" ");
                     recalibration_filename.append_components_to_string(generated_scenario_description,CORN::OS::Directory_entry_name::include_name|CORN::OS::Directory_entry_name::include_extension_with_dot);
                     generated_scenario_name.append(UNDERSCORE_);
                     recalibration_filename.append_components_to(generated_scenario_name,CORN::OS::Directory_entry_name::include_name); //130417
                  }
                  // The filename should exist otherwise it would not have been listed                   if (water_table_filename->exists())
                  {  generated_scenario_description.append(" ");
                     water_table_filename.append_components_to_string(generated_scenario_description,CORN::OS::Directory_entry_name::include_name|CORN::OS::Directory_entry_name::include_extension_with_dot);
                     generated_scenario_name.append(UNDERSCORE_);
                     water_table_filename.append_components_to(generated_scenario_name,CORN::OS::Directory_entry_name::include_name); //130417
                  }
                  generated_scenario_description.append(" ");
                  Directory_entry_name *resolved_soil_filename = CORN::OS::file_system_engine.render_resolved_shortcut_or_assume_actual(soil_filename) ;
                  generated_scenario.soil_filename.set_DEN(*resolved_soil_filename);                   delete resolved_soil_filename;
                  Directory_entry_name *resolved_weather_filename = CORN::OS::file_system_engine.render_resolved_shortcut_or_assume_actual(ued_filename) ;
                  generated_scenario.weather_filename.set_DEN(*resolved_weather_filename);             delete resolved_weather_filename;
                  Directory_entry_name *resolved_rotation_filename = CORN::OS::file_system_engine.render_resolved_shortcut_or_assume_actual(rotation_filename) ;
                  generated_scenario.rotation_filename.set_DEN(*resolved_rotation_filename);           delete resolved_rotation_filename;
                  Directory_entry_name *resolved_recalibration_filename = CORN::OS::file_system_engine.render_resolved_shortcut_or_assume_actual(recalibration_filename) ;
                  generated_scenario.recalibration_filename.set_DEN(*resolved_recalibration_filename); delete resolved_recalibration_filename;
                  Directory_entry_name *resolved_water_table_filename = CORN::OS::file_system_engine.render_resolved_shortcut_or_assume_actual(water_table_filename) ;
                  generated_scenario.water_table_filename.set_DEN(*resolved_water_table_filename);     delete resolved_water_table_filename;
                  generated_scenario.description.brief.assign(generated_scenario_description); //150310
                  CORN::Text_list initialization_dirnames;
                  CORN::OS::file_system_engine.list_directory_names
                     (project_database.Initialization()
                     ,false // no recursion
                     ,initialization_dirnames
                     ,NAME_WILDCARD_NONE,L"*");
                  if (initialization_dirnames.count())
                  {
                     CORN::OS::Directory_name_concrete gen_scenario_without_initialization_dir(generated_scenarios_dirname,generated_scenario_name);
                     CORN::OS::file_system_engine.create_directory(gen_scenario_without_initialization_dir);
                     CORN::OS::File_name_concrete scenario_without_initialization_filename(gen_scenario_without_initialization_dir,".CropSyst_scenario");
                     VV_File scenario_without_initialization(scenario_without_initialization_filename.c_str());
                     scenario_without_initialization.set(generated_scenario);
                     project_combinatorial_generation_initialization
                        (*project_directory
                        ,gen_scenario_without_initialization_dir                 //111104
                        ,scenario_without_initialization_filename
                        ,generated,initialization_dirnames,precount);
                     //111104 not sure why I was deleting this scenario_without_initialization_filename.delete_completely();
                  } else
                  {  // No scenario initialization parameter fragments could be found
                     generated++;
                     char scenario_ID_cstr[20];
                     CORN::nat32_to_cstr(generated,scenario_ID_cstr,10,'0',5);
                     const CORN::OS::Directory_name &generated_scenarios = project_directory->generated_scenarios();
                     CORN::OS::file_system_engine.create_directory(generated_scenarios);
                     CORN::OS::File_name_concrete   generated_scenario_fname_qual(generated_scenarios,scenario_ID_cstr,CS_scenario_EXT);
                     VV_File generated_scenario_file(generated_scenario_fname_qual.c_str());
                     generated_scenario_file.set(generated_scenario);
                  }
               } FOR_EACH_END(each_water_table)
            } FOR_EACH_END(each_recalibration)
         } FOR_EACH_END(each_rotation)
      } FOR_EACH_END(each_ued)
   } FOR_EACH_END(each_soil)
   return generated;
}
//______________________________________________________________________________
void CS_Explorer_engine::project_combinatorial_generation_initialization
(const CropSyst_Project_directory  &project_directory
,const CORN_Directory_name         &gen_scenario_without_initialization_dir     //111104
,const CORN_File_name              &baseline_scenario_filename
,nat32                             &gen_scenario_ID_count
,Text_list&                         initialization_dirnames
,bool                               precount)
{
   char scenario_ID_cstr[20];
   CORN::Text_list::Item *this_dirname = dynamic_cast<CORN::Text_list::Item *>(initialization_dirnames.pop_first());
   if (this_dirname)
   {  CORN::OS::Directory_name_concrete this_directory_name (*this_dirname);
      CORN::Text_list initialization_filenames ;
      CORN::OS::file_system_engine.list_file_names
      (this_directory_name
      ,false // dont recurse_subdirectories
      ,initialization_filenames
      ,0 // name_wild_card
      ,L"CS_init"); // extension_filter
   CropSyst::Scenario base_line_with_this_init;
   FOR_EACH_IN(init_file_name,Directory_entry_name,initialization_filenames,each_init_file)
   {  CORN::OS::File_name_concrete *base_line_with_this_init_filename = 0;            //120518
      std::wstring  base_line_with_this_init_dir_name_str;
      gen_scenario_without_initialization_dir.append_components_to(base_line_with_this_init_dir_name_str); //130123
      base_line_with_this_init_dir_name_str.append(L"_");                                           //120518
      base_line_with_this_init_dir_name_str.append(init_file_name->get_name());                    //120518
      CORN::OS::Directory_name_concrete  base_line_with_this_init_dir_name(base_line_with_this_init_dir_name_str);   //120518
      base_line_with_this_init_filename = new CORN::OS::File_name_concrete(base_line_with_this_init_dir_name,".CropSyst_scenario");
      bool base_line_with_this_init_is_template = initialization_dirnames.count();
      if (base_line_with_this_init_is_template)
      {  // We have more initializations to combine, so base_line_with_this_init_filename
         // is only going to be a temporary file
         base_line_with_this_init_filename->set_cstr(tmpnam(0));
      } else
      {  // This is to be a generated scenario
         gen_scenario_ID_count++;
         /*111104 obsolete Warning don't delete yet, this function may
         also be used by ArcGIS
            Used to generate scenarios with number for file name
         CORN_uint32_to_str_leading(gen_scenario_ID_count,scenario_ID_cstr,10,'0',5);
         base_line_with_this_init_filename.set_name(scenario_ID_cstr);
         base_line_with_this_init_filename.set_ext("csn");
         base_line_with_this_init_filename.set_path(project_directory.get_generated_scenarios_dir_qual(true));
         */
/*NYI
// This is just to show progress
generated_scenarios_filelistbox->Items->Append(base_line_with_this_init_filename.c_str());
generated_scenarios_filelistbox->TopIndex =gen_scenario_ID_count;
Application->ProcessMessages();
*/
      }
      if (!precount)
      {
         CORN::OS::file_system_engine.create_directory(base_line_with_this_init_dir_name); //130123
         // load the base scenario
         VV_File  base_line_file(baseline_scenario_filename.c_str());
         base_line_file.get(base_line_with_this_init);

         // Load this initialization data.
         VV_File  init_file(init_file_name->c_str()); // This file should have only one initialization (section).
         init_file.get(base_line_with_this_init); // This should load only the selected sections
         base_line_with_this_init.description.brief.append(" ");
         init_file_name->append_components_to_string(base_line_with_this_init.description.brief,CORN::OS::Directory_entry_name::include_name_extension); //131006

// this output is for debugging only.
if (!base_line_with_this_init_is_template)
cout << base_line_with_this_init.description.brief << endl;
         // Save with base with this init
         VV_File  base_line_with_this_init_file(base_line_with_this_init_filename->c_str());
         base_line_with_this_init_file.set(base_line_with_this_init);
      }
      if (base_line_with_this_init_is_template)
      {
         CORN::Text_list remaining_initialization_dir_name;
         FOR_EACH_IN(remaining_dir,CORN::Text_list::Item,initialization_dirnames,each_remaining_dir)
             remaining_initialization_dir_name.add_string(*remaining_dir);
         FOR_EACH_END(each_remaining_dir)
         project_combinatorial_generation_initialization(project_directory,gen_scenario_without_initialization_dir,*base_line_with_this_init_filename,gen_scenario_ID_count,remaining_initialization_dir_name,precount);
         //111104 Not sure wy I was deleting this base_line_with_this_init_filename.delete_completely();
      }
      delete base_line_with_this_init_filename;
   } FOR_EACH_END(each_init_file)
   }
   delete this_dirname;
}
//______________________________________________________________________________
CropSyst::Project_directory
*CS_Explorer_engine::provide_project_directory()
{  if (identify_context() == project_context)
   {  if (project_directory)
      {  // If we have already setup a project directory, check that it matches the current project directory
         // If it doesn't then we have entered a different project context,
         // and we will and a new project directory
         if (directory_name_qualified->compare_including(*project_directory)!= 0)
         {  delete project_directory;
            project_directory = 0;
         }
      }
      if (!project_directory)
      {  project_directory = new
            CropSyst::Project_directory(*directory_name_qualified
            //#if (CS_VERSION==4)
            ,CROPSYST_PROJECT
            //#endif
            ) ;
      }
   }
   return project_directory;
}
//______________________________________________________________________________
const STRING_WITH_FILENAME &CS_Explorer_engine::launch_output_fast_graph()          const
{  CORN::OS::File_name_concrete daily_UED_filename(directory_name_qualified,"daily","UED"); //130123
   return run_program_with_primary_DEN
      (CS::Suite_directory->CropSyst().fastgraph_executable()
      ,daily_UED_filename
      , L""
      , false // don't wait_for_termination
      , SW_SHOWNORMAL);
}
//______________________________________________________________________________
const STRING_WITH_FILENAME &CS_Explorer_engine::launch_output_schedule_viewer()  const
{  CORN::OS::File_name_concrete schedule_filename(directory_name_qualified,"schedule","txt"); //130123
   return run_program_with_primary_DEN
      (CS::Suite_directory->CropSyst().schedule_viewer_executable()
      ,schedule_filename
      , L""
      , false // don't wait_for_termination
      , SW_SHOWNORMAL);
}
//______________________________________________________________________________
const STRING_WITH_FILENAME &CS_Explorer_engine::launch_output_schedule_text_viewer()  const
{  CORN::OS::File_name_concrete schedule_filename(directory_name_qualified,"schedule","txt");  //130123
   CORN::OS::file_system_engine.view_file(schedule_filename);
   return command;
}
//______________________________________________________________________________
const STRING_WITH_FILENAME &CS_Explorer_engine::launch_output_harvest_report_viewer()  const
{  CORN::OS::File_name_concrete harvest_filename(directory_name_qualified,"harvest","htm");  //130123
   CORN::OS::file_system_engine.view_file(harvest_filename);
   return command;
}
//______________________________________________________________________________
bool CS_Explorer_engine::scenario_output_has_file(const char *filename_unqual)    const
{  CORN::OS::File_name_concrete output_filename(*directory_name_qualified,filename_unqual); //120518
   return CORN::OS::file_system_engine.exists(output_filename);
}
//____________________________________________________scenario_output_has_file_/
class Simulation_run_period_data_record
: public CORN::Data_record
{  // NOTE: This class is duplicated in CS_explorer_engine,  I only really need one

 public:  // "simulation" section
   CORN::Date        starting_date;
   CORN::Date        ending_date;
   CORN::OS::File_name_concrete output_options_filename_rel;
 public:  //
   inline Simulation_run_period_data_record()
      : CORN::Data_record("simulation")
      , starting_date((CORN::Year)2000,(CORN::DOY)1,D_YMD,D_YYYY|D_Mmm|D_lead_zero,'/')
      , ending_date  ((CORN::Year)2001,(CORN::DOY)1,D_YMD,D_YYYY|D_Mmm|D_lead_zero,'/')
   {}
public:  //
   inline virtual void expect_structure(bool for_write)
   {  CORN::Data_record::expect_structure(for_write);                             //120314
      set_current_section(LABEL_simulation);
      expect_date(LABEL_starting_date,starting_date,false);
      expect_date(LABEL_ending_date,ending_date,false);
      set_current_section("output");
      expect_file_name("options",output_options_filename_rel);
      structure_defined = true;                                                  //130123
   }
};
//______________________________________________________________________________
const STRING_WITH_FILENAME & CS_Explorer_engine::output_export_UED_to_XLS_file_command_line
(const CORN_File_name &XXXXX_ued
,const CORN_File_name &XXXXX_xxx
,const CORN_File_name &XXXXX_tdf
,bool include_full_year)                                                   const
{
   Simulation_run_period_data_record sum_run_period;
   CORN::OS::Directory_name_concrete scenario_dir(*directory_name_qualified,CORN::OS::Directory_entry_name::include_ancestors_path_designated);
      /*130123 warning need to check this it was include_designated_parent_path*/

   CORN::OS::File_name_concrete scenario_filename(scenario_dir,".CropSyst_scenario");
   #if (CS_VERSION == 4)
   // We don't have a new scenario file, it may be and old version 4 scenario
   // so just use the backup file to get the path
   if (!CORN::OS::file_system_engine.exists(scenario_filename))
      scenario_filename.set_cstr("backup.csn");  // This is sort of a hack: Version 4 makes this backup copy of the scenario file, I am using this as a convenient way to find the parameter file
   #endif
   VV_File scenario_file(scenario_filename.c_str());
   scenario_file.get(sum_run_period);
   CORN::Date include_starting_date(sum_run_period.starting_date);
   if (include_full_year) include_starting_date.set_DOY(1);
   CORN::Date include_endinging_date(sum_run_period.ending_date);
   if (include_full_year) include_endinging_date.set_DOY(sum_run_period.ending_date.days_in_this_year() /*130417 days_in_year()*/);
   CORN::OS::File_name_concrete ued_filename(*directory_name_qualified,XXXXX_ued.w_str()); //130123
   CORN::OS::File_name_concrete xxx_filename(*directory_name_qualified,XXXXX_xxx.w_str()); //130123
   CORN::OS::File_name_concrete tdf_filename(*directory_name_qualified,XXXXX_tdf.w_str()); //130123
   if (xxx_filename.has_in_path_cstr("soil",CORN::OS::Directory_entry_name::include_path,false))
   {
      CORN::OS::Directory_name_concrete output_soil_dir(*directory_name_qualified,"soil");
      CORN::OS::file_system_engine.create_directory(output_soil_dir);

      // NYI at this point we are in the output directory
      // CropSyst run does not create a context for the scenario output
      // but we could do it now if it doesn't already exist

   }
   #define USE_convert_text_dBase_Excel_with_TDF_executable
   #ifdef USE_convert_text_dBase_Excel_with_TDF_executable
// Eventually I will implement the Excel tabular file in the UED convertor
   Convert_response_data_record response;
   response.operation         ="export";
   response.UED_filename      .set_DEN(ued_filename);                            //130123
   response.station_IDs_filter="";
   response.use_station_name  = false; // default UED will match the location
   response.year_earliest     = include_starting_date.get_year();
   response.year_latest       = include_endinging_date.get_year();
   response.date_time_earliest= include_starting_date.get_datetime64();
   response.date_time_latest  = include_endinging_date.get_datetime64();
   // N/A   response.prefix            = cropsyst_prefix_edit->Text.c_str();
   response.target_filename   .set_DEN(xxx_filename);                            //130123
   response.format_filename   .set_DEN(tdf_filename);                            //130123
   CORN::OS::File_name_concrete convert_rsp(Directory_name_concrete(),"convert.rsp");
   CORN::VV_File response_file(convert_rsp.c_str());
   response_file.set(response);
   run_program_with_primary_DEN                                                  //120412
      (CS::Suite_directory->UED().convert_text_dBase_Excel_with_TDF_executable() //120313
      ,convert_rsp
      ,L"" // options
      ,true // wait for termination
      ,SW_MINIMIZE);
   return command;                                                               //120518

   #else
   // 070621  This will eventually be replaced with UED with TDF convertor
   // but I haven't implemented the Excel tabular file
   if (ued_filename.exists()      && tdf_filename.exists())
   {  char date_num_buf[10];
      Ustring options("\"");
      options.append(xxx_filename);  // File name is quoted (I.e. xls file)
      options.append("\" ");
      if (xxx_filename.find("nnual") != SUBSTRING_NOT_FOUND)
      {  // if the output is annual and the starting data is jan 1
         // then hack the start date to be dec31 of previous year to get the effective initial condintions
         // in the annual reprochange this to
         if (include_starting_date.get_DOY() == 1)
            include_starting_date.dec();
      }
      options.append(ltoa(include_starting_date.get_date32(),date_num_buf,10));
      options.append(" ");
      options.append(ltoa(include_endinging_date.get_date32(),date_num_buf,10));
      return run_program_with_file_with_primary_and_secondary_file
      (CS::Suite_directory->UED().convert_export_executable()
      ,ued_filename
      ,tdf_filename
      ,options
      ,true // wait for termination
      ,SW_MINIMIZE);
   }
   return command;                                                               //111103
   #endif
}
//______________________________________________________________________________
const CropSyst::Scenario_output_options* CS_Explorer_engine::provide_output_options() provision_
{  if (output_options) delete output_options;
   if (identify_context() == scenario_output_context)
   {  Simulation_run_period_data_record sum_run_period;
      CORN::OS::File_name_concrete scenario_filename(*directory_name_qualified,".CropSyst_scenario");
      VV_File   scenario_file(scenario_filename.c_str());
      scenario_file.get(sum_run_period);
      if (CORN::OS::file_system_engine.exists(sum_run_period.output_options_filename_rel))

         //130123 WARNING, may need to resolve output_options_filename_rel if it is relative

      {  output_options = new CropSyst::Scenario_output_options ;
         VV_File output_options_file(sum_run_period.output_options_filename_rel.c_str());
         output_options_file.get(*output_options);
      }
   }
   return output_options;
}
//______________________________________________________________________________
const STRING_WITH_FILENAME &CS_Explorer_engine
::edit_file_if_known_type(const STRING_WITH_FILENAME &filename)                   const
{
   CORN::OS::File_name_concrete  file_name_to_edit(filename);
   command.clear();
   if      (file_name_to_edit.has_extension_ASCII(CS_scenario_EXT))       command.assign( edit_parameter_file(filename,CS_scenario_EXT  ,context_strings[scenario_context]  .editor /*"scenario_editor"   */,0));
   else if (file_name_to_edit.has_extension_ASCII(CS_crop_EXT))           command.assign( edit_parameter_file(filename,CS_crop_EXT      ,context_strings[crop_context]      .editor /*"crop_editor"       */,0));
   else if (file_name_to_edit.has_extension_ASCII(CS_soil_EXT))           command.assign( edit_parameter_file(filename,CS_soil_EXT      ,context_strings[soil_context]      .editor /*"soil_editor"       */,0));
   else if (file_name_to_edit.has_extension_ASCII(CS_rotation_EXT))       command.assign( edit_parameter_file(filename,CS_rotation_EXT  ,context_strings[rotation_context]  .editor /*"rotation_editor"   */,0));
   else if (file_name_to_edit.has_extension_ASCII(CS_management_EXT))     command.assign( edit_parameter_file(filename,CS_rotation_EXT  ,context_strings[management_context].editor /*"management_editor" */,0));
   else if (file_name_to_edit.has_extension_ASCII("UED"))                 command.assign( edit_parameter_file(filename,"UED"            ,context_strings[weather_context]   .editor /*"weather_editor"    */,0));
   else if (file_name_to_edit.has_extension_ASCII(CS_biomatter_EXT))      command.assign( edit_parameter_file(filename,CS_biomatter_EXT ,context_strings[biomatter_context] .editor /*"biomatter_editor"  */,0));
#if (CS_VERSION==4)
   else if (file_name_to_edit.has_extension_ASCII("LOC"))                 command.assign( edit_parameter_file(filename,"LOC"            ,"CropSyst\\location_editor"   ,0));
   else if (file_name_to_edit.has_extension_ASCII("FMT"))                 command.assign( edit_parameter_file(filename,"FMT"            ,context_strings[format_context]    .editor /*"format_editor"     */,0));
   // In version 4, the following file types are text files so should be picked up as simply open
//NYI      :   (file_name_to_edit.has_extension_ASCII(CS_water_table_EXT))    ? edit_parameter_file(filename,CS_water_table_EXT,"xxxxx",0)
//NYI      :   (file_name_to_edit.has_extension_ASCII(CS_recalibration_EXT))     ? edit_parameter_file(filename,CS_recalibration_EXT,"xxxxx",0)
#endif
   else
   {
      std::string file_name; file_name_to_edit.append_components_to_string(file_name,CORN::OS::Directory_entry_name::include_name);     //130123
      std::string file_ext;
      CORN::wstring_to_string(file_name_to_edit.get_extension(),file_ext);       //140111
      bool has_filename = file_name.length();
      bool has_ext      = file_ext .length();
      for (int context = 0; context < CONTEXT_COUNT; context++)
      {  // For each context type, check if the filename matches the name or extension for the context
         bool valid_context_file_ext_or_name = context_strings[context].parameter_file_ext_or_name;
         bool valid_context_ext              = context_strings[context].parameter_file_ext;
         if (  (has_filename && valid_context_file_ext_or_name && (file_name == context_strings[context].parameter_file_ext_or_name))
             ||(has_filename && valid_context_ext              && (file_name == context_strings[context].parameter_file_ext        ))
             ||(has_ext      && valid_context_file_ext_or_name && (file_ext  == context_strings[context].parameter_file_ext_or_name))
             ||(has_ext      && valid_context_ext              && (file_ext  == context_strings[context].parameter_file_ext        )))
         {  command.assign
               ( edit_parameter_file
                  (filename
                  ,context_strings[context].parameter_file_ext
                  ,context_strings[context].editor ,0));
         }
      }
   }
   if (!command.length()) // Not a CS_suite file
      command.assign(Explorer_engine_abstract::edit_file_if_known_type(filename));
   return command;
}
//______________________________________________________________________________
const STRING_WITH_FILENAME &CS_Explorer_engine::scenario_edit()            const
{  CORN::OS::File_name_concrete scenario_file_name(L".CropSyst_scenario");
   CORN::OS::File_name_concrete scenario_editor(CS::Suite_directory->CropSyst().scenario_editor_executable());
   bool is_version_5_CropSyst_scenario = true;
   {  // Support for version 5
      CORN::OS::File_name_concrete curr_scenario_filename(get_directory_name_qualified(),L".CropSyst_scenario");

      is_version_5_CropSyst_scenario = CORN::OS::file_system_engine.exists(curr_scenario_filename);
      if (is_version_5_CropSyst_scenario)
         scenario_file_name.set_DEN(curr_scenario_filename);
      if (!CORN::OS::file_system_engine.exists(scenario_editor))
           scenario_editor.set_DEN(CS::Suite_directory->CAFE().Dairy().field_editor_executable()); //140111
   }
   if (!is_version_5_CropSyst_scenario)
   {  // Support for version 4:
      CORN::OS::File_name_concrete csn_scenario_filename(get_directory_name_qualified(),L"csn");
      if (CORN::OS::file_system_engine.exists(csn_scenario_filename))
         scenario_file_name.set_DEN(csn_scenario_filename);
      else
      {                                                                           //110106
         CORN::OS::File_name_concrete CAFE_dairy_scenario_filename(get_directory_name_qualified(),L".CAFE_dairy_scenario");
         if (CORN::OS::file_system_engine.exists(CAFE_dairy_scenario_filename))
         {
            scenario_file_name.set_DEN(CAFE_dairy_scenario_filename);
            scenario_editor.set_DEN(CS::Suite_directory->CAFE().Dairy().scenario_editor_executable());
         }
      }
   }
   command_history.
      #if ((__BCPLUSPLUS__ >= 0x600))
      add_wstring                                                                //130123
      #else
      add_string
      #endif
      (run_program_with_primary_DEN
      ( scenario_editor
      , scenario_file_name
      , L""
      , false // wait_for_termination     // True if this editor is held until the other program exits
      , SW_SHOWNORMAL
      ));                                                                        //130123
   return command;
}
//______________________________________________________________________________
bool CS_Explorer_engine
::scenario_run
(bool display_runtime_graph
,const CORN_File_name *report_format_string_with_filename
,nat32 CPF_irrigation_percents
) const
{
   CORN::Text_list selected_scenario_filenames;
   bool is_version_5_CropSyst_scenario = true;
   {  // Support for version 5
      CORN::OS::File_name_concrete curr_scenario_filename(get_directory_name_qualified(),L".CropSyst_scenario");
      is_version_5_CropSyst_scenario = CORN::OS::file_system_engine.exists(curr_scenario_filename);
      if (is_version_5_CropSyst_scenario)
         selected_scenario_filenames.add_wstr(get_directory_name_qualified().w_str());
   }
   if (!is_version_5_CropSyst_scenario)
   {  // Support for version 4:
      CORN::OS::File_name_concrete curr_scenario_filename(get_directory_name_qualified(),L"csn");
      if (CORN::OS::file_system_engine.exists(curr_scenario_filename))
         selected_scenario_filenames.add_wstring(curr_scenario_filename);
      else
      {                                                                           //110106
         CORN::OS::File_name_concrete CAFE_dairy_scenario_filename(get_directory_name_qualified(),L".CAFE_dairy_scenario");
         if (CORN::OS::file_system_engine.exists(CAFE_dairy_scenario_filename))
            selected_scenario_filenames.add_wstring(CAFE_dairy_scenario_filename);
      }
   }
   bool abort_run = false;
   project_scenarios_run_scenarios
      (selected_scenario_filenames
      ,report_format_string_with_filename
      ,abort_run                                                                 //150419
      ,display_runtime_graph
      ,false
      ,CPF_irrigation_percents                                                   //150419
      );
   return true;
}
//_____________________________________________________________________________
bool CS_Explorer_engine::scenario_run_GIS()                                const
{  std::wstring no_options;
   run_program_with_primary_DEN                                                  //120411
         (CS::Suite_directory->CropSyst().GIS_runner_executable()
         ,*directory_name_qualified
         ,no_options
         , false // do not wait for termination
         , true /*visible was SW_SHOWNORMAL*/);
   return true;
}
//_2014-02-14__________________________________________________________________/
bool CS_Explorer_engine
::get_context_icon_filename(CORN_File_name &icon_filename,int &icon_index) const
{  bool icon_filename_available = true;
   icon_index = 0;
   switch (context_strings[identify_context()].mode)
   {  case 0 : icon_filename_available = false;  break; // no icon for arbitrary context
      case 1 : icon_filename_available =  false; break; // don't yet have UED icons directory
      case 2 :
      {  CORN::OS::File_name_concrete icon_fname(CS::Suite_directory->icons(),context_strings[identify_context()].icon,"ico");
         icon_filename.set_DEN(icon_fname);
      } break;
      case 3 :
      {  CORN::OS::File_name_concrete icon_fname(CS::Suite_directory->CropSyst(),context_strings[identify_context()].icon,"ico");
         icon_filename.set_DEN(icon_fname);
      } break;
   }
   if (icon_filename_available) // so far so good
       icon_filename_available = context_strings[identify_context()].icon != 0;
   return icon_filename_available;
}
//__________________________________________________get_context_icon_filename__/
bool CS_Explorer_engine
::get_context_description(std::string &description)                        const
{  description.assign(context_strings[identify_context()].description);
      ///< The derived class should override to set the brief one line description. (Currently this codes in the desktop infotip).
      ///  By default no description is assigned.
      ///\return false if this folder does not need or should not have a description.
   return true;
}
//____________________________________________________get_context_description__/
bool CS_Explorer_engine::get_context_ID(modifiable_ std::string &ID)       const
{  ID.assign(context_strings[identify_context()].context);
   return true;
}
//_2014-11-14___________________________________________________________________
bool CS_Explorer_engine
::navigator_double_clicked_file(const STRING_WITH_FILENAME &item_path)     const
{  bool did_something = false;
   CORN::OS::File_name_concrete file_name_to_process(item_path);                 //130418
   if (edit_file_if_known_type(item_path).length())
         did_something = true;
   else
   {  int open_status = CORN::OS::file_system_engine.open_file(file_name_to_process);
#ifdef NYI
         switch (open_status < 32)
         {
/* NYI
ERROR_FILE_NOT_FOUND The specified file was not found.
ERROR_PATH_NOT_FOUND The specified path was not found.
ERROR_BAD_FORMAT The .exe file is invalid (non-Microsoft Win32 .exe or error in .exe image).
SE_ERR_ACCESSDENIED The operating system denied access to the specified file.
SE_ERR_ASSOCINCOMPLETE The file name association is incomplete or invalid.
SE_ERR_DDEBUSY The Dynamic Data Exchange (DDE) transaction could not be completed because other DDE transactions were being processed.
SE_ERR_DDEFAIL The DDE transaction failed.
SE_ERR_DDETIMEOUT The DDE transaction could not be completed because the request timed out.
SE_ERR_DLLNOTFOUND The specified DLL was not found.
SE_ERR_FNF The specified file was not found.
SE_ERR_NOASSOC There is no application associated with the given file name extension. This error will also be returned if you attempt to print a file that is not printable.
SE_ERR_OOM There was not enough memory to complete the operation.
SE_ERR_PNF The specified path was not found.
SE_ERR_SHARE A sharing violation occurred.
*/
            case 0: case default:
            {  // Invoke open failed
               // NYI
            }
            break;
         }
#endif
         did_something = open_status > 32;                                       //130416
         command.clear(); // invoke_open uses Windows API ShellExecute so the command is not available
         // Set explorer_engine recently selected file because it may be used
         // in the next invoked function.
         recently_selected_DEN[identify_context()].set_wstr(item_path.c_str());
   }
   return did_something;
}
//______________________________________________navigator_double_clicked_file__/
bool CS_Explorer_engine
::navigator_single_clicked_file(const STRING_WITH_FILENAME &item_path)     const
{
   // Set explorer_engine recently selected file because it may be used
   // in the next invoked function.
   nat8 identified_context = identify_context();
   if (identified_context < CONTEXT_COUNT)
      recently_selected_DEN[identified_context].set_wstr(item_path.c_str());
   return true;
}
//______________________________________________navigator_single_clicked_file__/
const STRING_WITH_FILENAME &CS_Explorer_engine::CANMS_scenario_edit()      const
{
   CORN::OS::File_name_concrete *scenario_file_name_ptr= new CORN::OS::File_name_concrete(get_directory_name_qualified(),L".CANMS_scenario");
   if (!CORN::OS::file_system_engine.exists(*scenario_file_name_ptr))
   {  // this is a version 4 scenario
      delete scenario_file_name_ptr;
      scenario_file_name_ptr = new  CORN::OS::File_name_concrete(L".CANMS_scenario");
   } //else  this is a version 5 scenario
   CORN::OS::File_name_concrete &scenario_file_name = *scenario_file_name_ptr;
   CORN::OS::File_name_concrete scenario_editor(CS::Suite_directory->CropSyst().scenario_editor_executable());
   const STRING_WITH_FILENAME &result = run_program_with_primary_DEN
      ( scenario_editor
      ,  scenario_file_name
      //120516 , ""
      , L""
      , false // wait_for_termination     // True if this editor is held until the other program exits
      , SW_SHOWNORMAL
      );
   return result;
}
//________________________________________________________CANMS_scenario_edit__/
Directory_context CS_Explorer_engine
::assume_context(Directory_context assumed_context) modification_
{  identified_context = assumed_context;
   return identified_context;
}
//______________________________________________________________________________
const STRING_WITH_FILENAME &CS_Explorer_engine::map_UED_locations()        const
{  run_program_with_primary_DEN
      ( CS::Suite_directory->UED().map_google_executable()
      , *directory_name_qualified
      , L"" //options
      , false // wait_for_termination     // True if this editor is held until the other program exits
      , SW_SHOWNORMAL);
   CORN::OS::File_name_concrete location_map(*directory_name_qualified,L"locations_map.htm");
   CORN::OS::file_system_engine.view_file(location_map);
   return command;
}
//______________________________________________________________________________
const STRING_WITH_FILENAME & CS_Explorer_engine::launch_notepad()          const
{
   //101136 This should probably launch all selected UED files.
   return
      CORN::OS::file_system_engine.exists(recently_selected_DEN[identified_context])
      ?  run_program_with_primary_DEN
         ( //"notepad.exe"           // fully qualified name of the program to run (unquoted)
          CORN::OS::File_name_concrete("notepad.exe")
         , recently_selected_DEN[identified_context] // primary_file
         , L"" // no options
         , false // don't wait_for_termination     // True if this editor is held until the other program exits
         , true   // visible
         )
      : Explorer_engine_abstract::launch_notepad();
}
//_____________________________________________________________launch_notepad__/
const STRING_WITH_FILENAME & CS_Explorer_engine::launch_UED_condense()     const
{
   //101136 This should probably launch all selected UED files.
   return
      (CORN::OS::file_system_engine.exists(recently_selected_DEN[identified_context])
       && recently_selected_DEN[identified_context].has_extension_ASCII("UED")) // Only condense UED filenames
      ?  run_program_with_primary_DEN                                            //120516
         (CS::Suite_directory->UED().condense_executable()
         , recently_selected_DEN[identified_context] // primary_file
         , L"" // no options
         , false // don't wait_for_termination     // True if this editor is held until the other program exits
         , true   // visible
         )
      : command;
}
//_______________________________________________________________UED_condense__/
bool CS_Explorer_engine::launch_CropSyst_wizard()                          const
{
   run_program(CS::Suite_directory->CropSyst().CropSyst_wizard_executable(),L"",false,true);
   return true;
}
//_2014-10-22_______________________________________________________________launch_CropSyst_wizard___/
bool CS_Explorer_engine::update_application_suite()                        const
{
   return (int)ShellExecuteW(0,L"runas",CS::Suite_directory->install_or_update().w_str(),NULL,NULL,SW_SHOW)>32;
   //run_program   (CS::Suite_directory->install_or_update(),L"",false,true);
   return true;
}
//_2012-01-12________________________________________update_application_suite__/
bool CS_Explorer_engine::translate_AgMIP_ACE     // actually this could be renamed to indicate any translator program
(const CORN_File_name &translator_exe
,const CORN_File_name &JSON_filename)    const
{
   return run_program_with_primary_DEN
      ( translator_exe, JSON_filename
      , L"" , true  , SW_SHOWNORMAL) .length();
}
//_2013-04-18_____________________________________________translate_AgMIP_ACE__/
nat16 CS_Explorer_engine::translate_AgMIP_ACE_JSON_files
(const CORN::Text_list &selected_JSON_filenames_presumed)                  const
{  nat16 translated = 0;
   bool ACE_to_CropSyst_translator_installed = true;
   CORN::OS::File_name *ACE_to_CropSyst_translator =
      (CS::Suite_directory->find_file_name(L"ACE_to_CropSyst.exe" /*140110 "translator-CropSyst.exe"*/,true));
   if (ACE_to_CropSyst_translator_installed)
   FOR_EACH_IN(selected_filename,Text_list::Item,selected_JSON_filenames_presumed,each_JSON_file)
   {
      CORN::OS::File_name_concrete selected_filename_instance(get_directory_name_qualified(),*selected_filename); //130513
      if (selected_filename_instance.has_extension_ASCII("json"))
      {  translated += translate_AgMIP_ACE(*ACE_to_CropSyst_translator,selected_filename_instance);
      }
   } FOR_EACH_END(each_JSON_file)
   return translated;
}
//_2013-04-18___________________________________________________________________
int CS_Explorer_engine::export_scenarios
(const CropSyst::Scenario_export_engine::Arguments &export_args
,nat8 format_index)
{
   CORN::OS::File_name *exporter_exe =
      (CS::Suite_directory->find_file_name
         ((format_index == 1)
            ?L"CropSyst_to_ACMO.exe"
            :L"CropSyst_to_ACE.exe"
         ,true));
   // NYI should append command to command history
   if (exporter_exe)                                                             //150503
      run_program                                                                //120411
      ( *exporter_exe
      , export_args.compose()
      , false // dont wait_for_termination
      , true); // visible
   delete exporter_exe;
   return 1;
}
//_2013-01-11___________________________________________________________________
nat32 CS_Explorer_engine::UED_file_quality_import_or_export
(const std::string &command
,const CORN::Text_list  &selected_UED_filenames_qual_or_unqual)
{  nat32 files_processed=0;
   FOR_EACH_IN(UED_qual_or_unqual,CORN::Text_list::Item,selected_UED_filenames_qual_or_unqual,each_UED)
   {
      // Note that selected_UED_filenames_qual_or_unqual could be any file
      // that happens to be in the weather folder.
      // In most situations these will be UED files
      // but the user may have put arbitrary files in this directory.
      // so we filter only UED files
      CORN::OS::File_name_concrete *UED_qual = new CORN::OS::File_name_concrete(*UED_qual_or_unqual);
      if (!UED_qual->is_qualified(false))                                        //120212
      {  delete UED_qual;
         UED_qual = new CORN::OS::File_name_concrete(*directory_name_qualified,*UED_qual_or_unqual);
      }
      // UED filename  should now be qualified.
      if (UED_qual->has_extension_ASCII("UED"))
      {  CORN::OS::File_name_concrete UED_quality_filename(*UED_qual,CORN::OS::Extension("UED_quality"));
         std::wstring args = L"command=";
         CORN::append_string_to_wstring(command,args);
         CORN::append_string_to_wstring(" \"UED_filename=",args);
         UED_qual->append_to_wstring(args);
         CORN::append_ASCIIz_to_wstring("\" \"target_filename=",args);
         UED_quality_filename.append_to_wstring(args);
         CORN::append_ASCIIz_to_wstring("\"",args);
         command_history.add_wstring
               (run_program
                  (CS::Suite_directory->UED().quality_import_export_executable()
                  ,args, true,SW_SHOWNORMAL));
         files_processed ++;
      }
      delete UED_qual;
   } FOR_EACH_END(each_UED)
   return files_processed;
}
//_2014-06-29___________________________________________________________________
bool CS_Explorer_engine::database_REACCH_import
(float32 latitude,float32 longitude
,const std::string &climate_scenario
,const std::string &RCP_scenario
,bool from_local_server
,const std::string &master_scenario_directory)                     contribution_
{
   bool succeeded = true;
   std::string delimiter(from_local_server?" ":"&");                             //140804
   std::string args("\"");
   args.append(master_scenario_directory);
   args.append("\"");
   args.append(delimiter); args.append("latitude="); CORN::append_float32_to_string(latitude,8,args);
   args.append(delimiter); args.append("longitude=");CORN::append_float32_to_string(longitude,8,args);
   args.append(delimiter); args.append("climate=");  args.append(climate_scenario);
   args.append(delimiter); args.append("RCP=");      args.append(RCP_scenario);
   if (from_local_server)                                                        //140804
   {
      std::wstring wargs; CORN::string_to_wstring(args,wargs);
      command_history.add_wstring(run_program
         (CS::Suite_directory->Database_REACCH_to_CS_soil_weather_executable()
         ,wargs, true,SW_SHOWNORMAL));
   } else                                                                        //140804
   {
      succeeded = false;
      std::string get_request ("/xmlwebservices2/elevation_service.asmx/getElevation?");

      // NYI need to use the Web severs query method, I haven't written that program yet.

      get_request.append(args);

      std::string response;
      CORN::Internet::request(GET,"modeling.bsyse.wsu.edu",get_request.c_str(),NULL,NULL,response);
      // parse response
      // The exported files will be source URL directory
      size_t start_soil_pos = response.find("<soil>");
      size_t end_soil_pos = response.find("</soil>");
      size_t soil_tag_length = strlen("<soil>");
      if ( (start_soil_pos != std::string::npos)
         &&(end_soil_pos   != std::string::npos))
      {
         std::string soil_URL_str(response,start_soil_pos+soil_tag_length,end_soil_pos-start_soil_pos-soil_tag_length);
         CORN::OS::Uniform_resource_locator soil_URL(soil_URL_str.c_str());
         CORN::OS::File_name_concrete target_filename
            (get_directory_name_qualified()
            ,soil_URL.ref_path().get_components
               (CORN::OS::Directory_entry_name::include_name_extension));
         pending_downloads.append(new Pending_download(soil_URL,target_filename));
         succeeded = true;
      }
      size_t start_weather_pos = response.find("<weather>");
      size_t end_weather_pos = response.find("</weather>");
      size_t weather_tag_length = strlen("<weather>");
      if ( (start_weather_pos != std::string::npos)
         &&(end_weather_pos   != std::string::npos))
      {
         std::string weather_URL_str(response,start_weather_pos+weather_tag_length,end_weather_pos-start_weather_pos-weather_tag_length);
         CORN::OS::Uniform_resource_locator weather_URL(weather_URL_str.c_str());
         CORN::OS::File_name_concrete target_filename
            (get_directory_name_qualified()
            ,weather_URL.ref_path().get_components
               (CORN::OS::Directory_entry_name::include_name_extension));
         pending_downloads.append(new Pending_download(weather_URL,target_filename));
         succeeded = true;
      }
   }
   return succeeded;
}
//_2014-06-30___________________________________________________________________
bool CS_Explorer_engine::download_pending_URLs()
{  nat32 downloaded_files = 0;
   CORN::Unidirectional_list downloads_not_yet_available;
   Pending_download *pending_download;

   CORN::Internet::HTTP http;
   while (pending_download = dynamic_cast<Pending_download *>(pending_downloads.pop_first()))
   {
      bool downloaded = http.download_file
         (pending_download->URL
         ,pending_download->target);
      downloaded_files += downloaded;
      if (downloaded || (pending_download->tries_remaining == 0)) delete pending_download;
      else
      {  pending_download->tries_remaining --;
         downloads_not_yet_available.append(pending_download);
      }
   }
   pending_downloads.transfer_all_from(downloads_not_yet_available);
   return downloaded_files;
}
//_2014-08-04___________________________________________________________________
Pending_download::Pending_download
(const std::wstring                       &_URL
,const CORN::OS::Directory_name_concrete   &_target_directory
,nat8                                      _tries_remaining)
: CORN::Item()
, URL(_URL.c_str())
, target(_target_directory)
, tries_remaining(_tries_remaining)
{
}
//_2014-10-09___________________________________________________________________
Pending_download::Pending_download
(const std::string                        &_URL
,const CORN::OS::Directory_name_concrete   &_target_directory
,nat8                                      _tries_remaining)
: CORN::Item()
, URL(_URL.c_str())
, target(_target_directory)
, tries_remaining(_tries_remaining)
{
}
//_2014-10-09___________________________________________________________________
/*150418 obsolete, already have CPF runner class
nat32 CS_Explorer_engine::generate_and_run_crop_production_function
(const CORN::OS::Directory_name &scenario_dirent_qual)
{

   continue here
   The primary scenario will have already been run.
   Create folder CPF
   for each adjustmetn percent 0 10 ... 120
      Create subfolder named with the percent 0 10 ... 120
      take the output management and create fixed or CPF.MGT
      Run CropSyst with the percent dir as CWD
      CropSyst should see the management file and disabled the
      automatic irrigations (run in adjusted CPF mode)
      CropSyst should find the model options in the parent directory.
      // Returns the number of scenarios generated and run.
}
*/
 //_2015-04-14__________________________________________________________________

