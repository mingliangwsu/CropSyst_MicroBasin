#include "CS_suite/observation/CS_examination.h"
//#include "CS_Suite/simulation/CS_inspector.h"
#include "CS_suite/observation/CS_emanator.h"

namespace CS
{
//______________________________________________________________________________
Examination::Examination()
: seclusion                      ()
, inspectors                     (true)
, inspections                    ()
, inspectors_completed           ()
, inspections_completed_periodic ()
, inspections_completed_annual   ()
, deletable                      ()
/*160619
, inspectors_deletable           ()
, inspections_deletable          ()
*/
, inspection_tallies             (true) // unique
{

   debug_unique_inspector_instances.set_unique_keys(true);
   debug_unique_inspector_ontologies.set_unique_keys(true);
}
//_2016-06-06_____________________________________________________constructor__/
/*nyn
Examination::Examination(const Examination &copy_from)
//: emanator(copy_from.emanator)
{
}
//_2016-06-06_____________________________________________________constructor__/
*/
Examination::~Examination()
{
   // It is not necessaariy to clear the lists because corn container
   // destructors clear themselves.
   #ifdef _DEBUG
   debug_unique_inspector_instances.sort();
   debug_unique_inspector_ontologies.sort();
   std::ofstream instances("instances.dat");
   std::ofstream ontologies("ontologies.dat");

   debug_unique_inspector_instances.write(instances);
   debug_unique_inspector_ontologies.write(ontologies);
   #endif
}
//_2016-06-06_______________________________________________________destructor_/
bool Examination::start_year()                                    modification_
{  bool started = true;
   FOR_EACH_IN(inspection,Inspection,inspections,each_inspection)
      if (inspection->level_or_period == annual_inspection)
         started &= inspection->reset();
   FOR_EACH_END(each_inspection)
   return started;
}
//_2016-06-13___________________________________________________________________
bool Examination::end_year()                                       modification_
{
   deletable.delete_all();
   return true;
}
//_2016-06-16___________________________________________________________________
bool Examination::end_day()                                       modification_
{  bool ended = true;
   // Note that we must process the inpections before the inspectors.

   FOR_EACH_IN(inspection,Inspection,inspections,each_inspection)
   {

      ended &= inspection->commit();
      if (inspection->inspector.context.get_status() == Emanator::deleted_status)
      {  // The inspection's inspector's emanator has been marked for deletion
         // so the inspection is complete.
         // This shouldn't be needed because emanating objects should call
         // complete_period_inspection, this is just in case they dont.
/*
int32 insptnaddr = (int32)&(inspection->inspector.value);
std::cout << "endday:" << insptnaddr << '\t' << inspection->debug_ID << '\t' << inspection->inspector.provide_instance_name_qualified() << std::endl;
*/
//         assert(false);

         if (inspection->level_or_period == annual_inspection)
            inspections_completed_annual.append(each_inspection->detach_current());
         else
            inspections_completed_periodic.append(each_inspection->detach_current());
      }
   } FOR_EACH_END(each_inspection)
   FOR_EACH_IN(inspector,Inspector,inspectors,each_inspector)
   {
      if (inspector->context.get_status() == Emanator::deleted_status)
      {  // Transfer inspector whose emanating object has been deleted so the inspector is complete
         inspectors_completed.append(each_inspector->detach_current());
      }
   } FOR_EACH_END(each_inspector)
   return ended;
}
//_2016-06-13___________________________________________________________________
bool Examination::add_period_inspection
(nat8             period
//now use tally and dataset names,const char      *label
,const Emanator  &context
//,bool only_for_this_context_inspectors
,CORN::Datetime64 period_start_date
,const char       *tally_name       // I.e. annual
,const char       *dataset_name     // I.e. daily
//,bool             store_dataset
,nat32            desired_descriptive_summary_elements)
{  bool added = false;
   FOR_EACH_IN(inspector,Inspector,inspectors,each_inspector)
   {
      /*
      if (!only_for_this_context_inspectors ||
           (&(inspector->context) == (&context)))
      */
      if (context.is_ephemeral() == inspector->context.is_ephemeral())
      {  // We are not saying that both the context and the inspectors context
         // needs to be ephemeral.
         // It is simply that both the context and the inspectors context
         // should have the same ephemorality (both always present, or both ephemeral).
         Inspection *inspection = new Inspection
         (*inspector
         ,period
         //,label
         ,period_start_date
         ,tally_name
         ,dataset_name
         //,store_dataset
         ,desired_descriptive_summary_elements
            // eventually may want a mechism to
         );
         inspections.append(inspection);
         added = true;
      }

      debug_unique_inspector_instances .add_string(inspector->provide_instance_name_qualified());
      debug_unique_inspector_ontologies.add_string(inspector->provide_ontology_qualified());

   } FOR_EACH_END(each_inspector)

   return added;
}
//_2016-06-13___________________________________________________________________
bool Examination::complete_period_inspection(nat32 level_period,const Emanator &context)
{  bool completed = false;

/* for debug
CORN::Text_list context_qualified_instance; // for debug output
context.list_instance_path(context_qualified_instance);
*/


   FOR_EACH_IN(inspection,Inspection,inspections,each_inspection)
   {
//int32 inspectaddr = (int32)inspection;

      if ((inspection->level_or_period == level_period)
         &&(&inspection->inspector.context == &context))
      {  // Complete period inspection probably occurs before
         // the emanating object gets to end_day() so the daily
         // values would not otherwise have been commited

/*for debug
std::clog << "complete period:" << level_period << ":" <<  std::endl;
std::clog << "context:" << context_qualified_instance.write(std::cout) <<  std::endl;
int32 insptnaddr = (int32)&(inspection->inspector.value);
std::cout << insptnaddr << '\t' << inspection->debug_ID << '\t' << inspection->inspector.provide_instance_name_qualified() << std::endl;
*/

         inspection->commit();

         inspection_tally_commit(*inspection);

         if (level_period == annual_inspection)
               inspections_completed_annual  .append(each_inspection->detach_current());
         else  inspections_completed_periodic.append(each_inspection->detach_current());
         completed = true;
      }

   } FOR_EACH_END(each_inspection)
   return completed ;
}
//_2016-06-13___________________________________________________________________
bool Examination::filter()                                        modification_
{
   // First remove unwanted inspections because inspections reference
   // inspectors, deleting an inspector will leave dangling reference.
   FOR_EACH_IN(inspection,Inspection,inspections,each_inspection)
   {
      // Currently I have a single seculsion filter for both
      // instance names and ontology
      const CORN::Text_list &inspector_instance_name_path = inspection->inspector.provide_instance_qualification_list();
      const CORN::Text_list &inspector_context_path_path  = inspection->inspector.provide_ontology_qualification_list();
      if     (seclusion.is_excluded_text_list(inspector_instance_name_path))
         each_inspection->delete_current();
      else if(seclusion.is_excluded_text_list(inspector_context_path_path))
         each_inspection->delete_current();
   } FOR_EACH_END(each_inspection)

   FOR_EACH_IN(inspector,Inspector,inspectors,each_inspector)
   {
      // Currently I have a single seculsion filter for both
      // instance names and ontology
      const CORN::Text_list &inspector_instance_name_path = inspector->provide_instance_qualification_list();
      const CORN::Text_list &inspector_context_path_path  = inspector->provide_ontology_qualification_list();
      if     (seclusion.is_excluded_text_list(inspector_instance_name_path))
         each_inspector->delete_current();
      else if(seclusion.is_excluded_text_list(inspector_context_path_path))
         each_inspector->delete_current();
   } FOR_EACH_END(each_inspector)
   return true;
}
//_2015-10-13___________________________________________________________________
Examination::Inspection_tally_store &Examination::provide_inspection_tally_store
(const Inspection &inspection)                                 provision_
{
   Examination::Inspection_tally_store *new_inpection_tally
      = new Examination::Inspection_tally_store
         (inspection.inspector
         ,inspection.initiation_date
         ,inspection.level_or_period
         ,inspection.tally_name);
   Examination::Inspection_tally_store *listed_inpection_tally
      = dynamic_cast<Examination::Inspection_tally_store *>
      (inspection_tallies.append(new_inpection_tally));
   /*append already deletes
   if (listed_inpection_tally && listed_inpection_tally != new_inpection_tally)
   {  // we already have such a tally
      delete new_inpection_tally;
   }
   */
   return *listed_inpection_tally;
}

//_2016-06-17___________________________________________________________________

bool Examination::inspection_tally_commit(const Inspection &inspection) modification_
{
   Inspection_tally_store &inspection_tally = provide_inspection_tally_store(inspection);
   return inspection_tally.commit(inspection);
}
//_2016-06-17___________________________________________________________________
Examination::Inspection_tally_store::Inspection_tally_store
(const Inspector &inspector_
,CORN::Datetime64 inception_date_
,nat8             level_or_period_
,const std::string &tally_name_
)
: CORN::Item()
,inspector        (inspector_)
,inception_date   (inception_date_)
,level_or_period  (level_or_period_)
,tally_name       (tally_name_)
{
   for (nat8 s = 0; s < CORN::statistic_COUNT; s++)
   {  stat_tally[s] = 0;
   }
}
//_2016-06-17___________________________________________________________________
bool Examination::Inspection_tally_store::commit(const Inspection &inspection)        modification_
{
   for (nat8 s = 0; s < CORN::statistic_COUNT; s++)
   {  CORN::Statistic stat = (CORN::Statistic)s;                                 //160812
      bool is_desired_state = inspection.is_tally_statistic_applicable(stat);
      if (is_desired_state)
      {
         if (!stat_tally[s]) stat_tally[s] = new CORN::Statistical_sample_with_dataset<float64,float32,float32>;
         if (stat_tally[s])
            stat_tally[s]->append(inspection.get_tally_statistic(stat));
      }
   }
   return true;
}
//_2016-06-17___________________________________________________________________
int Examination::Inspection_tally_store::compare(const CORN::Item &other_item)   const
{  int comparison = -1;
   const Examination::Inspection_tally_store &other =
      dynamic_cast<const Examination::Inspection_tally_store &>(other_item);
   if (&(this->inspector) == &(other.inspector))
   {
      if (this->level_or_period == other.level_or_period)
      {
         if (this->inception_date == other.inception_date)
            comparison = 0;
         // std::string       tally_name;
      }
   }
   return comparison;
}
//_2016-06-19___________________________________________________________________
Examination examination_global;
//_2016-06-14___________________________________________________________________

/* nyn
nat32 Examination::dump_inspectors(std::ostream &strm, Examination_level level)
{
   return
      Examination.inspectors.write(strm)
      Examination.inspections.write(strm);

}
*/
//_2015-10-13___________________________________________________________________




} // namespace CS
