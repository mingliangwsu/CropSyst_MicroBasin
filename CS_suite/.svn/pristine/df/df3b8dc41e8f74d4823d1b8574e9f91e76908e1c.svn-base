#include "CS_suite/simulation/CS_simulation_element.h"
#include "CS_suite/simulation/CS_event_scheduler.h"
//______________________________________________________________________________
namespace CS
{
//______________________________________________________________________________
Simulation_element::Simulation_element()
:CORN::Item()
{}
//______________________________________________________________________________
Simulation_element_abstract::Simulation_element_abstract
(const CORN::Date32 &today_raw_)                                                 //170524
//170524 (const CORN::Date &today_)
: Simulation_element()
//170524 , today           (today_)
, today_raw       (today_raw_)                                                   //170524
, today           (today_raw)                                                    //170524
, event_scheduler (0)
, ended_year      (false)                                                        //170413
{}
//_2015-06-08___________________________________________________________________
Simulation_element_abstract::~Simulation_element_abstract()
{  provide_emanators().forget((int32)this);
}
//_2015-05-21___________________________________________________________________
bool Simulation_element_abstract::is_valid()                        affirmation_ { return true; } //{ return event_scheduler ? event_scheduler->is_valid()    : true; }
bool Simulation_element_abstract::start_day()                      modification_ { return event_scheduler ? event_scheduler->start_day()   : true; }
bool Simulation_element_abstract::process_day()                    modification_ { return event_scheduler ? event_scheduler->process_day() : true; }
//_2015-09-30___________________________________________________________________
nat32 Simulation_element_abstract::take_events
(modifiable_ CORN::Container &events)                              modification_
{  nat32 taken_count
   = (event_scheduler)
   ?  event_scheduler->take_events(events)
   : 0;
   return taken_count;
}
//_2015-09-30___________________________________________________________________
bool Simulation_element_abstract::start()                          modification_
{  bool started = true;
   if (event_scheduler) started &= event_scheduler->start();
   return started;
}
//_2016-06-06___________________________________________________________________
bool Simulation_element_abstract::start_year()                    modification_
{  bool started = true;
   if (event_scheduler) started &= event_scheduler->start_year();
   ended_year = false;
   return started;
}
//_2016-06-06___________________________________________________________________
bool Simulation_element_abstract::end_year()                       modification_
{  bool ended = true;
   ended &= event_scheduler ? event_scheduler->end_year()    : true;
   ended_year = true;                                                            //170413
   return ended;
}
//_2016-06-22___________________________________________________________________
#ifdef DIDNT_IMPLEMENT
delete this
bool Simulation_element_abstract::start_period()                   modification_
{  bool started = true;
   if (event_scheduler) started &= event_scheduler->start_period();
   return started;
}
#endif
//_2016-06-09___________________________________________________________________
bool Simulation_element_abstract::end_day()                        modification_
{  bool ended = true;
   if (event_scheduler) ended &= event_scheduler->end_day();
   return ended;
}
//_2016-06-06___________________________________________________________________
bool Simulation_element_abstract::stop()                           modification_
{  bool stopped = true;
   // In the case where the simulation period ends before the end of the year
   // call end year to finish any yearly tallies.
   if (!ended_year) stopped &= end_year();                                                  //170413
   if (event_scheduler) stopped &= event_scheduler->stop();
   return stopped;
}
//_2016-06-06___________________________________________________________________
Simulation_element_composite::Simulation_element_composite
(const CORN::Date32 &today_raw_)                                                 //170524
:Simulation_element_abstract(today_raw_)                                         //170524
/*170524
(const CORN::Date &today_)
:Simulation_element_abstract(today_)
*/
{}
//_2015-06-08___________________________________________________________________
bool Simulation_element_composite::initialize()                  initialization_
{  bool initialized = Simulation_element_abstract::initialize();
   if (!initialized) std::clog << "Simulation_element_composite::initialize() Simulation_element_abstract::initialize failed " << std::endl;
   FOR_EACH_IN_PARALLEL(sub_element,Simulation_element,sub_elements,each_element)
   {
      initialized &= sub_element->initialize();
      if (!initialized) std::clog << "Simulation_element_composite::initialize() sub_element->initialize failed " << std::endl;
   } FOR_EACH_END(each_element)
   return initialized;
}
//_2015-04-29___________________________________________________________________
bool Simulation_element_composite::start()                         modification_
{  bool started = Simulation_element_abstract::start();
   FOR_EACH_IN_PARALLEL(sub_element,Simulation_element,sub_elements,each_element)
      started &= sub_element->start();
   FOR_EACH_END(each_element)
   return started;
}
//______________________________________________________________________________
bool Simulation_element_composite::start_year()                    modification_
{   bool started = Simulation_element_abstract::start_year();
   // Balancer start_year() must be done before start_year() to
   // make sure accumulators are clear for the start of the year.
   // Components may then reset with any initial values.
   FOR_EACH_IN_PARALLEL(sub_element,Simulation_element,sub_elements,each_element)
   {  started &= sub_element->start_year();
   } FOR_EACH_END(each_element)
   return started;
}
//_2013-06-18___________________________________________________________________
bool Simulation_element_composite::end_year()                      modification_
{  bool ended = true;
   // Balancer end_year() must be done after end_year() to make sure the components have added any
   // last minute accumulations.
   //170528 FOR_EACH_IN_PARALLEL
   FOR_EACH_IN_REVERSE_PARALLEL(sub_element,Simulation_element,sub_elements,each_element)
   {  ended &= sub_element->end_year();
   } FOR_EACH_END(each_element)
   return Simulation_element_abstract::end_year() && ended;                      //170528
}
//_2013-06-18___________________________________________________________________
bool Simulation_element_composite::start_day()                     modification_
{  bool started = Simulation_element_abstract::start_day();
   FOR_EACH_IN_PARALLEL(sub_element,Simulation_element,sub_elements,each_element)
      started &= sub_element->start_day();
   FOR_EACH_END(each_element)
   return started;
}
//_2013-06-18___________________________________________________________________
bool Simulation_element_composite::process_day()                   modification_
{  bool processed = Simulation_element_abstract::process_day();
   FOR_EACH_IN_PARALLEL(sub_element,Simulation_element,sub_elements,each_element)
      processed &= sub_element->process_day();
   FOR_EACH_END(each_element)
   return processed;
}
//_2013-06-18___________________________________________________________________
bool Simulation_element_composite::end_day()                       modification_
{  bool ended = true;
   //170528 FOR_EACH_IN_PARALLEL
   FOR_EACH_IN_REVERSE_PARALLEL
   (sub_element,Simulation_element,sub_elements,each_element)
      ended &= sub_element->end_day();
   FOR_EACH_END(each_element)
   return Simulation_element_abstract::end_day() && ended;                       //170528
}
//_2013-06-18___________________________________________________________________
bool Simulation_element_composite::stop()                          modification_
{  bool stopped = true;
   //170528 FOR_EACH_IN_PARALLEL
   FOR_EACH_IN_REVERSE_PARALLEL
   (sub_element,Simulation_element,sub_elements,each_element)
      stopped &= sub_element->stop();
   FOR_EACH_END(each_element)
   return Simulation_element_abstract::stop() && stopped;                        //170528
}
//_2014-07-14___________________________________________________________________
RENDER_INSPECTORS_DEFINITION(Simulation_element_abstract)
{  KNOW_EMANATOR(today.get_datetime64(),false);                                  //170319_160626
   return &emanator;
}
//_2015-08-21___________________________________________________________________
RENDER_INSPECTORS_DEFINITION(Simulation_element_composite)
{  Emanator *emanator = Simulation_element_abstract
      ::render_inspectors(inspectors,context,instance);
   if (emanator)                                                                 //160616
   FOR_EACH_IN_PARALLEL(sub_element,Simulation_element,sub_elements,each_elem)
      sub_element->render_inspectors(inspectors,emanator,instance);              //160616
   FOR_EACH_END(each_elem)
   return emanator;
}
//_2015-08-19___________________________________________________________________
} // namespace CS

