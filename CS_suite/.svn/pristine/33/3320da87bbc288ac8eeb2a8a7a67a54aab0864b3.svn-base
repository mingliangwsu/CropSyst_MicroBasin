#ifndef CS_argumentsH
#define CS_argumentsH
#include "corn/OS/directory_entry_name_concrete.h"
#include "corn/OS/file_system_logical.h"
#include "corn/data_source/vv_datasrc.h"
#include "cs_scenario.h"
#include "CS_suite/simulation/CS_identification.h"
#include "corn/application/arguments.h"
namespace CS
{
//______________________________________________________________________________
class Arguments
: public extends_ CORN::Arguments // 160825 Command_options_data_source
{
/*160825 moved to CORN::Arguments
 public:
   bool verbose;                                                                 //160311
*/
 protected:
   modifiable_ CS::Identification   &ID;
      // ref to Simulation_control::ID
   //moved to Command_options_data_source contribute_ bool arg_recognized[1000]; // Arbitrary array size
 protected: // Canonical directories and filenames
   provided_ CORN::OS::Directory_name_concrete *scenario_directory_name;
   provided_ CORN::OS::File_name_concrete      *scenario_file_name;
 public:
   Arguments
      (modifiable_ CS::Identification   &ID_
      );
   virtual ~Arguments();
 public: // Command_options_data_source implementations

 public:
   virtual const CORN::OS::Directory_name &provide_scenario_directory_name()     provision_;
   virtual const CORN::OS::File_name      &provide_scenario_file_name()          provision_;
   virtual bool invalidate_scenario_directory()                    modification_;//160114
   bool is_scenario_file_named_or_found()                           affirmation_;
   const CS::Identification &ref_ID()                                      const;//151028
 private:
   virtual const char    *get_scenario_filename_extension_cstr()           const { return 0; }
   virtual const wchar_t *get_scenario_filename_extension_wstr()           const { return 0; }
 protected:
   virtual bool recognize(const std::string &paramstring)          modification_;
};
//_2015-04-15_____________________________________________class_CS::Arguments__/
} // namespace CS
#endif

