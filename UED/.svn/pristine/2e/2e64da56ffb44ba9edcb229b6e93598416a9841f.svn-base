#ifndef controlsH
#define controlsH
#include "UED/library/record.h"
#include "UED/library/UED_types.h"
namespace UED {
//______________________________________________________________________________
class Text_record : public Record_base
{  // This class serves as a base record for commentary data
 public:
   std::string text;        // as of 040924 this may be SDF format
 public: // constructors
   inline Text_record
      (CORN::Record_code rec_type_code
      ,const char *_text)                                                        //070420
      : Record_base(rec_type_code)
      , text(_text ? _text : "")
      {}
   inline Text_record(const Text_record &from_copy)                              //050126
      : Record_base(from_copy)
      , text(from_copy.text)
      {} // copy constructor
   virtual Text_record* clone()                                            const //140116
      { return new Text_record(*this); }
 public:  // UED record base overrides
   inline virtual nat32 compute_record_body_size()                         const { return text.length()+1;}
      // Returns the size of the record body (not including the header).
   virtual bool read_body(CORN::Binary_file_interface &parent_database);         //971103
   virtual void write_body(CORN::Binary_file_interface &parent_database);        //971103
 public: // Accessors
   inline const std::string &get_text()                                    const { return  text; }
};
//_1997-12-08___________________________________________________________________
class General_comment_record : public Text_record
{public:
   inline General_comment_record
      (const char *_general_comment = 0)
      : Text_record((CORN::Record_code)(UED_general_comment),_general_comment)
      {}
 public:
   inline const std::string &get_general_comment()                         const { return get_text(); }
};
//_1997-12-08___________________________________________________________________
class Period_record : public Text_record
{   // The text of the text record specifies a description of the period
 public:
    nat32 options; // bitmask identifies following optional record information
                                 // bit
   CORN::Datetime64  start_date_time;  //  0-1 Can be used to associate the comment with a particular date/time (stored as Datetime64)
                                 //  0 set indicates time is significant
                                 //  1 set indicates date is significant
   CORN::Datetime64  end_date_time;    //  2-3 Indicates this record defines a period. date_time (if present) is the start of the period
                                 //  2 set indicates time is significant
                                 //  3 set indicates date is significant
   nat32      application_code;  //  4 Specific applications can use this to store specific information between models or utilities
   nat32      enumeration;       //  5 This can be used to store an enumeration (I.e. a number representing the period type).
   nat32      index;             //  6 An application can use this number to represent the periods's index (I.e. a cross reference associated with some other output)
      // For crop periods this is the Crop's sowing date
      // Used by REACCH and OFoot where UED's are aggregate.

   nat32      variable_code;     //  7 An associated variable code (CropSyst uses this to indicate text variables (Crop Name, and growth stage)
 public:  // constructors
   Period_record
      (const char       *_description
      ,nat32             _options = 0
      ,CORN::Datetime64  _start_date_time = 0
      ,CORN::Datetime64  _end_date_time = 0
      ,nat32             _application_code =0
      ,nat32             _enumeration =0
      ,nat32             _index = 0
      ,UED_variable_code _variable_code = 0);
   Period_record(const Period_record &from_copy); // copy constructor
   virtual Period_record* clone()                                          const //140116
      { return new Period_record(*this); }
 public:
   virtual nat32 compute_record_body_size()                                const;
//             Returns the size of the record body (not including the header).
   virtual bool read_body(CORN::Binary_file_interface &parent_database);         //971103
   virtual void write_body(CORN::Binary_file_interface &parent_database);        //971103
#ifdef UED_DUMP
   void dump(std::ostream &txt_strm);
#endif
};
//_2004-09-23___________________________________________________________________
class Generating_application_record : public Text_record
{
   nat16 version;
 public:  // constructor
   inline Generating_application_record                                          //070420
      (nat16 _version = 0                                                        //990107
      ,const char *_application_name = 0)
      : Text_record((CORN::Record_code)(UED_generating_application),_application_name)   //990107
      , version(_version)
      {}
   inline virtual Generating_application_record* clone()                   const //140116
      {  return new Generating_application_record(*this); }
 public:  // UED record base overrides
   inline virtual nat32 compute_record_body_size()                         const {return Text_record::compute_record_body_size() + sizeof(nat16);};
      // Returns the size of the record body (not including the header).
   virtual bool read_body(CORN::Binary_file_interface  &parent_database);
   virtual void write_body(CORN::Binary_file_interface  &parent_database);
 public: // data accessors                                            //991209
   inline nat16 get_version()                                              const { return version;}
   /*140105
   inline nat16 get_major_revision()                                       const { return (nat16)((version & (nat16)0xFF00) >> 8);};
   inline nat16 get_minor_revision()                                       const { return version & (nat16)0X00FF;};
   */
   inline nat16 get_major()                                                const { return (nat16)((version & (nat16)0xF00) >>16);}
   inline nat16 get_release()                                              const { return (nat16)((version & (nat16)0X0F0) >> 8);}
   inline nat16 get_minor()                                                const { return (nat16)((version & (nat16)0X00F));}
   inline const std::string &get_description()                             const { return get_text(); }
};
//______________________________________________________________________________
class Database_description_record : public Text_record
{public: // constrctor
   inline Database_description_record                                            //990107
      (const char *_description = 0)                                            //070420
      : Text_record((CORN::Record_code)(UED_database_description),_description)
      {};
 public:
   inline const std::string &get_database_description()                    const { return get_text(); }
};
//_1997-12-08___________________________________________________________________
class Free_space_record : public Text_record
{ // Usually a block of deleted data created automatically when
  // records are deleted but there may be some situations where
  // is may be desirable to reserve a record block for future use.
 public: // constructor
   inline Free_space_record
      (nat32 reserve_size)
      : Text_record((CORN::Record_code)(UED_free_space),std::string(' ',reserve_size).c_str()) //070420
      {}
};
//_1997-12-08___________________________________________________________________
} // namespace UED
#endif
//controls.h

