#include"corn/datetime/date.hpp"
#include "UED/library/timeqry.h"
namespace UED {
///////////////////////////////////////////////////////////////////////////////
bool Time_query::match(Datetime64 match_date) // cannot be const
{  bool result = false;
   Datetime64 target_date_time = get_target_datetime64();                        //050718
   int match_target_comparison =
        (match_date > target_date_time)
      ? 1
      : (match_date < target_date_time)
         ? -1 : 0;
   switch (query_mode)
   {  case at        : result = match_target_comparison == 0; break;
      case after     : result = match_target_comparison > 0;  break;
      case before    : result = match_target_comparison < 0;  break;
      case between   : result = (match_date >= low_date_time) && (match_date <= high_date_time); break;
      // between is inclusive
      case all       : result = true; break;
   }
   return result;
}
//______________________________________________________________________________
bool  Time_query::match_range
(Datetime64 match_low_date
,Datetime64 match_high_date)
{  return (match(match_low_date) && match(match_high_date));
}
//______________________________________________________________________________
bool Time_search::match(Datetime64 match_date)
{  bool query_matches = Time_query::match(match_date);
   bool search_matches = false;
   switch (search_mode)
   {case earliest :
         if (match_date <= low_date_time)
         {  low_date_time = match_date;                                          //030714
            search_matches = true;
         }
    break;
    case latest :
         if (match_date >= high_date_time)
         {  high_date_time = match_date;                                         //030714
            search_matches = true;
         }
    break;
    case closest:
    { if (match_date >= low_date_time)                                           //030714
         {  low_date_time = match_date;
            search_matches = true;
         }
      if (match_date <= high_date_time)
         {  high_date_time = match_date;
            search_matches = true;
         }
    } break;
   }
   return query_matches && search_matches;
}
//______________________________________________________________________________
#if (CROPSYST_VERSION==3)
// 030714 This is used only in CropSyst Version 3
void Time_query::set_year(int16 new_year)
{
   target_date_time.set_year(new_year);
   low_date_time.set_year(new_year);
   high_date_time.set_year(new_year);
}
//_2003-07-14___________________________________________________________________
#endif
//______________________________________________________________________________
//             Constructor for at, after, before
Time_query_single_date::Time_query_single_date
(Datetime64       i_target_date_time
,UED_units_code   i_time_step
,query_modes      i_query_mode)
:Time_query(i_target_date_time,0,0,i_time_step,i_query_mode)
{  if (i_query_mode == Time_query::at)
   {  low_date_time  = i_target_date_time;
      high_date_time = i_target_date_time;
   }
}
//_2004-02-02_______________________________Time_query_single_date constructor_/
//             Constructor for month
Time_query_month::Time_query_month
(Year    target_year
,Month   target_month
,query_modes      i_query_mode)
:Time_query(CORN::Date((const CORN::Year)target_year,(const CORN::Month)target_month,(const CORN::DOM)1).get_datetime64(),0,0,UT_month,i_query_mode)
{  if (i_query_mode == Time_query::at)
   {  low_date_time  = get_datetime64();
      high_date_time = get_datetime64();
   }
}
//_2009-03-03_____________________________________Time_query_month_constructor_/
bool Time_query::offset_year(int16 by_years)
{  float64 years_by = by_years * 1000.0;
   low_date_time += years_by;
   high_date_time += years_by;
   inc_year(by_years);
   return true;
}
//_2014-10-31__________________________________________________________________/

} // namespace UED


