#include "collate_engine.h"
#include "corn/OS/file_system_engine.h"
#include "corn/container/text_list.h"
#include "corn/container/unilist.h"
#include "corn/data_source/vv_file.h"
#include "UED/library/database_file.h"
#include "UED/library/variable_format.h"
#include "UED/library/timeqry.h"
#include "UED/library/controls.h"
#include "UED/convert/ED_tabular_format.h"
#include "UED/convert/text_dBase_Excel_with_TDF/export_column.h"
#include <iomanip>
#include "CropSyst/source/csvc.h"

namespace UED
{
//______________________________________________________________________________
Collate_engine::Collate_engine
(int argc_, const char *argv_[]
,const CORN::OS::Directory_name  &work_directory_
,const CORN::Text_list           &UED_names_
,const CORN::Text_list           &level_captions_
,const CORN::Seclusion           &exclude_directories_                           //161201
)
: work_directory     (work_directory_)
, UED_names          (UED_names_)
, level_captions     (level_captions_)
, exclude_directories(exclude_directories_)                                      //160526
, argc(argc_)
, argv(argv_)
{}
//______________________________________________________________________________
bool Collate_engine::process()
{
/*1060606
   if (TDF_filename)
   {  CORN::VV_File TDF_file(TDF_filename->c_str());
      TDF_file.get(tabular_format);
   }
*/

   std::string UED_names_buffer;UED_names.string_items(UED_names_buffer,' ');
   std::clog <<  "collate output:"<< UED_names_buffer<< std::endl;
   std::string level_captions_buffer;level_captions.string_items(level_captions_buffer,' ') ;
   std::clog << "levels=" << level_captions_buffer << std::endl;
   nat32 total_detail_lines = 0;
   FOR_EACH_IN(UED_name, CORN::Text_list::Item, UED_names, each_UED )
   {
      std::clog << "collating:" <<  (*UED_name) << std::endl;
      total_detail_lines += process_UED(*UED_name);
   } FOR_EACH_END(each_UED)
   return total_detail_lines > 0;
}
//_2014-09-03___________________________________________________________________
nat32 Collate_engine::process_UED(const std::string &UED_name)
{
   Output_collator collator
      (argc,argv
      ,UED_name
      ,level_captions
      ,exclude_directories);                                                     //160526
   // The variable definition array is instanciated here because it needs
   // to be the same for each set of UED files processed.
   collator.initialize();

   CORN::Text_list parent_level_names;
   nat32 UED_detail_lines = collator.collate_level
      (work_directory,0,parent_level_names,true);
   //160606 if (!TDF_filename)
   if (!CORN::OS::file_system_engine.exists(collator.parameters.format_filename)) //160606
   {  // No TDF file was specified on the command line
      // so by default the default format (R) is used
      // and columns are derived from variables available in the
      // UED file.
      // We write out the format created and used to the CWD
      // so the user can identify the columns and units.
      CORN::OS::Directory_name_concrete CWD;
      CORN::OS::File_name_concrete TDF_filename_generated(CWD,UED_name,L"TDF");
      CORN::VV_File TDF_file(TDF_filename_generated.c_str());
      collator.format.columns_1based.set_write_delimiter(0);                     //160601
      TDF_file.set(collator.format);                                             //161201
   }
   return UED_detail_lines;
}
//_2014-10-17___________________________________________________________________
Collate_engine::Output_collator::Output_collator
(int argc_, const char *argv_[]
,const std::string                        &UED_name_
,const CORN::Text_list                    &level_captions_
//160606 ,const CORN::Common_tabular_file_format   &tabular_format_
//161201,const CORN::Text_list                    &exclude_directories_
,const CORN::Seclusion                    &exclude_directories_                  //161201
)                 //160526
: Text_dBase_Excel_with_TDF_convertor(argc_,argv_)
, UED_name(UED_name_)
//, variable_definition will be cleared on first invocation of get_variable_definitions;
, variable_definition_count(0)
, columns_identified       (false)
, CS_suite_output_UED_file_type (unknown_aggregation)
, level_captions           (level_captions_) // derived from the directory heirarchy
, leaf_level_names         (0)                                                   //141014
, exclude_directories      (exclude_directories_)
//, in_output_directory      (false)
//, tabular_format           (_tabular_format)
{
   if (UED_name_ == "annual_aggr") CS_suite_output_UED_file_type = annual_aggr_aggregation;
   if (UED_name_ == "annual") CS_suite_output_UED_file_type = annual_aggregation;
   if ((UED_name_ == "season") // V4
     ||(UED_name_ == "seasonal")) // V5                                          //170314
      CS_suite_output_UED_file_type = season_aggregation;
   if (UED_name_ == "harvest")CS_suite_output_UED_file_type = harvest_aggregation;
   if ((UED_name_ == "daily")  // V4
     ||(UED_name_ == "journal")) // V5                                           //170314
      CS_suite_output_UED_file_type = daily_aggregation;
   /*160606 convertor should already have the format
   format.copy_from(tabular_format_);
   */

   verbose_log = false; // Otherwise we print several lines for each leaf level

   parameters.operation = "export";                                              //160606
   import_mode = false; // The collator is essentially a UED exporter            //160606
   setup_from_command_line(argc_,argv_);                                         //160606
      // Probably should move this out of constructor

//verbose_log=true; // only for debugging

}
//_2014-09-08___________________________________________________________________
bool Collate_engine::Output_collator::initialize()               initialization_
{
   format.default_R_text();
   // moved to point after format is known when no TDF initialize_export();
//   tabular_file = provide_tabular_file(file_year);
   return true;
}
//_2016-06-06__________________________________________________________________/
nat32 Collate_engine::Output_collator::collate_level
(const CORN::OS::Directory_name  &level_directory
,nat8                             level_index
,CORN::Text_list                 &parent_level_names
,bool                             work_directory)
{
//std::clog << "Level directory:" << level_directory << std::endl;
   bool in_output_directory = (level_directory.get_name() == L"Output");


   nat32 detail_lines = 0;
   Year file_year = 0;   // Currently there is no year separation
   tabular_file = provide_tabular_file(file_year);
   if (!tabular_file) return 0; // Probably unable to determine the desired targe file type  //070307

   if (!work_directory && !in_output_directory)
   {
      std::wstring level_name;
      //160526 CORN::append_wstring_to_string(level_directory.get_name(),level_name);
      level_directory.get_name_with_extension(level_name);                       //160526
      parent_level_names.add_wstring(level_name);
   }
   std::string names_buffer;
//debug   std::clog << parent_level_names.string_items(names_buffer, ' ') << std::endl;
   // parent_level_names.write(std::clog); std::clog << std::endl;


   leaf_level_names = &parent_level_names;                                       //141014
   CORN::OS::File_name_concrete UED_filename(level_directory,UED_name,"UED");
   if (CORN::OS::file_system_engine.exists(UED_filename))                        //160306
   {
      std::clog << "UED file:" << UED_filename.c_str() << std::endl;
      UED_file = new UED::Database_file_indexed(UED_filename.c_str(),std::ios::in,false);
      if (! columns_identified)
      {
         columns_identified = identify_columns(level_index);                     //141013
      }
      initialize_export();                                                       //160615
      detail_lines += export_opened_UED_file();
      delete UED_file; UED_file = 0;
      leaf_level_names = 0;                                                      //141014
   } else
   {
      CORN::Unidirectional_list subdirs; //fully qualified directory names
      nat32 subdir_count = CORN::OS::file_system_engine.list_DENs
         (level_directory
         ,0,&subdirs                                                             //161201
         ,exclude_directories                                                    //161201
         ,CORN::OS::File_system::none_recursion_inclusive);
      /*161201
      nat32 subdir_count = CORN::OS::file_system_engine.list_directory_names
         (level_directory
         ,subdirs
         ,CORN::OS::File_system::none_recursion_inclusive
         ,0
         ,0
         ,&exclude_directories
         );
      */
      if (subdir_count)
      {
         leaf_level_names = 0;                                                      //141014
         FOR_EACH_IN(subdir,CORN::OS::Directory_entry_name,subdirs,each_subdir)
         {
//            if (subdir != L"Output")                                             //160601

//std::clog << "level:" << (int)level_index << std::endl;
if (in_output_directory)
std::clog << "outdir" << std::endl;

            {
               detail_lines += collate_level(*subdir,
                  level_index + !in_output_directory // 160601  1
                  ,parent_level_names,false);
            }
         }
         FOR_EACH_END(each_subdir)
      } // else do nothing we are done with this directory
   }

   /* For REACCH, the cell directory may have single aggregated UED file
      so, when processing annual_aggr.UED found the target UED file
      and dont descend into the  the cycle directory
   CORN::Unidirectional_list subdirs; //fully qualified directory names
   nat32 subdir_count = CORN::OS::file_system_engine.list_directory_names
      (level_directory
      ,subdirs
      ,CORN::OS::File_system::none_recursion_inclusive
      ,CORN::OS::Directory_entry_name::full_qualification);
   if (subdir_count)
   {
      leaf_level_names = 0;                                                      //141014
      FOR_EACH_IN(subdir,CORN::OS::Directory_entry_name,subdirs,each_subdir)
         detail_lines += collate_level(*subdir,level_index+1,parent_level_names,false);
      FOR_EACH_END(each_subdir)
   } else
   {
      leaf_level_names = &parent_level_names;                                    //141014
      CORN::OS::File_name_concrete UED_filename(level_directory,UED_name,"UED");
      std::clog << "UED file:" << UED_filename.c_str() << std::endl;
      //UED::Database_file UED_file(UED_filename.c_str(),std::ios::in,false);
      UED_file = new UED::Database_file_indexed(UED_filename.c_str(),std::ios::in,false);
      if (! columns_identified)
      {
         columns_identified = identify_columns(level_index);                     //141013
         initialize_export();                                                    //141017
      }
      //151125 ued_file_to_export = UED_file;   // actually just used UED_file
      detail_lines += export_opened_UED_file();
      delete UED_file; UED_file = 0;
      leaf_level_names = 0;                                                      //141014
   }
   */
   if (!in_output_directory)                                                     //160602
      parent_level_names.pop_at_tail();
   return detail_lines;
}
//_2014-09-03___________________________________________________________________
bool Collate_engine::Output_collator::identify_columns(nat8 level_index)
{
   bool annual_mode = (CS_suite_output_UED_file_type == annual_aggregation)
      || (CS_suite_output_UED_file_type == annual_aggr_aggregation);

      std::clog << "Identifying columns" << std::endl;
   bool add_level_column_header_to_format = false;
      if (format.columns_1based.count())
      {  // The TDF file was specified and it has identified the columns
         // and variables to be included.
         // The TDF file is optional, if not specified,
         // the columns will be ordered as the variable definitions
         // (which there should now be) appear in the UED file.

         //Shouldn't need to compose variable definition array from format.columns
         //because all we need to read the UED file is the (desired) variable codes.
      } else
      {
         add_level_column_header_to_format = true;
         // Column
         if (annual_mode)                                                       //141120
         {
         ED_tabular_file_format::Column *date_column = new
               ED_tabular_file_format::Column() ;

         date_column->record_date = true ;
         date_column->units                 = annual_mode ? UT_year : UT_date;
         date_column->date_time_format      = annual_mode ? "YYYY"  : "YYYY-MM-DD";
         date_column->caption               = annual_mode ? "year"  : "YYYY-MM-DD";
         date_column->field_width           = 10;
         date_column->data_type_labeled.set(annual_mode ? DT_int16 : DT_float32 ); // In because years can be negative
         //NA date_column->name_long
         //NA date_column->name_short
         //NA date_column->name_subsection
         //NA date_column->precision
         //NA date_column->period
         //NA date_column->sheet
         //NA date_column->smart_record_type
         //NA date_column->smart_variable_code.code

         format.columns_1based.append(date_column);
         }
         else                                                                    //141201
         {
            ED_tabular_file_format::Column *crop_name_column = new
               ED_tabular_file_format::Column() ;
            crop_name_column->record_date = false ;
            // NA crop_name_column->units
            // NA crop_name_column->date_time_format
            crop_name_column->caption               = "crop";
            crop_name_column->field_width           = 50;
            crop_name_column->data_type_labeled.set(DT_string); // In because years can be negative
            crop_name_column->name_long= "crop";
            crop_name_column->name_short= "crop";
            //NA crop_name_column->name_subsection
            //NA crop_name_column->precision
            //NA crop_name_column->period
            //NA crop_name_column->sheet
            //NA crop_name_column->smart_record_type
            crop_name_column->smart_variable_code.set(CSVC_crop_base_name);
            format.columns_1based.append(crop_name_column);
         }
         //const Variable_format_0 *VD = UED_file->get_variable_definition(0);

         nat32 defined_variable_codes[varible_definition_ALLOC_arbitrary];

         variable_definition_count = UED_file->get_defined_variables_codes
            (defined_variable_codes,(nat16)varible_definition_ALLOC_arbitrary);
         std::clog << "variable count = " << variable_definition_count << std::endl;

         switch (CS_suite_output_UED_file_type)
         {  case annual_aggr_aggregation: case annual_aggregation : case season_aggregation : case daily_aggregation :
            {  for (nat16 vd = 0; vd <variable_definition_count; vd++)
               {
                  const Variable_format_abstract *variable_definition //161201 Variable_format_0
                      = UED_file->get_variable_definition(defined_variable_codes[vd]);
                  std::clog << variable_definition->ref_description() //161201 description
                  //  /*<< " (" << variable_definition->abbreviation << ")" */
                     << std::endl;
                  ED_tabular_file_format::Column *column = new
                     ED_tabular_file_format::Column() ;
                  column->caption            = variable_definition->ref_description(); //161201 description;
                  column->data_type_labeled  = DT_float32; // UED uses 32 (or 16) bit float.
                  // column->description_URL  eventually will have a complete ontology (for CropSyst output variables)
                  column->field_width        = 30; // will not generally be used for most free form target formats
                  column->name_long          = variable_definition->ref_description(); //161201 description;
                  column->name_short         = variable_definition->ref_description(); //161201 abbreviation;
                  //161201 column->name_short         = variable_definition->abbreviation;
                  //column->name_subsection    =  not needed for simple 2D table.
                  column->precision          = 6; // approximate precision of 32bit floats
                  // column->period not applicable (-1)

                  column->record_date        = false;
                  //column->sheet               currently only exporting a simple 2D table.
                  //column->smart_record_type only used with importing to UED
                  column->smart_variable_code.set(variable_definition->code_clad.get());
                  column->units.set(variable_definition->preferred_units_clad/*161201 preferred_units_code_clad*/.get());
                  // column->date_time_format   =  NA because use for dates
                  // column->units_caption Not needed because we get the units from UED record and they would likely be standard

                  format.columns_1based.append(column);
               }
            } break;

            case harvest_aggregation :
            {
               {
               ED_tabular_file_format::Column *variable_column = new
                  ED_tabular_file_format::Column();
               variable_column->caption  = "variable";
               variable_column->data_type_labeled = DT_string;
               variable_column->field_width = 100;
               // This is currently arbitrary,
               // because this is intended to be free form tab or space delimited;
               // but the TDF file could specify a "variable" column format
               format.columns_1based.append(variable_column);
               }
               {
               ED_tabular_file_format::Column *value_column = new
                  ED_tabular_file_format::Column();
               value_column->caption  = "variable";
               value_column->data_type_labeled = DT_string;
               value_column->field_width = 100;
               // This is currently arbitrary,
               // because this is intended to be free form tab or space delimited;
               // but the TDF file could specify a "variable" column format
               format.columns_1based.append(value_column);
               }
             }break;
         }
      }


   if (add_level_column_header_to_format)
   { // If we dont have predefined format, then add the caption column headers
      for (nat8 il = 0; il < level_index; il++)
      {
         ED_tabular_file_format::Column *column = new
               ED_tabular_file_format::Column               () ;
            /*
            column->caption            = "level_";
            CORN::append_int8_to_string(il,column->caption,10);
            */
            const CORN::Text_list::Item *level_caption = dynamic_cast<const CORN::Text_list::Item *>(level_captions.get_at(il));
            std::string caption_text;
            if (level_caption)
            {
               caption_text.assign(level_caption->c_str());
            } else
            {
/*160601                if (!output_directory_is_leaf)
                  // For CropSyst proper, the UED files will be in Output directory
                  // This is not considered a 'level'
               {
                  caption_text.assign("???");
                  std::clog << "The number of captions specified does not match the number of directory levels.  More captions are expected on the command line." << std::endl;
                  std::clog << "Directory:" << std::endl;
                  const_cast<CORN::Text_list &>(level_captions).write(std::clog);
                  std::clog << std::endl;
                  std::clog << "leaf level names:" << std::endl;
                  if (leaf_level_names)
                     const_cast<CORN::Text_list &>(*leaf_level_names).write(std::clog);
                  else std::clog << "No leaf level names" << std::endl;
                  std::clog << std::endl;
               }
*/
            }
            column->caption = caption_text;
            column->data_type_labeled  = DT_string; // UED uses 32 (or 16) bit float.
            // column->description_URL  eventually will have a complete ontology (for CropSyst output variables)
            column->field_width        = 12;
            column->record_date        = false;
            format.columns_1based.append(column);

      }
   }
   return true;
}
//_2014-09-08___________________________________________________________________
bool Collate_engine::Output_collator::transfer_tuple_column
      (// Delineated_data_record &to_data_rec,
       CORN::Date_time_64 &tuple_date_time
      , float32 value
      , nat16 export_column_number
      , Export_column  *export_column)
{
   bool transferred = (export_column->TC_layout.data_type_labeled.get() == DT_string);

//std::clog << "/" << export_column->TC_layout.name_long << "\\ " << std::endl;

   if (transferred) // So far this column appears could be a directory (scenario) level
   {  transferred = false; // now see if this column is level
         if (export_column->TFFC_layout.smart_variable_code.get() == CSVC_crop_base_name)
         {
            const UED::Period_record *growing_season = UED_file->get_period
               (

                  // UED_period_start_date_time_option
                  UED_period_end_date_time_option
                 |UED_period_application_code_option
                 |UED_period_variable_code_option
               //|UED_period_enumeration_option
               //|UED_period_index_option
               ,tuple_date_time.get_datetime64() // at_date
               ,1 // GROWING_SEASON_PERIOD // _application_code  (1)
               ,0 //_enumeration
               ,0 // _index           0X1EE665
               ,CSVC_crop_base_name);

            if (growing_season)
            {
               export_column->value_string.assign(growing_season->get_text());
            }
            else
            {
               export_column->value_string.assign("Unknown");
            }
            transferred = true;
         }

      if (!transferred)                                                          //141201
      {
      nat8 level_i = 0;
      FIND_FOR_EACH_IN(found_level_caption,level_caption,CORN::Text_list::Item,level_captions,true,each_level)
      {
         if ((*level_caption) == export_column->TC_layout.caption)
         {
            found_level_caption = level_caption;
            //const char *delimitor = export_column_number ? format.detail_lines_delineation.get_delimitor() : "";  // Don't prepend delimitor for column 0   //050902
            const CORN::Text_list::Item *level_name = dynamic_cast<const CORN::Text_list::Item *>(leaf_level_names->get_at(level_i));
            if (level_name)
               export_column->value_string.assign(*level_name);
/*check needed
            else
               assert(false);
*/
            transferred = true;
         }
         level_i ++;
      } FOR_EACH_END(each_level)
      }
   }
   if (!transferred)
      transferred = Tabular_file_with_TDF_convertor::transfer_tuple_column(tuple_date_time,value,export_column_number,export_column);
   return transferred;
}
//_2014-10-16___________________________________________________________________
} // namespace UED

