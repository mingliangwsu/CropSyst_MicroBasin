#ifndef Geolocation_itemH
#define Geolocation_itemH
#include "geodesy/geolocation.h"
#include "corn/container/association.h"
//______________________________________________________________________________
class Geolocation_item
: public implements_ CORN::Association
, public extends_ Geolocation
{
public:
   Geolocation_item();                                                           //130529
   inline Geolocation_item(const Geolocation &copy_from)
      : CORN::Association()
      , Geolocation(copy_from)
      {}
   inline virtual const char *get_key() const {return station_ID_code.c_str();}
   //170423 virtual const char *label_cstr(char *buffer) const;
   virtual const char *label_string(std::string &buffer)                  const; //170423
};
//______________________________________________________________________________
class Geocoordinate_item
: public implements_ CORN::Association
, public extends_ Geocoordinate
{
   //170423 contribute_ char key[50]; // this is only temporary until I replace container get_key to take the buffer
   contribute_ std::string key; // this is only temporary until I replace container get_key to take the buffer
public:
   Geocoordinate_item();                                                         //130529
   inline Geocoordinate_item(const Geocoordinate &copy_from)
      : CORN::Association()
      , Geocoordinate(copy_from)
      {}
   virtual const char *get_key()                                          const;
   //170423 virtual const char *label_cstr(char *buffer)       const;
   virtual const char *label_string(std::string &buffer)                  const; //170423
   virtual int compare(const CORN::Item &other_item)                      const;
   // decided not to do this inline virtual bool is_applicable()            affirmation_ { return true; } //170612
};
//_2014-01-24____________________________________________________________________

#endif
