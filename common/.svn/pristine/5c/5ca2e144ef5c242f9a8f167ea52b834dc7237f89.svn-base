#ifndef geocoordinatesH
#define geocoordinatesH

#include "corn/application/arguments.h"
#include "corn/container/unilist.h"
#include "corn/OS/directory_entry_name_concrete.h"
#include "common/geodesy/geocoordinate.h"
#include "common/geodesy/geolocation_item.h"
#include "corn/data_source/dbase_datasrc.h"
namespace CS
{
//______________________________________________________________________________

class Geocoordinates
: public extends_ CORN::Unidirectional_list  // of Geocooridinate (Geocooridinate_item)
{
 public:
   class Arguments
      : public extends_ CORN::Arguments
      {
       public:
          CORN::OS::File_name *geocoordinates_filename; // Could be DBF or DAT
          Geocoordinate corner1;
          Geocoordinate corner2;
          float32       length_km;
          bool          centroid;
       public:
         Arguments();
         virtual ~Arguments();
         virtual bool recognize_DEN
            (const CORN::OS::Directory_entry_name &param_DEN)           modification_;
         virtual bool recognize(const std::string &paramstring)   modification_;
         virtual bool get_end();                                                 //161023
         bool geocoordinates_find(bool must_exist);
         bool geocoordinates_find_file(const char *extension_raw);

      };
   //_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
   class Fields_dBase
   {public:
      CORN::Data_source_dBase::Field_item *geocoordinate_field;// not owned
      CORN::Data_source_dBase::Field_item *latitude;     // not owned
      CORN::Data_source_dBase::Field_item *longitude;    // not owned
      CORN::Data_source_dBase::Field_item *elevation;    // not owned
      Geocoordinate_format geocoordinate_format;                                 //161122
    public:
      Fields_dBase()
         : geocoordinate_field(0)
         , latitude     (0)
         , longitude    (0)
         , elevation    (0)
         , geocoordinate_format()                                                //161122
         {}
      inline virtual ~Fields_dBase() {}
   };
   //_2016-10-16 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 protected:
   const   Arguments &arguments;
   cognate_ bool netCDF_grid_available;
 protected:
    provided_ Fields_dBase *geocoord_fields_dBase;                               //161016
 public:
   inline Geocoordinates(const Arguments &arguments_)
      : CORN::Unidirectional_list(true) // must be unique
      , arguments(arguments_)
      , netCDF_grid_available(false)
      , geocoord_fields_dBase (0)
      {}
   inline ~Geocoordinates() {   delete geocoord_fields_dBase; }

   nat32 load();
      // returns the number of (valid) coordinates loaded
   nat32 load_from_DBF();
   nat32 load_from_text();
   nat32 compose_from_extent();
   inline bool know_netCDF_grid_available(bool is_available)          cognition_
       { netCDF_grid_available = is_available; return is_available; }
   inline bool is_populated()                                       affirmation_
      { return count(); }
   const Geocoordinate *find_nearest
      (const Geocoordinate &point
      ,float32 minimum_inclusion_distance = 0.0
      ,float32 maximum_inclusion_distance = 20100.0)                      const; //170612
      ///< The optional arguments are used to define a range of distances
      /// for considerations;
      ///< minimum_inclusion_distance exclude points near the reference point,
      /// so 0.0 would include the point itself it is listed.
      /// maximum_inclusion_distance excludes points beyond the range of the
      /// reference point the default includes all points on the Earth.
      /// \return Will always find a point, but may return 0
      /// (I.e. if the list is empty)

 protected:
   virtual bool provide_fields_dBase
      (CORN::Data_source_dBase &DBF_file)                            provision_;
   virtual bool setup_DBF_fields(CORN::Data_source_dBase &DBF_file)  provision_;
   virtual bool DBF_has_a_geocoordinate_fields()                   affirmation_; //170510
   virtual bool set_from_record
      (CORN::Generic_data_record &geocoord_rec
      ,Geocoordinate &geocoord);
   virtual Geocoordinate_item *render_geocoordinate()                rendition_;
};
//______________________________________________________________________________
}
#endif
