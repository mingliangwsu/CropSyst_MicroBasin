#include "atmospheric_CO2_change_recalibration.h"
#include <fstream>
#include <string>
#include "corn/math/numerical/interpolate.h"
#include <assert.h>
using namespace CORN;
//______________________________________________________________________________
Atmospheric_CO2_change_recalibration::Atmospheric_CO2_change_recalibration
(
//LML 140915 #if (CS_VERSION == 5)
//   const UED_database_indexed &UED_file_with_annual_CO2_data
//   NYI In version 5 CO2 data will be stored in a UED file.
//LML 140915 #else
   const char *                                                                  //121126
   CO2_recalibration_filename
//LML 140915 #endif
, const CORN::Date &start_date
, const CORN::Date &end_date
, const CORN::Date &_today                                                        //150315
, float32 initial_CO2_conc
, bool &CO2_data_encountered)
: Atmospheric_CO2_change_interface()
//150507 , curr_CO2_conc_ppm(initial_CO2_conc)
, curr_CO2_conc()                                                                //150507
, interpolation(0)
, today(_today)                                                                  //150315
{
   curr_CO2_conc.set_ppm(initial_CO2_conc,CORN::measured_quality);               //150507
      // presuming measured quality
   //caller already checks for exists and if not then recal_file will not be good //120125
   std::ifstream recal_file(CO2_recalibration_filename);
   interpolation = new CORN::Interpolation_curve_dated(linear_curve,(float32)initial_CO2_conc,&start_date);//150326RLN
      //150326 (linear_curve,start_date/*LML 150309 .get_year()*/,initial_CO2_conc);
   int read_year; int doy; std::string code;                                     //120125 char code[100];
   float32 value;                                                                //090709
   while ((! recal_file.eof()) && recal_file.good())
   {  recal_file >> read_year >> doy>> code >>   value;
      Year start_every_year = (read_year == 0) ?start_date.get_year(): read_year;//000504
      Year end_every_year   = (read_year == 0) ?end_date.get_year()  : read_year;//000504
      for (Year  year = start_every_year ; year <= end_every_year ; year++)      //000504
      {  CORN::Date observation_date(year,doy);                                  //000504
         if (code == "CO2")                                                      //000504
         {  CO2_data_encountered = true;                                         //080213
            interpolation->set_by_date(observation_date,value);                  //000504
            if (year == start_date.get_year())                                   //120125
               curr_CO2_conc.set_ppm(value,CORN::measured_quality);              //150507
               //150507 curr_CO2_conc_ppm = value;                                        //120125
   }  }  }
   if (!CO2_data_encountered)                                                    //120125_080212
   {  // The interpolation record is empty, so just delete it                    //080212
         // maybe we will then default to a single constant value                //080212
      delete interpolation;                                                      //080212
      interpolation = 0;                                                         //080212
   }
}
//______________________________________________________________________________
Atmospheric_CO2_change_recalibration:: ~Atmospheric_CO2_change_recalibration()
{  delete interpolation; interpolation  = 0;
}
//______________________________________________________________________________
bool Atmospheric_CO2_change_recalibration::end_year(Year year)     modification_
{  CORN::Date Dec_25(year,365);
   if (interpolation)
      curr_CO2_conc.set_ppm(interpolation->get_ordinate_by_date(Dec_25),CORN::interpolated_quality); //150507
      //150507 conceptual probably should set quality of observation when the point is fixed
      //150507 curr_CO2_conc_ppm = interpolation->get_ordinate_by_date(Dec_25);
   return true;                                                                  //090818
}
//______________________________________________________________________________
bool Atmospheric_CO2_change_recalibration::update()               rectification_
{
   if (interpolation)
      curr_CO2_conc.set_ppm(interpolation->get_ordinate_by_date(today),CORN::interpolated_quality); //150507
      //150507 conceptual probably should set quality of observation when the point is fixed
      //150507 curr_CO2_conc_ppm = interpolation->get_ordinate_by_date(today);
   return true;
 }
//_2015-03-15___________________________________________________________________
