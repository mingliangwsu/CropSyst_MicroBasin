#ifndef ET_reference_FAOH
#define ET_reference_FAOH

//100330 This code is very specific to CropSyst
// A more general form of the Penman-Monteith FAO implementation is in ET_reference.cpp

#ifndef ET_reference_interfaceH
#include "biometeorology/ET_reference_interface.h"
#endif
#ifndef ET_commonH
#  include "biometeorology/ET_common.h"
#endif

#ifndef UED_CODES_H
#  include "UED/library/codes.h"
#endif
#ifndef measuresH
#  include "corn/measure/measures.h"
#endif
#ifndef ET_modelH
#  include "biometeorology/ET_model.h"
#endif
#ifndef WC_vapor_pressure_saturation_slopeH
#  include "weather/parameter/WC_vapor_pressure_saturation_slope.h"
#endif
#ifndef WC_psychrometric_constH
#  include "weather/parameter/WC_psychrometric_const.h"
#endif
#ifndef WP_latent_heat_vaporizationH
#  include "weather/parameter/WP_latent_heat_vaporization.h"
#endif
#include "biometeorology/aerodynamics.h"
#include "biometeorology/parameter/slope_SVP_curve_psychrometric_resistance.h"
#include "common/geodesy/geocoordinate.h"

class Weather_provider;
class Weather;
//______________________________________________________________________________
class ET_Reference_FAO         // 100330 need to rename to ET_Reference_FAO  was  Reference_ET_FAO
: public ET_common
, public ET_reference_interface                                                  //090929
{protected:
   const Weather_provider &weather_provider;                                     //150804
//NYN const  Aerodynamics &aerodynamics;
 public:
#ifdef LOC_ONLY_FOR_GEN
 protected: // parameters for Hargreaves sp?
   float64 ET_slope;       // default should be 1                                //070314
   float64 ET_intercept;   // default should be 0                                //070314
#endif
 protected:
    ET_Model  enabled_model;
    float64   ET_ref_mm[ET_Model_COUNT];
    CORN::Quality_code ET_ref_quality[ET_Model_COUNT];                           //150122
    float64 saturation_vapor_pressure_deficit; // kPa
 protected: // Current values used in more than one of the ET models.
    float64 curr_avg_air_temperature;         // degrees C
    float64 curr_soil_heat_flux_density;      // MJ/(m2 day)
    float64 curr_net_radiation;               // MJ/(m2 day) at crop surface
//160731 moved to ET_common    float64 curr_aerodynamic_resistance_d_m;                                     //150601_011119
 public:
   ET_Reference_FAO
      (const Weather_provider &_weather_provider                                 //150804
      ,const Geocoordinate &geocoordinate_                                       //151118
      ,const float64                               &_day_length_hours_today      //150627
//NYN      , Aerodynamics &_aerodynamics                                              //150601
#ifdef LOC_ONLY_FOR_GEN
      ,float64 _ET_slope                                                         //070314
      ,float64 _ET_intercept                                                     //070314
#endif
      ,ET_Model preferred_ET_model);   // Not currently used
   virtual void update();
/*151104 Now all CO2 adjustments are handled by the crop itself
   inline float64 set_reference_canopy_resistance(float64 _reference_canopy_resistance_d_m)  //011107
      { return reference_canopy_resistance_d_m = _reference_canopy_resistance_d_m; }
*/
   inline virtual float64 get_m (ET_Model preferred_ET_model) const { return mm_to_m(ET_ref_mm[preferred_ET_model]);} //140306
   inline virtual float64 get_mm(ET_Model preferred_ET_model) const { return         ET_ref_mm[preferred_ET_model]; } //140306
   inline virtual float64 ref_applicable_mm() const { return ET_ref_mm[0]; }
   inline virtual CORN::Quality_code get_reference_ET_quality(ET_Model  preferred_ET_model)
      { return ET_ref_quality[preferred_ET_model]; }                             //150122
   inline virtual float64 get_saturation_vapor_pressure_deficit()
      { return saturation_vapor_pressure_deficit; }
   inline virtual const Vapor_pressure_saturation_slope &ref_vapor_pressure_saturation_slope()  { return vapor_pressure_saturation_slope; }  //140507
   inline virtual const Psychrometric_constant          &ref_psychrometric_constant()           { return psychrometric_constant; }           //140508
//moved to ET common   inline virtual const float64                         &ref_aerodynamic_resistance_ref_plants(){ return curr_aerodynamic_resistance_d_m; }  //150601_140508
};
//______________________________________________________________________________
#endif

