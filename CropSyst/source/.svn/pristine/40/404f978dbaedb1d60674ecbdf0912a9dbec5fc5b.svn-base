#  include "options.h"
#  include "static_phrases.h"
#  include "cs_scenario.h"
#  include "cs_scenario_directory.h"
#  include "mgmt_param.h"
#  include "corn/data_source/datasrc.h"
#  include "common/biomatter/decomposition_const.h"
#  include "corn/measure/common_units.h"
#ifndef compareHPP
#  include "corn/math/compare.hpp"
#endif
#  include "corn/OS/file_system_engine.h"
#  define CORN_Directory_entry_name CORN::OS::Directory_entry_name
#include "corn/data_source/vv_file.h"
#include "corn/container/text_list.h"

#include <math.h>
#ifdef LADSS_MODE
#include "LADSS.h"
extern bool LADSS_mode;
class LADSS_CropSyst_Model;
extern LADSS_CropSyst_Model *LADSS_CropSyst_model;
#endif
#define CropSyst_scenario_superclass  CS::Simulation_control
#include "project/GIS/GIS_table.h"
#include <stdio.h>

extern bool prompt_denitrification_params;                                       //151110
   // This is temporary until I put these parameters in the scenario editor.

//______________________________________________________________________________
Label_description cropping_system_mode_label_table[] =
{{"none"                ,"No crop"}
,{"single"              ,"Single crop/season"}
,{"rotation"            ,"Rotation"}
,{"established"         ,"Established orchard/vinard"}
,{0,0}};
//_2005-11-07________________________________cropping_system_mode_label_table__/
namespace CropSyst                                                               //130621
{
//______________________________________________________________________________
Scenario::Scenario
(bool CPF_mode)                                                                  //160222
: CS::Simulation_control(CS_VERSION_NUMBERS)                                     //130621
,soil_filename          ("<Required (This must be selected)>")                   //000211
#if (((CS_VERSION > 0) && (CS_VERSION <= 4)) && !defined(AGMIP))
,location_filename      ("<Required (This must be selected)>")                   //990227
#endif
,weather_filename       ("<Required (This must be selected)>")                   //030206
,rotation_filename      ("<Usually specified (unless always fallow)>")           //010109
,fixed_management_filename    ("<Optional (Currently not selected)>")            //000107
,organic_matter_initial_filename("initial.organic_matter")                       //160315
,recalibration_filename (L"<Optional (Currently not selected).rcl")
   // allows compatibility with previous versions where the recalibration file was the same name as the sim. 010109
,water_table_filename   ("<Optional (Currently not_selected)>")
,cropping_system_mode_labeled(no_cropping_system)                                //051231
,single_sowing_date()                                                            //051231
,single_crop_filename   ("<Required for single crop, orchard or vinard cropping system mode>")     //051231
,single_management_filename("<Optional for single crop, orchard or vinard cropping system mode>")  //051231
#ifdef SOILR
,grass_filename("\\cropsyst\\soilr\\grasses\\grass.crp","crp",translate(L_Grass_file) ,"*.crp")
#endif
,H2O_recalibrate_date  ((Year)0,(CORN::DOY)0,D_MD,D_Mmm,' ')                     //011116
#ifdef NITROGEN
,POM_recalibrate_date  ((Year)0,(CORN::DOY)0,D_MD,D_Mmm,' ')                     //011116
,N_NO3_recalibrate_date((Year)0,(CORN::DOY)0,D_MD,D_Mmm,' ')                     //011116
,N_NH4_recalibrate_date((Year)0,(CORN::DOY)0,D_MD,D_Mmm,' ')                     //011116
,denitrification_parameters()                                                    //150824
#if (CROPSYST_VERSION == 4)
,V3_adjust_mineralize_32(0.8) ,v_V3_adjust_mineralize (V3_adjust_mineralize_32   ,UC_adjustment ,LABEL_adjust_mineralize      ,4,0.8,0.0,10.0,  0.0,100.0  ,TU_0_2,TL_mineralization_rate_adjustment)
,adjust_nitrify_V4_1(0.8)     ,v_adjust_nitrify_V4_1  (adjust_nitrify_V4_1       ,UC_adjustment ,LABEL_adjust_nitrify         ,4,0.8,0.0,10.0,  0.0,100.0  ,TU_0_2,TL_Nitrification_rate_adjustment)
,adjust_denitrify(0.1)        ,v_adjust_denitrify     (adjust_denitrify          ,UC_adjustment ,LABEL_adjust_denitrify       ,4,1.0,0.0,20.0,  0.0,100.0  ,TU_0_2,TL_denitrification_rate_adjustment) //081014
,max_transform_depth_32(0.5)  ,v_max_transform_depth  (max_transform_depth_32    ,UC_meter      ,LABEL_max_transform_depth    ,3,0.5,0.0, 0.5,  0.0,  5.0  ,TU_m,TL_maximum_transformation_depth)
#endif
#endif
#ifdef PHOSPHORUS
,phosphorus_in_profile(0.0), v_phosphorus_in_profile(phosphorus_in_profile,UC_kg_mass,"profile",3,0.0,0.0,300.0,0.0,9999.9,"kg/ha","Total soil profile phosphorus P mass")
#endif
#ifdef CHEM_PROFILE
,initial_chemical_profiles()
#endif
,statsgo_muid("")      // I.e.  WA0001                                           //000116
,statsgo_seqnum(0) ,v_statsgo_seqnum   (statsgo_seqnum,LABEL_seqnum    ,0,1,99,1,9999) // Up to two digits appears to always be 1 indexed.   //000120
,soil_ID_str   ("")                                                              //140214
,loc_ID_str    ("")                                                              //140214
,rot_ID_str    ("")                                                              //140214
,weather_ID_str("")                                                              //140214
#ifdef RESIDUES
,residue_recalibration_date((Year)0,(CORN::DOY)0,D_MD,D_Mmm,' ')                 //160126
,reset_residue_deprecated(false)                                                 //010717
#if (((CROPSYST_VERSION > 0) && (CROPSYST_VERSION <= 4)))
// 070118 becoming obsolete Claudio decided to alway be initialy 0.0 (as in V.B. code)
,water_hold_const_residue_32(0.0) // 070118 (0.002)                              //070118
#endif
,stubble_residue_32(0)              ,v_stubble_residue             (stubble_residue_32        ,UC_kg_m2   ,LABEL_stubble_biomass     , 4,0.0,0.0    ,1.5 , 0.0,4.0 ,TU_kg_m2   ,"Surface standing stubble biomass" ,TL_Residue)  //060526_
,surface_residue_32(0)              ,v_surface_residue             (surface_residue_32        ,UC_kg_m2   ,LABEL_surface_biomass     , 4,0.0,0.0    ,1.5 , 0.0,4.0 ,TU_kg_m2   ,TL_Surface_biomass        ,TL_Residue)
,incorporated_residue_32_obsolete_V4_4_1(0)         ,v_incorporated_residue        (incorporated_residue_32_obsolete_V4_4_1   ,UC_kg_m2   ,LABEL_incorporated_biomass, 4,0.0,0.0    ,0.5 , 0.0,4.0 ,TU_kg_m2   ,"Incorporated biomass (obsolete V4.4.1)"  ,TL_Residue)  //001117_
#ifdef NITROGEN
,N_conc_residue_32(0.0)             ,v_N_conc_residue              (N_conc_residue_32         ,0          ,LABEL_N_conc              , 4,0.01,0.005  ,0.03, 0.0,1.0 ,TU_kgN_kgDM,TL_Nitrogen_concentration ,TL_Residue)
#endif
#if (((CS_VERSION > 0) && (CS_VERSION <= 4)) && !defined(REACCH_VERSION))
,decomposition_time_residue_63(60)  ,v_decomposition_time_residue_63(decomposition_time_residue_63,/*UT_day ,*/LABEL_decomposition_time      ,60,0      ,1000, 0  ,9999,T_date_Days,TL_Decomposition_time_constant,TL_Residue)
// else only use 50% decomp mode
#endif
,decomposition_time_residue_50(41)  ,v_decomposition_time_residue_50(decomposition_time_residue_50,/*UT_day ,*/LABEL_decomposition_time_50   ,41,0      ,1000, 0  ,9999,T_date_Days,TL_Decomposition_time_constant,TL_Residue)   //040830_
,previous_residue_crop_filename("<unknown or no previous crop residue>.crp")     //060224
#if (((CROPSYST_VERSION > 0) && (CROPSYST_VERSION <= 4)) && !defined(REACCH_VERSION))
// 070118 becoming obsolete Claudio decided to alway be initialy 0.0 (as in V.B. code)
,water_hold_const_manure_32(0.002)                                               //010717
#endif
,surface_manure_32(0)               ,v_surface_manure                (surface_manure_32            ,UC_kg_m2   ,LABEL_surface_biomass     , 4,0.0,0.0    ,1.5 , 0.0,4.0,TU_kg_m2,TL_Surface_biomass,TL_Manure)
,incorporated_manure_32(0)          ,v_incorporated_manure           (incorporated_manure_32       ,UC_kg_m2   ,LABEL_incorporated_biomass, 4,0.0,0.0    ,0.5 , 0.0,4.0,TU_kg_m2,TL_Incorporated_biomass,TL_Manure)
#ifdef NITROGEN
,N_conc_manure_32(0.0)              ,v_N_conc_manure                 (N_conc_manure_32             ,0          ,LABEL_N_conc              , 4,0.0,0.005  ,0.03, 0.0,1.0,TU_kgN_kgDM,TL_Nitrogen_concentration,TL_Manure)
#endif
,decomposition_time_manure_63(60)   ,v_decomposition_time_manure_63(decomposition_time_manure_63    ,/*UT_day ,*/LABEL_decomposition_time     ,60 ,0      ,1000,  0,9999,T_date_Days,TL_Decomposition_time_constant,TL_Manure)
,decomposition_time_manure_50(41)   ,v_decomposition_time_manure_50(decomposition_time_manure_50    ,/*UT_day ,*/LABEL_decomposition_time_50     ,41 ,0      ,1000,  0,9999,T_date_Days,TL_Decomposition_time_constant,TL_Manure)
#endif
//020327 years in rotation will now be done with a rotation.
///*_______*/,v_years_in_rotation    (years_in_rotation,LABEL_years_in_rotation      ,
//T_CS             1,
//T_SR            50,
///*_______*/   0,9999,0,9999,L_Years_in_each_rotation_cycle)
#if defined(SALINITY)
,initial_water_table_salinity_32(0)  ,v_initial_water_table_salinity  (initial_water_table_salinity_32 ,UC_dS_m    ,LABEL_water_table_salinity,3,0.0 ,0.0,26.0,0.0,50.0 ,TU_dS_m,TL_Water_table_salinity)
#endif
#if (defined(SALINITY) || defined(NITROGEN))
,ECe_to_TDS                   (0.64) ,v_ECe_to_TDS                    (ECe_to_TDS                ,UC_factor  ,"ECe_to_TDS"         ,3,0.64,0.0, 1.0,0.0, 2.0 ,"factor","Soil profile ECe (dS/m) -> TDS (kg/m³) conversion factor", "Eletrical conductivity in water (dS/m) to total dissolved solids (l/g or kg/m³). Usually about 0.64." )
,ECw_to_TDS                   (0.64) ,v_ECw_to_TDS                    (ECw_to_TDS                ,UC_factor  ,"ECw_to_TDS"         ,3,0.64,0.0, 1.0,0.0, 2.0 ,"factor","Water table ECw (dS/m) -> TDS (kg/m³) conversion factor", "Eletrical conductivity in water (dS/m) to total dissolved solids (l/g or kg/m³). Usually about 0.64." )
#endif
#ifdef NITROGEN
,initial_water_table_NO3_N    (0.0)  ,v_initial_water_table_NO3_N     (initial_water_table_NO3_N ,UC_kg_m3   ,"water_table_NO3_N"       ,3,0.0 ,0.0,10.0,0.0,100.0,"kg/m³","Water table nitrate NO3-N concentration")
,initial_water_table_NH4_N    (0.0)  ,v_initial_water_table_NH4_N     (initial_water_table_NH4_N ,UC_kg_m3   ,"water_table_NH4_N"       ,3,0.0 ,0.0,10.0,0.0,100.0,"kg/m³","Water table ammonium NH4-N concentration")
#endif
#ifdef SOILR
,SoilR_latest_date_to_clip(365,D_MD,D_YYYY,D_lead_zero,D_M,'/')                  //980724
,SoilR_adjust_relative_growth_rate_for_clipping(1.0)  ,v_SoilR_adjust_relative_growth_rate_for_clipping(SoilR_adjust_relative_growth_rate_for_clipping,LABEL_adjust_relative_growth_rate_for_clipping,1.0,0.5,1.5,0.0,2.0               ,TU_0_2,TL_Clipping_relative_growth_rate_adjustment)            //970522p
,SoilR_minimum_biomass_required_for_clipping(1000)    ,v_SoilR_minimum_biomass_required_for_clipping   (SoilR_minimum_biomass_required_for_clipping,  LABEL_minimum_biomass_required_for_clipping    ,1000.0,0.0,4000.0,0.0,6000.0      ,TU_kg_ha,TL_Minimum_biomass_required_for_clipping)    //970522p
,SoilR_biomass_forces_clipping(99999L)                ,v_SoilR_biomass_forces_clipping                 (SoilR_biomass_forces_clipping,                LABEL_biomass_forces_clipping                  ,4000.0,2000.0,6000.0,0.0,10000.0  ,TU_kg_ha,TL_Maximum_biomass_that_forces_clipping) //970522p
,SoilR_biomass_removed_clipping(0)                    ,v_SoilR_biomass_removed_clipping                (SoilR_biomass_removed_clipping,               LABEL_biomass_removed_clipping                 ,0,0,100,0,100                     ,TU_percent,TL_Percent_biomass_to_remove) // 970607
// SoilR Grass
,override_crop(false)
,SoilR_max_root_depth(1.5)       ,v_SoilR_max_root_depth      (SoilR_max_root_depth      ,LABEL_max_root_depth      ,2,1.5, 0.1, 3.0, 0.0, 4.0,U_m,L_Maximum_rooting_depth)
,SoilR_max_LAI(4.0)              ,v_SoilR_max_LAI             (SoilR_max_LAI             ,LABEL_max_LAI             ,2,4.0, 2.0,10.0, 0.0,15.0,U_m2_m2,L_Maximum_leaf_area_index_LAI)
,SoilR_ET_coef(1.0)              ,v_SoilR_ET_coef        (SoilR_ET_coef        ,LABEL_ET_crop_coef        ,2,1.0, 0.8, 1.4, 0.5, 2.0,U_0_8_1_4,L_ET_crop_coefficient_at_full_canopy)
,SoilR_induce_dormancy_temp(10)  ,v_SoilR_induce_dormancy_temp(SoilR_induce_dormancy_temp,LABEL_induce_dormancy_temp,2,10 , -10,25  ,-30 ,30  ,U_degrees_C, L_Average_temperature_to_induce_dormancy)  // 970521P
#endif
// The following are essentially the percent of the initial organic matter carbon mass that is apportioned to the respective organic matter pools // 040610
,field_size_ha(0)                                                                //040819
,field_number(0)                                                                 //040819
,v_annual_temperature_avg               (annual_temperature.avg                ,UC_Celcius,   "temperature_avg"                ,2,10.0 ,0      ,40 , 0  , 45,"°C" ,"Average annual temperature")                //060501
,v_annual_temperature_avg_half_amplitude(annual_temperature.avg_half_amplitude ,UC_Celcius,   "temperature_amplitude_avg"      ,2,10.0 ,0      ,20 , 0  , 40,"°C" ,"Half amplitude of annual temperature range")//060501
,v_annual_temperature_phase             (annual_temperature.phase              ,              "temperature_phase"              ,120  ,1      ,456, 1  ,456,"days","Average annual temperature phase")           //060501
,site_aspect_N0_E90(180)  // Currently only setup by GIS but could be a user parameter.                                                                                                                                                                  //060725
,use_soil_parameter_organic_matter(false)                                        //090202
{

   // In the case of GIS and LADSS simulations the output directory
   // will be different from the template scenario filename

//std::cerr << "Scenario constructor:" << std::endl;

   annual_temperature.avg = 0;                                                   //141222
   annual_temperature.avg_half_amplitude = 0;                                    //141222
   annual_temperature.phase = 0;                                                 //141222

   char i_str[10];

//std::cerr << "clear horizons:" << std::endl;

   //160222 if (_scenario_directory && strstr(_scenario_directory->c_str(),"CPF"))                             //150419

   if (CPF_mode)                                                                 //160222
      CropSyst_Model_options::CPF_irrigation_disable = true;                     //150419

   for (nat8 i = 0; i <= MAX_soil_horizons; i++)  // layer 0 not used            //970614
   {  CORN::int8_to_cstr(i,i_str,10);                                            //001116
      horizon_H2O[i]                      = 0.0;                                 //051228
#ifdef NITROGEN
      horizon_N_NO3[i]                    = 0.0;
      horizon_N_NH4[i]                    = 0.0;
      horizon_percent_organic_matter[i]   = 0.0;
#endif
      #ifdef PHOSPHORUS
      /*NYI
      horizon_P[i] = 0.0;                                                        //110801
      v_P[i] = new Valid_float32(horizon_P[i], UC_kg_ha,i_str,3,0.0,0.0,100.0,0.0,9999.9,TU_kg_ha,"Amount of P (in the form of diphophorus pentoxide)"); //110801
      */
      #endif
#ifdef SALINITY
      horizon_salinity_dSm[i]                 = 0.0;
      v_salinity[i]  = new Valid_float32(horizon_salinity_dSm[i] ,UC_dS_m ,i_str,3,0.0,0.0,26.0,0.0,50.0,TU_dS_m,TL_Salinity); // 990225
#endif
#ifdef RESIDUES
      horizon_incorporated_residue[i]             = 0.0;
#endif
   }

//std::cerr << "setup V:" << std::endl;

#ifdef RESIDUES
   v_stubble_residue       .set_alt_units_codes(common_mass_per_area_units);     //060526
   v_surface_residue       .set_alt_units_codes(common_mass_per_area_units);     //060526
   v_incorporated_residue  .set_alt_units_codes(common_mass_per_area_units);     //060526
//NYI     v_N_conc_residue        .set_alt_units_codes(alt_conc_units);          //060526
   v_surface_manure        .set_alt_units_codes(common_mass_per_area_units);     //060526
   v_incorporated_manure   .set_alt_units_codes(common_mass_per_area_units);     //060526
//NYI     v_N_conc_manure         .set_alt_units_codes(alt_conc_units);          //060526
#endif
   for (nat8  m = 0; m <= 12; m++) mean_peak_rainfall[m] = 0;                    //091205

//std::cerr << "exit scenario constructor." << std::endl;
}
//------------------------------------------------------------------------------
bool Scenario::expect_structure(bool for_write)
{  bool expected = CropSyst_scenario_superclass::expect_structure(for_write);    //161023_130619
   structure_defined = false;                                                    //120314
   set_current_section("scenario");                                              //090511
   set_current_section(LABEL_parameter_filenames);                               //020909

       // These ID's are for LADSS or other generated scenarios
      expect_string("SOIL_ID", soil_ID_str); // ID fields are for LADSS and GIS modes //020612
      expect_string("LOC_ID", loc_ID_str);                                       //020612
      expect_string("ROT_ID", rot_ID_str);                                       //020612
      expect_string("ROTATION_ID", rot_ID_str);                                  //020612
      /* obsolete now using ID
      expect_string("LBF_ID", LBF_ID_str);                                       //020612
      expect_int32("LBF_INIT_ID", LBF_INIT_IDx);                                 //020612
      */
      #ifndef __linux__
      // Not sure why this crashes when reading
      expect_string("LBF_ID",ID.code);                                           //160222
      #endif
      expect_string("WEATHER_ID",weather_ID_str);                                //140214
      expect_file_name(LABEL_soil,soil_filename);
#if (((CS_VERSION > 0) && (CS_VERSION <= 4)) && !defined(AGMIP))
      expect_file_name(LABEL_location,location_filename);
      expect_file_name(LABEL_weather_database,weather_filename); // location is used for the UED filename, because UED stores location data. 030206_
      if (!for_write)
#endif
         expect_file_name("weather",weather_filename);                            //110101
      if (!for_write) // this is to import scenario files prior to 4.1.60  (rotation has been moved to "cropping_system" section. //051231
         expect_file_name(LABEL_rotation,rotation_filename);
      expect_file_name(LABEL_management,fixed_management_filename);  // prior to V 4.1.60  //000106
      expect_file_name(LABEL_fixed_management,fixed_management_filename); // renamed this to fixed_management to avoid confusion with single management added in V 4.1.60        //060103
      expect_file_name(LABEL_recalibration,recalibration_filename);
      expect_file_name(LABEL_water_table,water_table_filename);
      expect_file_name("organic_matter",organic_matter_initial_filename);        //160315
         // Preexisting organic matter produced from previous CropSyst runs.
         // V5 will have scenario composition and parameter file discovery
         // the file or reference to it is simply placed in the
         // scenario directory.
         // REACCH composes the filename internally for the cell.


      #if (REACCH_VERSION==1)
      expect_file_name("historical_organic_matter",historical_organic_matter_filename); //120821
      #endif

   set_current_section("cropping_system");                                       //051231
      expect_enum("cropping_mode",cropping_system_mode_labeled);                 //051231
      if (!for_write || (cropping_system_mode_labeled.get() == rotation_cropping_system)) //051231
         expect_file_name(LABEL_rotation,rotation_filename);
      if (!for_write || (cropping_system_mode_labeled.get() == single_cropping_system))   //051231
         expect_date("sowing_date",single_sowing_date);                                   //051231
      if (!for_write || (cropping_system_mode_labeled.get() == single_cropping_system)
          || (cropping_system_mode_labeled.get() == established_cropping_system))         //051231
      {
         expect_file_name("crop"          ,single_crop_filename);                //051231
         expect_file_name(LABEL_management,single_management_filename);          //051231
      }
   setup_structure(*this,for_write);                                             //020621
   set_current_section(LABEL_H2O);                                               //011116
      expect_date(LABEL_recalibrate_date,H2O_recalibrate_date,false);            //011116
      expect_float32_array_with_units_label(LABEL_H2O,TU_m_H2O_m_soil,horizon_H2O,1,MAX_soil_horizons,false); //070404
#ifdef RESIDUES

// Note that eventually this will become a recalibration event.

   set_current_section(LABEL_initial_residue);
      if (!for_write)
      {
         // reset has been replaced with residue_recalibration_date
         // this is provided to read old versions.
         expect_bool(LABEL_reset_residue,reset_residue_deprecated,CROPSYST_VV_BOOL_FORM);
      }
      expect_date(LABEL_recalibrate_date,residue_recalibration_date);            //160126

      expect_valid_float32(v_stubble_residue);                                   //060526
      expect_valid_float32(v_surface_residue);
      expect_valid_float32(v_incorporated_residue);
      expect_float32_array_with_units_code_fixed("incorporated_residue",UC_kg_m2
         ,horizon_incorporated_residue,1,MAX_soil_horizons,false);               //070404

      set_current_section("incorporated_residue");                               //060526
#if (((CROPSYST_VERSION > 0) && (CROPSYST_VERSION <= 4)))
// 070118 becoming obsolete Claudio decided to always be initialy 0.0 (as in V.B. code)
      expect_float32(LABEL_water_hold,water_hold_const_residue_32); // no longer and edited field 980206P
#endif
      #ifdef NITROGEN
      expect_valid_float32(v_N_conc_residue);
      #endif
      #if ((CS_VERSION == 4)&& !defined(REACCH_VERSION))
      expect_valid_int16(v_decomposition_time_residue_63);
      #endif
      expect_valid_int16(v_decomposition_time_residue_50);
      expect_file_name("previous_crop",previous_residue_crop_filename);          //060224

#ifdef LADSS_MODE
      if (!for_write)                                                            //030308
      {  // The following are for LADSS                                          //030308
         expect_float32(LABEL_surface_residue_obsolete,surface_residue_32);      //030308
         expect_float32(LABEL_incorp_residue_obsolete,incorporated_residue_32_obsolete_V4_4_1);    //030308
         expect_float32(LABEL_residue_N_conc_obsolete,N_conc_residue_32);        //030308
      }
#endif
     alias_section(LABEL_initialize_obsolete,LABEL_initial_residue);  //  For compatability with version 3  //020403
      alias_entry(LABEL_surface_residue_obsolete,LABEL_surface_biomass);         //020403
      alias_entry(LABEL_incorp_residue_obsolete,LABEL_incorporated_biomass);     //020403
   set_current_section(LABEL_initial_manure);                                    //010717
      expect_valid_float32(v_surface_manure);                                    //010717
      expect_valid_float32(v_incorporated_manure);                               //010717
#if (((CROPSYST_VERSION > 0) && (CROPSYST_VERSION <= 4)) )
// 070118 becoming obsolete Claudio decided to always be initially 0.0 (as in V.B. code)
      expect_float32(LABEL_water_hold,water_hold_const_residue_32); // no longer and edited field 010717_
#endif
      #ifdef NITROGEN
      expect_valid_float32(v_N_conc_manure);
      #endif
      expect_valid_int16(v_decomposition_time_manure_63);                        //010717
      expect_valid_int16(v_decomposition_time_manure_50);                        //010717
#endif
#ifdef SALINITY
   set_current_section(LABEL_salt);
      expect_valid_float32(v_initial_water_table_salinity);
      expect_valid_float32(v_ECe_to_TDS);                                        //080402
      expect_valid_float32(v_ECw_to_TDS);                                        //080402
///*070404_*/       expect_float32_array_with_units_code_fixed(LABEL_salt,UC_dS_m,horizon_salinity,1,MAX_soil_horizons,false);
//070418 I'd rather use expect_float32_array_with_units_code_fixed but it is crashing when the unit code list is deallocated, not sure why
      expect_float32_array_with_units_label(                                     //981212
#if CROPSYST_VERSION >= 5
                     "ECw" // This value is more conventually known as ECw
#else
                     LABEL_salt
#endif
                     ,TU_dS_m,horizon_salinity_dSm,1,MAX_soil_horizons,false);
#endif
#ifdef SOILR
   set_current_section(LABEL_SoilR);                                             //970614
      expect_valid_float32(v_SoilR_adjust_relative_growth_rate_for_clipping);
      expect_valid_float32(v_SoilR_minimum_biomass_required_for_clipping);
      expect_valid_float32(v_SoilR_biomass_forces_clipping);
      expect_valid_float32(v_SoilR_biomass_removed_clipping);
      expect_date(LABEL_latest_date_to_clip,SoilR_latest_date_to_clip);          //980724

      expect_bool(LABEL_override_crop,override_crop,CROPSYST_VV_BOOL_FORM);
      expect_valid_float32(v_SoilR_max_root_depth);
      expect_valid_float32(v_SoilR_max_LAI);
      expect_valid_float32(v_SoilR_ET_coef);
      expect_valid_float32(v_SoilR_induce_dormancy_temp);                        //970521
      expect_date(LABEL_start_dormancy_valid_date,SoilR_start_dormancy_valid_date); //970619
      expect_date(LABEL_leave_dormancy_valid_date,SoilR_leave_dormancy_valid_date); //970619
      expect_file_name(LABEL_grass_filename,grass_filename);
#endif
#ifdef CHEM_PROFILE
      horizon_percent_organic_matter[0] = 0;
#endif
#ifdef NITROGEN
   #if (CROPSYST_VERSION==4)
   set_current_section(LABEL_adjustment);
      expect_valid_float32(v_max_transform_depth);
      expect_valid_float32(v_V3_adjust_mineralize);
   #endif
   set_current_section(LABEL_NO3);
      #if (CROPSYST_VERSION==4)
      expect_float32(LABEL_adjust_denitrify,adjust_denitrify);                   //081014
      #endif
      expect_date(LABEL_recalibrate_date,N_NO3_recalibrate_date,false);          //011116
      expect_float32_array_with_units_code_fixed
         (LABEL_NO3,UC_kg_ha,horizon_N_NO3,1,MAX_soil_horizons,false);           //070404
      expect_valid_float32(v_initial_water_table_NO3_N);                         //080213
    set_current_section("denitrification");                                      //140824
      expect_float32("rate_max",denitrification_parameters.rate_max);
      expect_float32("scale",denitrification_parameters.scale);
      expect_float32("alpha",denitrification_parameters.alpha);                  //150903
      //this was for testing expect_float32("respiration_std",denitrification_parameters.standardized_respiration_for_potential);
   set_current_section(LABEL_NH4);
      #if (CROPSYST_VERSION==4)
      expect_float32(LABEL_adjust_nitrify,adjust_nitrify_V4_1);
      #endif
      expect_date(LABEL_recalibrate_date,N_NH4_recalibrate_date,false);          //011116
      expect_float32_array_with_units_code_fixed
         (LABEL_NH4,UC_kg_ha,horizon_N_NH4,1,MAX_soil_horizons,false);           //070404
      expect_valid_float32(v_initial_water_table_NH4_N);                         //080213
#endif
#ifdef PHOSPHORUS
   set_current_section("phosphorus");                                            //110801
      //NYI expect_date(LABEL_recalibrate_date,P_recalibrate_date,false);
      /* NYI
      expect_float32_array_with_units_code_fixed("P",UC_kg_ha,horizon_P,1,MAX_soil_horizons,false);  //110801

      */
      expect_valid_float32(v_phosphorus_in_profile);
#endif
#ifdef PESTICIDE
      expect_string_array(LABEL_chemicals,chemical_names,1,MAX_CHEM_PROFILES);   //981212
#endif
#ifdef NITROGEN
  set_current_section(LABEL_POM);
   expect_date(LABEL_recalibrate_date,POM_recalibrate_date,false);
   expect_float32_array_with_units_code_fixed(LABEL_POM,UC_percent,horizon_percent_organic_matter,1,MAX_soil_horizons,false);
   expect_bool("get_OM_from_soil_DS",use_soil_parameter_organic_matter);

   #ifdef REACCH_VERSION
   organic_matter_initialization_parameters.setup_structure(*this,for_write);
   organic_matter_decomposition_parameters.setup_structure(*this,for_write);

   #else
   // 120909 eventually this will be replaced with above as is done for REACCH
   set_current_section("organic_matter_initialization");                                                                                                                            //040812
      expect_float32_array_with_units_code_fixed(LABEL_microbial_biomass,UC_percent,organic_matter_initialization_parameters.microbial_biomass_percent,1,MAX_soil_horizons,false);  //070404// "Microbial biomass"           ,"portion of the total organic matter")
      expect_float32_array_with_units_code_fixed(LABEL_labile_SOM       ,UC_percent,organic_matter_initialization_parameters.labile_SOM_percent       ,1,MAX_soil_horizons,false);  //070404// "Labile stable organic matter","portion of the total organic matter")
      expect_float32_array_with_units_code_fixed(LABEL_metastable_SOM   ,UC_percent,organic_matter_initialization_parameters.metastable_SOM_percent   ,1,MAX_soil_horizons,false);  //070404// "Metastable organic matter"   ,"portion of the total organic matter")
      expect_float32_array_with_units_code_fixed(LABEL_passive_SOM      ,UC_percent,organic_matter_initialization_parameters.passive_SOM_percent      ,1,MAX_soil_horizons,false);  //070404// "Passive organic matter"      ,"portion of the total organic matter")
   set_current_section("organic_matter_history");                                                                             //060610
      expect_enum(LABEL_partitioning_mode,organic_matter_initialization_parameters.organic_matter_partitioning_mode_labeled); //060610
   set_current_section("organic_matter_decomposition");                                                                       //060812

      #if (CS_VERSION==4)
      expect_valid_float32(organic_matter_decomposition_parameters.v_unadj_microbial_decomposition_const);                    //060610
      expect_valid_float32(organic_matter_decomposition_parameters.v_labile_active_SOM_decomposition_const);                  //060610
      expect_valid_float32(organic_matter_decomposition_parameters.v_metastable_active_SOM_decomposition_const);              //060610
      expect_valid_float32(organic_matter_decomposition_parameters.v_passive_SOM_decomposition_const);                        //060610
      expect_valid_float32(organic_matter_decomposition_parameters.v_microbial_CN_ratio);                                     //060610
      expect_valid_float32(organic_matter_decomposition_parameters.v_labile_active_SOM_CN_ratio);                             //060610
      expect_valid_float32(organic_matter_decomposition_parameters.v_metastable_active_SOM_CN_ratio);                         //060610
      expect_valid_float32(organic_matter_decomposition_parameters.v_passive_SOM_CN_ratio);                                   //060610
      expect_valid_float32(organic_matter_decomposition_parameters.v_max_apparent_soil_C_decomposition_const);                //070710
      expect_valid_float32(organic_matter_decomposition_parameters.v_single_SOM_CN_ratio);                                    //110928
      expect_valid_float32(organic_matter_decomposition_parameters.v_C_fraction_from_labile_to_passive_SOM );                 //090515
      expect_valid_float32(organic_matter_decomposition_parameters.v_C_fraction_from_metastable_to_passive_SOM );             //090515
      #else
      // Note, eventually I need to use Parameters
      // but I don't have a V5 scenario editor yet, so I stick with these:

      expect_float32(LABEL_microbial_biomass_decomposition_constant,organic_matter_decomposition_parameters.unadj_microbial_decomposition_const);              //120823
      expect_float32(LABEL_labile_SOM_decomposition_constant,organic_matter_decomposition_parameters.labile_active_SOM_decomposition_const);                   //120823
      expect_float32(LABEL_metastable_SOM_decomposition_constant,organic_matter_decomposition_parameters.metastable_active_SOM_decomposition_const);           //120823
      expect_float32(LABEL_passive_SOM_decomposition_constant,organic_matter_decomposition_parameters.passive_SOM_decomposition_const);                        //120823
      expect_float32("microbial_CN_ratio"             ,organic_matter_decomposition_parameters.microbial_CN_ratio);                                            //120823
      expect_float32("labile_active_SOM_CN_ratio"     ,organic_matter_decomposition_parameters.labile_active_SOM_CN_ratio);                                    //120823
      expect_float32("metastable_active_SOM_CN_ratio" ,organic_matter_decomposition_parameters.metastable_active_SOM_CN_ratio);                                //120823
      expect_float32("passive_SOM_CN_ratio"           ,organic_matter_decomposition_parameters.passive_SOM_CN_ratio);                                          //120823
      expect_float32("max_apparent_soil_C_decomposition_const",organic_matter_decomposition_parameters.max_apparent_soil_C_decomposition_const);               //120823
      expect_float32("single_CN_ratio"                ,organic_matter_decomposition_parameters.single_SOM_CN_ratio);                                           //120823
      expect_float32("C_fraction_from_labile_to_passive_SOM"      ,organic_matter_decomposition_parameters.C_fraction_from_labile_to_passive_SOM );      //120823
      expect_float32("C_fraction_from_metastable_to_passive_SOM"  ,organic_matter_decomposition_parameters.C_fraction_from_metastable_to_passive_SOM );  //120823
      #endif
   #endif
#endif
   set_current_section("topography");                                            //060725
      expect_float64("aspect",site_aspect_N0_E90);                               //060725
   set_current_section(LABEL_STATSGO);                                           //000118
      expect_string(LABEL_muid,statsgo_muid,7);                                  //000118
      expect_valid_int16(v_statsgo_seqnum);                                      //000120
   set_current_section("field");                                                 //040819
      expect_int16("number",field_number);                                       //040819
      expect_float32("size",field_size_ha," ha");                                //040819
   set_current_section("weather");                                               //060427
      expect_valid_float32 (v_annual_temperature_avg);                           //060502
      expect_valid_float32 (v_annual_temperature_avg_half_amplitude);            //060501
      expect_valid_int16   (v_annual_temperature_phase);                         //060501
   #if (!defined(USE_CS_LAND_UNIT) && !defined(REACCH_VERSION))
   expect_float32_array_with_units_label
       (LABEL_mean_peak_rainfall,"mm"/*TU_mm*/,mean_peak_rainfall,1,12,false);   //091206
   #endif
   set_current_section("GUI");                                                   //060714
      expect_bool("show_location_simulation_period_comment"
         ,show_location_simulation_period_comment);                              //060714
   structure_defined = true;                                                     //120314
   return expected;                                                              //161023
}
//-m981208-----------------------------------------------------------------------------
#define SCENARIO_PARAMETER_CHANGE_COUNT 31
Section_entry_change scenario_parameter_changes[SCENARIO_PARAMETER_CHANGE_COUNT] =
{
    {CHANGE_V4, LABEL_simulation, LABEL_description,                 LABEL_scenario,            LABEL_description}  //020911
   ,{CHANGE_V4, LABEL_simulation, LABEL_soil_filename_OLD,           LABEL_parameter_filenames, LABEL_soil}
   ,{CHANGE_V4, LABEL_simulation, LABEL_location_filename_OLD,       LABEL_parameter_filenames, LABEL_location}
   ,{CHANGE_V4, LABEL_simulation, LABEL_management_filename_OLD,     LABEL_parameter_filenames, LABEL_management}
   ,{CHANGE_V4, LABEL_simulation, LABEL_rotation_filename_OLD,       LABEL_parameter_filenames, LABEL_rotation}
   ,{CHANGE_V4, LABEL_simulation, LABEL_recalibration_filename_OLD,  LABEL_parameter_filenames, LABEL_recalibration}
   ,{CHANGE_V4, LABEL_simulation, LABEL_water_table_filename_OLD,    LABEL_parameter_filenames, LABEL_water_table}
   ,{CHANGE_V4, LABEL_simulation, LABEL_grass_filename_OLD,          LABEL_parameter_filenames, LABEL_grass}
   ,{CHANGE_V4, LABEL_simulation, LABEL_runtime_graph,    LABEL_output, LABEL_runtime_graph}
   ,{CHANGE_V4, LABEL_simulation, LABEL_display_profile,    LABEL_output, LABEL_display_profile}
   ,{CHANGE_V4, LABEL_simulation, LABEL_run_chemical,    LABEL_submodels, LABEL_run_chemical}
   ,{CHANGE_V4, LABEL_simulation, LABEL_run_nitrogen,    LABEL_submodels, LABEL_run_nitrogen}
   ,{CHANGE_V4, LABEL_simulation, LABEL_run_erosion,    LABEL_submodels, LABEL_run_erosion}
   ,{CHANGE_V4, LABEL_simulation, LABEL_run_freezing,    LABEL_submodels, LABEL_run_freezing}
   ,{CHANGE_V4, LABEL_simulation, LABEL_erode_soil,    LABEL_submodels, LABEL_erode_soil}
   ,{CHANGE_V4, LABEL_simulation, LABEL_salinity,    LABEL_submodels, LABEL_salinity}
   ,{CHANGE_V4, LABEL_simulation, LABEL_infiltration_model,    LABEL_submodels, LABEL_infiltration_model}
   ,{CHANGE_V4, LABEL_simulation, LABEL_snow_pack_model,    LABEL_submodels, LABEL_snow_pack_model}
   ,{CHANGE_V4, LABEL_simulation, LABEL_runoff_model,    LABEL_submodels, LABEL_runoff_model}
   ,{CHANGE_V4, LABEL_simulation, LABEL_simulate_CO2_OLD,    LABEL_CO2, LABEL_enable}
   ,{CHANGE_V4, LABEL_initialize_obsolete, LABEL_surface_residue_obsolete,    LABEL_initial_residue,LABEL_surface_biomass}       //041118
   ,{CHANGE_V4, LABEL_initialize_obsolete, LABEL_incorp_residue_obsolete ,    LABEL_initial_residue,LABEL_incorporated_biomass}  //041118
#if (((CROPSYST_VERSION > 0) && (CROPSYST_VERSION <= 4)) )
// 070118 becoming obsolete Claudio decided to alway be initialy 0.0 (as in V.B. code)
   ,{CHANGE_V4, LABEL_initialize_obsolete, "residue_water_hold", LABEL_initial_residue,LABEL_water_hold}    //041118
#endif
   ,{CHANGE_V4, LABEL_initialize_obsolete, LABEL_residue_N_conc_obsolete   , LABEL_initial_residue,LABEL_N_conc}              //041118
   ,{CHANGE_V4, LABEL_initialize_obsolete, LABEL_decomposition_time        , LABEL_initial_residue,LABEL_decomposition_time}  //041118
   ,{CHANGE_V4,"organic_matter_history",LABEL_microbial_biomass_decomposition_constant ,"organic_matter_decomposition",LABEL_microbial_biomass_decomposition_constant}  //070303
   ,{CHANGE_V4,"organic_matter_history",LABEL_labile_SOM_decomposition_constant        ,"organic_matter_decomposition",LABEL_labile_SOM_decomposition_constant}         //070303
   ,{CHANGE_V4,"organic_matter_history",LABEL_metastable_SOM_decomposition_constant    ,"organic_matter_decomposition",LABEL_metastable_SOM_decomposition_constant}     //070303
   ,{CHANGE_V4,"organic_matter_history",LABEL_passive_SOM_decomposition_constant       ,"organic_matter_decomposition",LABEL_passive_SOM_decomposition_constant}        //070303

//NC           No other changes in CO2 section

//NC              no change to H2O section
//                new initial_residue section handled with aliases
//                initial_manure was not in version 3
//NC              salinity no change
//NC              No change in soilR
//NC              No change in adjustment section
//NC              No change in NO3
//NC              No change in NH4
//NC              No change in POM
//             Statsgo has no change and can be considered new in version 4 since not previously used

//  ,{ OLD_section, OLD_entry,    NEW_section, NEW_entry}
};
//______________________________________________________________________________
Section_entry_change *Scenario::get_section_entry_changes(uint16  &count) const
{  count = SCENARIO_PARAMETER_CHANGE_COUNT;
   return scenario_parameter_changes;
}
//_2002-09-09_______________________________________get_section_entry_changes__/
bool Scenario::set_start()
{
   bool started = CropSyst_scenario_superclass::set_start();                     //161023_051028
#ifdef SOILR
   for (int8 layer = 1; layer <= MAX_soil_horizons; layer++)
      H2O[layer] = H2O[1]; // SoilR soil initialization has uniform water profile
#endif
#ifdef PESTICIDE_NYI
#ifdef PESTICIDE
warning this needs to be reimplemented:
   int chem_num = 0;
   for (initial_chemical_profile *chem_profile
         = (initial_chemical_profile *)initial_chemical_profiles.move_to_head()  //980730
          ;chem_profile                                                          //980730
          ;chem_profile = (initial_chemical_profile *)
            initial_chemical_profiles.move_to_next())                            //980730
   {  chem_num++;
      chem_profile->setup_structure(sim_file,chem_num
         #ifdef NITROGEN
               ,adjust_denitrify_16, adjust_nitrify_16
         #endif
         );
   }
   num_chemicals = chem_num;                                                     //970709
#endif
#endif
   return started;                                                               //161023
}
//_2001-01-09_______________________________________________________set_start__/
bool Scenario::get_start()
{   // Clear the chemical names array
   bool started = CS::Simulation_control::get_start();                           //161023
#ifdef PESTICIDE
   for (uint16 i = 0; i < MAX_CHEM_PROFILES; i++)
      chemical_names[i].assign("");
#endif
   //NYI started &= CropSyst_Model_options::get_start();                         //161023
   return started;
}
//_2001-01-09_______________________________________________________get_start__/

#ifdef REACCH_VERSION
#  include "corn/OS/directory_entry_name_concrete.h"
#  include "corn/OS/file_system_engine.h"
#endif
bool Scenario::get_end()
{
   ID.set_code(ID.code);                                                         //160222
      // setup numeric representation of the code just for consistancy.
      // (if it isn't numeric, it will just be 0)

   // File names could be relative or shortcuts we need to set these to
   // absolute filenames.
   // Note that this may break some old version .CSN simulation runs
   // that may have used relative file names, but this is unlikely
   // because I don't think the relative filename selection was working correctly.

#ifdef SOILR
   for (int8 layer = 1; layer <= MAX_soil_horizons; layer++)
      H2O[layer] = H2O[1]; // SoilR soil initialization has uniform water profile
#endif
   /* We actually only only generate precip intensity if
       we have monthly mean 30 precip intensities and
       we are running the numerical runoff_model. 990403 */

   //  Observed leaching can only be provided in the cascade models , not the F.D..
   if (  (leaching_observation_depth_mode_labeled.get() == LEACH_AT_SPECIFIED_DEPTH)
       &&(runoff_model_labeled.get() == NUMERICAL_RUNOFF_MODEL/*160830 FINITE_DIFFERENCE_INFILTRATION*/ ))         //070116
        leaching_observation_depth_mode_labeled.set(LEACH_BOTTOM_OF_PROFILE);    //990407
   #ifdef RESIDUES
   #if (((CS_VERSION>=1) && (CS_VERSION<=4)) && !defined(REACCH_VERSION))
   if (((decomposition_time_residue_50==0))&&(decomposition_time_residue_63>0))  //040830
          decomposition_time_residue_50 = convert_decomposition_time_63_to_50    //040830
            (decomposition_time_residue_63);
      // We don't need to convert manure decomposition time, it is new to version 4.
   #endif
   #endif
   #ifdef PESTICIDE_NYI
   #ifdef PESTICIDE
   // Now for each chemical name create and instance of the chemical name and read it
  // After the first load, we have the number chemicals so we can set up structure for the chemical initializations
   for (int chem_num = 1; chem_num <= num_chemicals; chem_num++)
   {   CORN_string chem_name(chemical_names[chem_num]);
      if (!((chem_name == LABEL_NO3) ||   // these chemicals already expected
            (chem_name == LABEL_NH4) ||
            (chem_name == LABEL_salt)))
      {
         initial_chemical_profile *new_initial_chemical_profile
            = new initial_chemical_profile(chem_name);                           //980730
         new_initial_chemical_profile->setup_structure(sim_file,chem_num         //980730
            #ifdef NITROGEN
            ,adjust_denitrify_16, adjust_nitrify_16
            #endif
            );
         initial_chemical_profiles.append(
         (CORN_list_item *)  // <- Warning this cast shouldn't be needed something might not be setup right
         new_initial_chemical_profile);                                          //980730
      }
   }
   #endif
   #endif
   #ifdef SOILR
   ending_date.set(years_in_rotation+1,1);  // SoilR needs to override the simulation period
   #endif
//051231       Cropping system mode was added in V 4.1.60 since the default is no_cropping_system
//             old version scenario files will load as no_cropping_system so now we check the if the specified rotation filename exists for rotation mode.
   if (cropping_system_mode_labeled.get() == no_cropping_system)                 //051231
      if (CORN::OS::file_system_engine.exists(rotation_filename))
         cropping_system_mode_labeled.set(rotation_cropping_system);             //051231
   #if (((CROPSYST_VERSION >0) && (CROPSYST_VERSION < 5)) )
   if (organic_matter_and_residue_model_labeled.get() == V4_4_ORGANIC_MATTER_AND_RESIDUE)
       organic_matter_and_residue_model_labeled.set(multiple_SOM_multiple_residues);
   if (organic_matter_and_residue_model_labeled.get() == V4_9_ORGANIC_MATTER_AND_RESIDUE)
       organic_matter_and_residue_model_labeled.set(single_SOM_multiple_residues);
   #endif
   CropSyst_scenario_superclass::get_end();                                      //130619_020911
// The following if statement on only temp for debugging
// (it should be commented out)
/*
   if (prompt_denitrification_params)
   {

   std::cout << "[denitrification]" << std::endl;
   std::cout << "rate_max=" << denitrification_parameters.rate_max << std::endl;
   std::cout << "scale=" << denitrification_parameters.scale << std::endl;
   std::cout << "alpha=" << denitrification_parameters.alpha << std::endl;
   std::cout << "respiration_std=" << denitrification_parameters.standardized_respiration_for_potential << std::endl; //151110

   std::cout << "change this parameters (y/n)?" << std::endl;
   char continue_response;
   continue_response = getchar();
   if ((continue_response == 'y') || (continue_response == 'Y'))
   {
      std::cout << "rate_max:" << std::endl; std::cin >>  denitrification_parameters.rate_max;
      std::cout << "scale   :" << std::endl; std::cin >>  denitrification_parameters.scale;
      std::cout << "alpha   :" << std::endl; std::cin >>  denitrification_parameters.alpha;
      std::cout << "respiration_std (Enter 0 for the model to calculate):"
                <<                std::endl; std::cin >> denitrification_parameters.standardized_respiration_for_potential; //151110
   }
   }
*/
   #ifdef RESIDUES
   if (reset_residue_deprecated)                                                 //160126
      residue_recalibration_date.set_DOY(start_date.get_DOY());
   #endif
   return CS::Simulation_control::get_end();
      //NYI && CropSyst_Model_options::get_end();//161023
}
//_2001-01-09_________________________________________________________get_end__/
#ifdef ABANDONED
// Don't delete this, it works, but is slow if there are many directories
// I should have a scenario control option to enable this.

// This is intended for cases where scenarios or scenario fragments
// or scenario directories intentionally are moved, copied or generated in alternate locations;
// such that relative filenames would be expected to be out of alignment.
// It would then be necessary to search for the files where the filenames.
// Are unqualified.   A better solution would be to use
// macro names  (I.e.   %PROJECT%/Database/Soil/xxxx.CS_soil)

bool Scenario::qualify_unqualified_parameter_filenames
(CS::Databases &databases
,bool verbose)
{  bool assigned = false;

   CORN::Unidirectional_list database_subdirs;


   FOR_EACH_IN(section,VV_section,sections,each_section)
   {
      FOR_EACH_IN(entry,VV_abstract_entry,section->entries,each_entry)
      {
         const CORN::VV_directory_entry_entry *entry_as_DEN =
            dynamic_cast<const CORN::VV_directory_entry_entry *>(entry);
         if (entry_as_DEN)
         {
            CORN::OS::Directory_entry_name &param_filename = entry_as_DEN->ref_value();
            std::string name;
            CORN::wstring_to_string(param_filename.get_name(),name);
            CORN::Text_list path_items_unused;
            if (!database_subdirs.count())
               databases.render_subdirectories(database_subdirs,CORN::Inclusion("*",true),verbose);
            CORN::OS::File_name *most_appropriate_filename
               = databases.render_find_most_appropriate_in_any_context_string
               (param_filename.get_extension(),name,path_items_unused,database_subdirs,verbose);
            if (most_appropriate_filename)
            {  assigned = true;
               param_filename.set_DEN(*most_appropriate_filename);
            }
         }
      } FOR_EACH_END(each_entry)
   } FOR_EACH_END(each_section)
   return assigned;
}
#endif
//_2016-10-31___________________________________________________________________

#ifdef LADSS_MODE
Common_operation *Scenario::get_operation
(const char        *operation_type_str
,const std::string &operation_ID
,modifiable_
CORN::OS::File_name &operation_filename_not_used_by_CropSyst                     //041215
   // This is not currently used by CropSyst
   // (it stores an optional CANMS operation file when running under CANMS
,int32          resource_set_ID     // currently used only by LADSS
,bool          &relinquish_op_to_event)
{  Common_operation  *loaded_op = 0;
   CORN::Data_source       *op_data_source = 0;
   CropSyst_Op_labeled cs_op_labeled(operation_type_str);
   uint32 op_ID = CORN_str_to_uint32(operation_ID.c_str(),10);                   //041215
   if (LADSS_mode && LADSS_CropSyst_model)
   {
      relinquish_op_to_event = true;
      switch (cs_op_labeled.get())
      {
/* Not currently handled here?
                     case CS_OP_ROT_SOWING     :
                        loaded_op = new xxxx_operation;
                        op_data_source = &xxxxxxxx_data_source;
                     break;
*/
         case CS_OP_MGMT_TILLAGE :
            loaded_op = new CropSyst::Tillage_operation;
//                        tillage does not have parameter tables,
//                        we simply create the respective operation
//                        and load the SCS code from the RESOURCE_SET
         break;
         case CS_OP_MGMT_RESIDUE:
            loaded_op = new CropSyst::Residue_operation;
//                        tillage does not have parameter tables,
//                        we simply create the respective operation
//                        and load the SCS code from the RESOURCE_SET
         break;
         case CS_OP_MGMT_HARVEST_OR_CLIPPING:                                    //031014
            loaded_op = new CropSyst::Harvest_or_clipping_operation;
            op_data_source = new Database_data_source(LADSS_database_schema table("HARVEST"),"OP_ID",std::ios_base::in  database_session);   //031129
         break;
         case CS_OP_MGMT_IRRIGATION :
            loaded_op = new CropSyst::Irrigation_operation;
            op_data_source = new Database_data_source(LADSS_database_schema table("IRRIGATION")            ,"OP_ID",std::ios_base::in  database_session);
         break;
         case CS_OP_MGMT_INORGANIC_NITROGEN           :
            loaded_op = new CropSyst::Inorganic_nitrogen_operation;
            op_data_source = new Database_data_source(LADSS_database_schema table("INORGANIC_NITROGEN")    ,"OP_ID",std::ios_base::in  database_session);
         break;
         case CS_OP_MGMT_BIOMATTER_APPLICATION           :                       //080829
            loaded_op = new CropSyst::Biomatter_application_operation;           //080829
            op_data_source = new Database_data_source(LADSS_database_schema table("BIOMATTER_APPLICATION")    ,"OP_ID",std::ios_base::in  database_session); //080829
         break;
         case CS_OP_MGMT_ORGANIC_NITROGEN             :
            loaded_op = new CropSyst::Organic_nitrogen_operation;
            op_data_source = new Database_data_source(LADSS_database_schema table("ORGANIC_NITROGEN")      ,"OP_ID",std::ios_base::in  database_session);
         break;
/*NYI                case CS_OP_MGMT_CHEMICAL                     :
                        loaded_op = new Chemical_operation;
                        op_data_source = &xxxx_data_source;
                     break;
*/
         case CS_OP_MGMT_AUTO_IRRIGATION              :
            loaded_op = new CropSyst::Automatic_irrigation_mode;                 //060804
            op_data_source = new Database_data_source(LADSS_database_schema table("AUTO_IRRIGATION")       ,"OP_ID",std::ios_base::in  database_session);
         break;
         case CS_OP_MGMT_AUTO_N                     : // <- This is a place holder for LADSS
            loaded_op = new CropSyst::N_application_soil_observation_mode ;
            op_data_source = new Database_data_source(LADSS_database_schema table("AUTO_N")              ,"OP_ID",std::ios_base::in  database_session);
         break;
         case CS_OP_MGMT_AUTO_N_BALANCE_BASED      :
            loaded_op = new CropSyst::N_application_soil_observation_mode ;
            op_data_source = new Database_data_source(LADSS_database_schema table("AUTO_N"
               )              ,"OP_ID" ,std::ios_base::in database_session);
         break;
         #if (((CROPSYST_VERSION > 0) && (CROPSYST_VERSION < 5)) )
         case CS_OP_MGMT_AUTO_N_LOCAL_CALIBRATION  :
            loaded_op = new CropSyst::N_application_soil_observation_mode ;
            op_data_source = new Database_data_source(LADSS_database_schema table("AUTO_NO3")              ,"OP_ID",std::ios_base::in  database_session);
         break;
         #endif
         case CS_OP_MGMT_AUTO_N_APPL :
            loaded_op = new CropSyst::N_application_soil_observation_mode ::Split_application;
            op_data_source = new Database_data_source(LADSS_database_schema table("AUTO_N_APPL")         ,"OP_ID",std::ios_base::in  database_session);

         break;
/*NYI
                     case CS_OP_MGMT_SOIL_N_SAMPLING :
                        loaded_op = new xxxx_operation;
                        op_data_source = &xxxxxxxx_data_source;
                     break;
*/
         case CS_OP_MGMT_AUTO_CLIP_BIOMASS :
            loaded_op = new CropSyst::Auto_clip_biomass_mode;
            op_data_source = new Database_data_source(LADSS_database_schema table("HARVEST")     ,"OP_ID",std::ios_base::in  database_session);
         break;
/*NYI
                     case CS_OP_RECALIBRATION :
                        loaded_op = new xxxx_operation;
                        op_data_source = &xxxxxxxx_data_source;
                     break;
*/
      }  // end switch
      if (loaded_op)
      {  Database_data_source resource_set_data_source(LADSS_database_schema table("RESOURCE_SET"),"RES_SET_ID" ,std::ios_base::in database_session);  //031129
         resource_set_data_source.where_long("RES_SET_ID",resource_set_ID);      //031129
         resource_set_data_source.get(*loaded_op);                               //031129
         if (op_data_source)
         {  op_data_source->where_long("OP_ID",op_ID);
            op_data_source->get(*loaded_op);
            delete op_data_source;                                               //040706
         }
         // else is it probably tillage or residue which only get SCS code from resource set
      }
   }
   // else operations are loaded with the event list.
   return loaded_op;
}
#endif
//_2003-08-08___________________________________________________get_operation__/
bool Scenario::has_mean_peak_rainfall()                                    const
{  bool result = true;     // This used to be in the location file, which is now deprecated
   for (nat8  i = 1; i <= 12; i++)
      if (CORN::is_approximately<float32>(mean_peak_rainfall[i],0.0,0.000001))
         result = false;
   return result;
}
//_2009-12-05__________________________________________has_mean_peak_rainfall__/
nat8 Scenario::assign_IDs_to_parameter_filenames()                 modification_
{  // This is used with GIS and other scenario template based simulations
   // where the template scenario specifies filenames
   // that I identify parameter file directories
   // and the filename will be replaced with the
   nat8 IDs_assigned = 0;
   if (soil_ID_str   .length() && (soil_ID_str    != "0"))  { soil_filename     .replace_name_str(soil_ID_str);     IDs_assigned++;}
   if (rot_ID_str    .length() && (rot_ID_str     != "0"))  { rotation_filename .replace_name_str(rot_ID_str);      IDs_assigned++;}
   if (weather_ID_str.length() && (weather_ID_str != "0"))  { weather_filename  .replace_name_str(weather_ID_str);  IDs_assigned++;}
   //loc is deprecated if (loc_ID_str.length())
   return IDs_assigned;
}
//_140214_______________________________________________________________________
bool Scenario::apply_simulation_override_record
(const CropSyst::Simulation_override_record &GIS_record)

// rename GIS_record to override_record

{
      CORN::OS::File_name_concrete new_soil_filename(soil_filename);
      new_soil_filename.replace_name_str(GIS_record.parameter_overrides.soil_code); //050921
      if (CORN::OS::file_system_engine.exists(new_soil_filename))
          soil_filename.set_DEN(new_soil_filename);
      #if ((CS_VERSION==4) &&!defined(AGMIP))
      CORN::OS::File_name_concrete new_location_filename(location_filename);
      new_location_filename.replace_name_str(GIS_record.parameter_overrides.weather_code);  // this may be obsolete at least provided for backward compatibility 050921
      if (CORN::OS::file_system_engine.exists(new_location_filename))
          location_filename.set_DEN(new_location_filename);
      #endif
      CORN::OS::File_name_concrete new_weather_database(weather_filename);
      new_weather_database.replace_name_str(GIS_record.parameter_overrides.weather_code);
      if (CORN::OS::file_system_engine.exists(new_weather_database))
      {
         #if ((CS_VERSION==4) &&!defined(AGMIP))
         location_filename.set_DEN(new_weather_database);  // weather database trumps location
         #endif
         weather_filename.set_DEN(new_weather_database);                         //050619
      }
      CORN::OS::File_name_concrete new_rotation_filename(rotation_filename);     //010518
      new_rotation_filename.replace_name_str(GIS_record.parameter_overrides.rotation_code); //050921
      if (CORN::OS::file_system_engine.exists(new_rotation_filename))            //010518
          rotation_filename.set_DEN(new_rotation_filename);                      //010518
      CORN::OS::File_name_concrete new_recalibration_filename(recalibration_filename,".RCL");         //060411
      new_recalibration_filename.replace_name_str(GIS_record.parameter_overrides.recalibration_code); //060411
      if (CORN::OS::file_system_engine.exists(new_recalibration_filename))       //060411
          recalibration_filename.set_DEN(new_recalibration_filename);            //060411
   return true;
}
//_140214_______________________________________________________________________
} // namespace CropSyst                                                          //130621

//060501  633 lines

