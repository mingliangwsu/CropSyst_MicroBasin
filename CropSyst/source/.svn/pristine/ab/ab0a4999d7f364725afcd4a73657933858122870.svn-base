#include <options.h>
#include "crop/crop_param.h"
#include "crop/crop_common.h"
#include "soil/soil_interface.h"
#include "soil/hydrology_interface.h"
//160415 moved #include "soil/salinity_profile.h"
#include "crop/growth_stages.hpp"
#include "crop/transpiration.h"
#include <math.h>
#include "corn/math/compare.h"
#include "crop/transpiration.h"
#include "corn/measure/measures.h"
#include "common/weather/parameter/WC_vapor_pressure_deficit.h"
#include "CS_suite/observation/CS_observation.h"
#include "CS_suite/observation/CS_examination.h"
//#include "CS_suite/simulation/CS_inspector.h"
#include "CS_suite/simulation/CS_event_scheduler.h"
//#ifdef CO2_CHANGE
#  include "crop/CO2_response.h"
//#endif


namespace CropSyst {

#ifdef DEBUG_INTERCEPTION
ofstream debug_interception("debug_interception.dat");
#endif
//______________________________________________________________________________
Crop_common::Crop_common
(Crop_parameters                       *parameters_
,bool                                   owns_parameters_
,const Vapor_pressure_deficit_daytime  &daytime_vapor_pressure_deficit_          //140812
,Soil_interface                        *soil_                                    //160415
,modifiable_ Crop_CO2_response         *Crop_CO2_response_given_optional         //160418
,const CORN::Date                      &today_
,CORN::Unidirectional_list             &performable_operations_)
: CS::Simulation_element_composite  (today_)
, parameters                        (parameters_)
, owns_parameters                   (owns_parameters_)
, soil                              (soil_)                                      //160415
, daytime_vapor_pressure_deficit    (daytime_vapor_pressure_deficit_)            //140812
,transpiration(0)
,water_stress_stats(STAT_arithmetic_mean_bit)                                    //160803
,intercepted_precipitation_m_today(0)                                            //160416
,intercepted_precipitation_m_stored(0)
,CO2_response(Crop_CO2_response_given_optional)                                  //160418
,emanator_known(0)                                                               //160613
{  transpiration = new Crop_transpiration_2
      (parameters->transpiration
//160418      #ifdef __BCPLUSPLUS__
//160418      ,CO2_transpiration_adjustment_factor_                                      //160314
//160418      #else
//160418
//160418      #endif
      ,soil_                                                                     //160415
      ,parameters->salinity.osmotic_pot_50                                       //160415
      ,parameters->salinity.salt_tolerance_P);                                   //160415
   delete event_scheduler;                                                       //151127
   event_scheduler = new Event_scheduler_crop(today_,performable_operations_);   //151127
}
//_2004-01-21___________________________________________________________________
Crop_common::~Crop_common()
{
// this is crashing   delete transpiration; transpiration = 0;                   //141103
   parameters = 0;
}
//_2004-01-21_2003-07-10________________________________________________________
bool Crop_common::initialize()                                     modification_ //150930
{  bool initialized = true;
   initialized &= CS::Simulation_element_composite::initialize();
   return initialized;                                                           //151124
}
//_2003-11-30___________________________________________________________________
bool Crop_common::start()                                          modification_ //150930
{  bool started = true;
   started &= CS::Simulation_element_composite::start();
   return started;
}
//_2015-09-30___________________________________________________________________
bool Crop_common::start_day()                                      modification_ //150930
{  bool started = true;
   started &= CS::Simulation_element_composite::start_day();
   intercepted_precipitation_m_today = 0;                                        //160414
   return started;
}
//_2005-10-28___________________________________________________________________
bool Crop_common::end_day()                                        modification_
{  bool ended = true;
   ended = CS::Simulation_element_composite::end_day();
   return ended;
}
//_2015-09-30___________________________________________________________________
float64 Crop_common::update_pot_evapotranspiration
(float64 pot_ref_evapotranspiration)
{  pot_ref_evapotranspiration_local = pot_ref_evapotranspiration;  // meter
   float64 adjusted_ET_coef = get_adjusted_ET_crop_coefficient();                //080811
   // This is a special test for Jordi Marsal for fruits, this method
   // should be reimplemented with this in Crop_fruit if it is decided to keep it
   if (!CORN::is_approximately<float64>(parameters->transpiration.a2,0.0,0.0000001))   //121115
   {  float64 vapor_pressure_deficit_daytime_avg = daytime_vapor_pressure_deficit.get_kPa();//140812
      adjusted_ET_coef += parameters->transpiration.a1 + parameters->transpiration.a2 * vapor_pressure_deficit_daytime_avg;
   }
   float64 pot_crop_ET = pot_ref_evapotranspiration_local * adjusted_ET_coef;
   if (pot_crop_ET < 0.0)  pot_crop_ET = 0.0;

   float64 global_solar_rad_inter_green_canopy = global_solar_rad_intercepted_green_canopy();
   float64 pot_transpiration_m_unadj =
    (global_solar_rad_inter_green_canopy * pot_crop_ET);                 //051028
   pot_transpiration_m[1] = pot_transpiration_m[0] = pot_transpiration_m_unadj;  //151031

   /*std::clog<<"pot_crop_ET_mm:"<<m_to_mm(pot_crop_ET)
            <<"\tpot_ref_et_local:"<<m_to_mm(pot_ref_evapotranspiration_local)
            <<"\tadj_ET_coef:"<<adjusted_ET_coef
            <<"\tLAI:"<<get_LAI(true)
            <<"\tfGreen:"<<global_solar_rad_intercepted_green_canopy()
            <<std::endl;*/
   return pot_crop_ET;
}
//_2001-09-10___________________________________________________________________
float64 Crop_common::process_transpiration_m
( float64 &limited_pot_transpiration
//160415 now member reference , Soil_interface           *soil
//160415 now member reference , const Soil_salt_interface *soil_salinity
)                  modification_
// Soil may be 0 (indicating no water limitations)
// soil_salinity may be 0 (indicating no salinity limitations) //051118_
{  soil_sublayer_array_64(water_uptake_demand);                                  //010724
   clear_sublayer_array(water_uptake_demand);                                    //010724
   float64 water_limited_act_transpiration = 0.0;                                //011118
//160415    float64 attainable_transpiration_deleteme = 0.0;                                       //160321

   Normal_crop_event_sequence growth_stage = get_growth_stage_sequence();         //130902
   if ((growth_stage > NGS_GERMINATION) && (growth_stage <= NGS_MATURITY))
   {
/*160415 moved to uptake_actual
   nat8 soil_number_sublayers = soil ?soil->ref_layers()->get_number_layers():0; //051028
     #ifdef SALINITY
     soil_sublayer_array_64(salt_stress_function);                               //020715
     soil_sublayer_array_64(osmotic_pot_solution);                               //020715
     for (nat8 sublayer = 0; sublayer <= MAX_soil_sublayers; sublayer++)         //020715
     {                                                                           //020715
        salt_stress_function[sublayer] = 1.0;                                    //020715
        osmotic_pot_solution[sublayer] = 0.0;                                    //020715
     }                                                                          //020715
     if (soil_salinity && soil)
       for (nat8 sublayer = 1; sublayer <= soil_number_sublayers; sublayer++)
       {
          salt_stress_function[sublayer] =   // <-- Will be 1.0 when not simulating salinity
            soil_salinity->get_salt_stress_function
               (sublayer
               #if (CROPSYST_VERSION==5)
               ,parameters->salinity.osmotic_pot_50,parameters->salinity.salt_tolerance_P //110823
               #else
               // this could be the same as V5, I just haven't checked it yet
               ,parameters->param_osmotic_pot_50(),parameters->param_salt_tolerance_P()
               #endif
               );
          osmotic_pot_solution[sublayer] =
           soil_salinity->get_osmotic_pot_solution(sublayer);
       }
     #endif
*/
//check for soil moved to uptake_actual     if (soil)                                                                   //080205
      {                                                                          //080205
      /*160415 moved to actual_uptake
         soil_layer_array64(soil_water_pot); clear_layer_array64(soil_water_pot);//080125
         const Soil_hydrology_interface *soil_hydrology = soil->ref_hydrology(); //160412_080125
         for (nat8 layer = 0; layer <= soil_number_sublayers; layer++)           //080125
             soil_water_pot[layer] = soil_hydrology->get_water_potential(layer); //080125
      */
         float64 water_uptake_max_mm =
            #if (CROPSYST_VERSION == 4)
            m_to_mm(parameters->param_max_water_uptake_m
                (get_growth_stage_sequence()));                                   //130902
            #else
            parameters->transpiration.normal_max_water_uptake_mm;
            //130406  Warning we need to make sure that  normal_max_water_uptake_mm is updated dynamically as needed
            // especially for fruit trees
            #endif
         act_transpiration_m =                                                   //011022
           transpiration->calc_transpiration                                     //050331
               (limited_pot_transpiration
//160514                ,attainable_transpiration_deleteme  // return value                        //160321
               ,global_solar_rad_intercepted_green_canopy()                      //081105
               ,water_uptake_max_mm // 130406 m_to_mm(parameters->param_max_water_uptake_m(get_growth_stage()))//091222
               //160414,intercepted_precipitation_m                                      //160318
               ,intercepted_precipitation_m_stored                                      //160414
               ,get_total_fract_root_length()                                    //050331
               /*160415 moved to actual_uptake
               ,soil_number_sublayers
               ,soil_water_pot                                                   //080125
               */
               ,water_uptake_demand
               /*160415  moved to uptake_actual
               #ifdef SALINITY
               ,soil_salinity ? salt_stress_function : 0                         //020712
               ,soil_salinity ? osmotic_pot_solution : 0
               #endif
               */

               , CO2_response ? CO2_response->get_transpiration_adjustment_factor() : 1.0   //160418


               );
         }
         /*160415 moved to actual_uptake
         else  // If no soil then full transpiration                           //080205
         {  attainable_transpiration_deleteme  = limited_pot_transpiration;
            act_transpiration_m = limited_pot_transpiration;                     //080205
         }
         */
         recorded_act_transpiration_m = water_limited_act_transpiration =
            CORN::must_be_greater_or_equal_to<float64>(act_transpiration_m,0.0); //011022
       }
       else
       {  act_transpiration_m = 0.0;                                             //000323
          recorded_act_transpiration_m =water_limited_act_transpiration =  0.0;  //011117
       }                                                                         //000323

      float64 water_stress = (limited_pot_transpiration > 0.0)                   //011117
      ? water_limited_act_transpiration
         /// attainable_transpiration attainable_transpiration_deleteme          //160321
         / limited_pot_transpiration                                             //011117
      : 1.0;
        water_stress_stats.append((float32)water_stress);                        //011023
/* NYI if water_stress
   canopy_warming_equiv_water_depth =  limited_pot_transpiration - water_limited_act_transpiration;
   This would be an output column in the report (we dont do anything with this)
*/
   float64 act_extracted =                                                       //051013
   (soil)                                                                        //020711
   ? soil->mod_hydrology()->extract_water(water_uptake_demand,2)                 //160412_010724
   : act_transpiration_m; // <- This is the case for crop calibrator (or when soil is not a limitation).  //060615
   recorded_act_transpiration_m =  act_transpiration_m;                          //051014
   return recorded_act_transpiration_m;                                          //031201
}
//______________________________________________________________________________
float64 Crop_common::intercept_precipitation(float64 water_reaching_plant)
{  // water_reaching_plant in meters
   float64 water_leaving_plant = 0.0;
   float64 intercepted_precipitation_m_old = intercepted_precipitation_m_stored;
   float64 on_plant = water_reaching_plant + intercepted_precipitation_m_stored;
   float64 max_store = 0.001 * get_fract_canopy_cover();
   if (on_plant > max_store)
   {  intercepted_precipitation_m_stored = max_store;
      water_leaving_plant = on_plant - max_store;
   }
   else
   {  intercepted_precipitation_m_stored =  on_plant;
      water_leaving_plant = 0;
   }
   intercepted_precipitation_m_today = intercepted_precipitation_m_stored - intercepted_precipitation_m_old;
/*  160414
   intercepted_precipitation_m =
    (water_reaching_plant > 0.0)
   ?
     std::min<float64>(0.001 * get_fract_canopy_cover()
      ,water_reaching_plant
      + intercepted_precipitation_m);                                            //160414
   : 0.0;
   float64 water_leaving_plant =  water_reaching_plant - intercepted_precipitation_m;
*/
   return  water_leaving_plant;
}
//_2016-04-14_2014-03-20_______________________________________________________/
bool Crop_common::start_period(nat8 period)                        modification_
{  bool started = true;
   if (emanator_known)
      started &= CS::provide_examination_global().add_period_inspection          //161202
         (period,*emanator_known,today.get_datetime64()
         ,period==0 ? "season" : normal_crop_event_sequence_label_table[period]
         ,"daily");
   return started;
}
//_2016-06-13___________________________________________________________________
bool Crop_common::end_period(nat8 period)                          modification_
{  bool ended = true;
   if (emanator_known)
      ended &= CS::provide_examination_global()                                  //161202
         .complete_period_inspection(period,*emanator_known);
   return ended;
}
//_2016-06-13___________________________________________________________________
} // namespace CropSyst

