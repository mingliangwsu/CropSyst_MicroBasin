#include "CropSyst_engine_V5.h"
#include "csvc.h"
#include "common/simulation/log.h"
#include "UED/library/locrec.h"
//______________________________________________________________________________
namespace CropSyst {
namespace version5 {
//______________________________________________________________________________
Simulation_engine::Simulation_engine
(Command_options_data_source &command_line_options_)                             //160908
//160908 (int argc_, const char *argv_[])
: CS::Rotator
   (command_line_options_                                                        //160908
   ,ID                                                                           //160513
   ,false) // Warning need to provide CPF_function option  160515
//160513   (_arguments.get_control(),0) // Need to check what ID to use  151008
//160513,scenario_directory                 (arguments.provide_scenario_directory(),false) //150804
//160513 ,arguments                          (arguments)
,model_name                         ("CropSyst_V5")
,output_dir                         (0)
/*160513
,default_scenario_file_name_unqual  (L".CropSyst_scenario")
*/
, control_filename_extension        (L"CS_control")                              //160308
, scenario_filename_extension       (L"CropSyst_scenario")                       //160219
, template_rotation_file_name       (0) // deprecated                            //151010
, ID                                (0)
, arguments                         (ID/*160908 ,argc_,argv_*/)                  //160908_160312
//160525 , meteorological                    (today,geolocation)                          //160514
, weather_daily                     (0)                                          //160525
, databases                         (0)
, stores                            (0)
{}
//_2015-10-08___________________________________________________________________
Simulation_engine::~Simulation_engine()
{
   delete output_dir;
   delete weather_daily;
}
//_2015-10-08___________________________________________________________________
const CORN::OS::Directory_name &Simulation_engine
::get_output_directory_name()                                              const
{
   if (!output_dir)
      output_dir = new CORN::OS::Directory_entry_name_concrete
         (arguments.provide_scenario_directory(),"Output");
   return *output_dir;
}
//_2015-10-08___________________________________________________________________
const CORN::OS::Directory_name &Simulation_engine::provide_scenario_directory_name() provision_
{ return arguments.provide_scenario_directory(); }
// This could be moved to CS_simulation_engine
//_2015-10-08___________________________________________________________________
const CORN::OS::File_name &Simulation_engine::provide_template_rotation_file_name() provision_
{
   return template_scenario.rotation_filename;                                   //160529
/*160529
   if (!template_rotation_file_name)
      template_rotation_file_name = new CORN::OS::File_name_concrete
         (arguments.provide_scenario_directory()
         ,L".CS_rotation");
   return *template_rotation_file_name;
*/
}
//_2015-10-11___________________________________________________________________
bool Simulation_engine::initialize()                             initialization_
{
   bool initialized = true;

   // Now that we know the scenario directory we can purge output
   arguments.provide_scenario_directory().purge_output();
   if (arguments.provide_scenario_file_name().has_in_path_cstr("AgMIP"))         //160311
      initialized &= desire_AgMIP_variables();
   std::string ISO_6709_unused;                                                  //160111
   bool geocoordinate_discovered = file_discovery.get_geolocation                //151207
      (arguments.provide_scenario_directory(),"location",geolocation/*geocoordinate*/,ISO_6709_unused);//160111
/* member instance
   meteorological                                                                //151202_151128
      = new CS::Land_unit_meteorological
      (today
      ,geolocation // geocoordinate
      ,template_scenario.snow_pack_model_labeled.get());
*/
/* V5 does not have panoply of outout
   land_unit_with_output = new CropSyst::Land_unit_with_output_V4                //151204
      (arguments.ref_ID()                                                        //151128
      ,(nat32)0 //V4 CropSyst proper does not have cycle shifting
      ,scenario_control_and_model_ops
      ,today
      ,geocoordinate
      ,*meteorology
      ,desired_variables
      #if (CS_VERSION==4)
      ,CS_event_log
      #endif
      ,&(arguments.provide_scenario_directory())
      ,arguments.get_override_format_file_name()
      ,verbose                                                                   //160311
      ,true);
   add_land_block_fragment(land_unit_with_output);                               //030616
*/
#ifdef DEBUG_ANNUAL_CARBON_MASS
annual_carbon_mass << "year\t SOM_C_mass_30cm \t SOM_C_mass_profile \t  microbial_C_mass_30cm \t microbial_C_mass_profile \t labile_C_mass_30cm \t labile_C_mass_profile  \t metastable_C_mass_30cm  \t metastable_C_mass_profile  \t passive_C_mass_30cm \t passive_C_mass_profile" << endl;
#endif
/*V5 requires full compement of weather elements
   Location_parameters *location_loaded_by_LADSS = load_location_parameters();   //030911
*/

/* remplement V5 will handle GIS differently (I.e. scenario composition and command line argument options
   if (GIS_override_table && location_loaded_by_LADSS)                           //010516
      GIS_override_table->get(*location_loaded_by_LADSS); // Get the override of location parameters  //010516
*/
   // If soil file is not specified, discover it
   file_discovery.find_and_reset_missing_parameter_file_name
      (template_scenario.soil_filename
      ,L"CS_soil",L"sil");
   // if rotation file is not specified, discover it
   file_discovery.find_and_reset_missing_parameter_file_name
      (template_scenario.rotation_filename
      ,L"CS_rotation",L"rot");
   // if fixed management  file is not specified, discover it
   file_discovery.find_and_reset_missing_parameter_file_name
      (template_scenario.fixed_management_filename
      ,L"CS_management",L"mgt");                                                 //160407
   file_discovery.find_and_reset_missing_parameter_file_name
      (template_scenario.recalibration_filename
      ,L"rcl",L"rcl");                                                           //160510
   file_discovery.find_and_reset_missing_parameter_file_name
      (template_scenario.water_table_filename
      ,L"wtb",L"wtb");                                                           //160513
   // NYI single crop, I need to check ramifications of this, it should be OK    //160407
   file_discovery.find_and_reset_missing_parameter_file_name
      (template_scenario.weather_filename                                        //030911
       #if (CS_VERSION==4)
       ,L"UED",L"LOC");
       #else
       ,L"UED");
       #endif


/* land unit sim initializes soil because each land unit must have its own soil profile
      initialized &= initialize_soil();                                                       //131113
*/
      //160726 decided not to do this database_file = new UED::Database_file_indexed(template_scenario.weather_filename.c_str());

   weather_DB_daily = new Weather_database_daily_UED (template_scenario.weather_filename,today);

   if (geolocation.get_elevation() < 0.0)
       geolocation.set_elevation_meter(global_elevation_mean_meter);
          // negative elevation is deemed invalid.
          // also AgMIP uses -99 as missing indicator.

   if (!geolocation.is_valid())
   {  // If a the geolocation is not specified for the site is not valid
      // use the geolocation specified in the weather UED file (if any)
      weather_DB_daily->get_geocoordinate(geolocation);
   }

   meteorology = new CS::Land_unit_meteorological(today,geolocation);
   weather_daily = new Weather_daily(geolocation,today);
   Weather_provider &weather_provider = weather_daily->provide_weather_provider();
   weather_DB_daily->know_weather_provider(&weather_provider);

   meteorology->sun_days   = &weather_daily->provide_sun_days();
   meteorology->sun_hours  = &weather_daily->provide_sun_hours();


/*

   if (!geolocation.is_valid())
   {  // If a the geolocation is not specified for the site is not valid
      // use the geolocation specified in the weather UED file (if any)

      weather_DB_daily->get_geocoordinate(geolocation);
   }
   if (geolocation.get_elevation() < 0.0)
          geolocation.set_elevation_meter(global_elevation_mean_meter);
          // negative elevation is deemed invalid.
          // also AgMIP uses -99 as missing indicator.
   float64 longitude_radians = geolocation.get_longitude_radians();          //151208_071116
   float64 standard_meridian_radians = longitude_radians; // Currently we do not have standard meridian in geolocation so simply using the longitude. 071116
   CS::Solar_irradiance_extraterrestrial_hourly *ET_solar_irrad                  //151215
         = new CS::Solar_irradiance_extraterrestrial_hourly
            (geolocation,*sun_days,*sun_hours,today);
   Weather_provider *weather_provider =                                          //151221
      new Weather_provider
               (today,geolocation,*ET_solar_irrad
               // currently no generation ,weather_database->get_location_parameters()
               );
   meteorology->submit_extraterrestrial_solar_irradiance                         //151215
         (ET_solar_irrad);
   meteorology->submit_weather_provider(weather_provider);                       //151215
*/
/*
   meteorology->know_extraterrestrial_solar_irradiance                         //151215
         (weather_daily->provide_ET_solar_irrad());
*/
   meteorology->know_weather_provider(&(weather_daily->provide_weather_provider()));                       //151215

         /* NYI  160525

   UED_File_name storms_filename("storms.UED");
      //we can always check for existing storms file even in LADSS
      // This is temporary, should use file discovery

   Minutes water_entering_soil_timestep_minutes = 60;                            //160511 070116
      const float32*  mean_peak_rainfall
         = template_scenario.mean_peak_rainfall;

   // Note that Storms could be simulation element
      CS::meteorology::Storms *storms = (CORN::OS::file_system_engine.exists(storms_filename))

         ? (CS::meteorology::Storms *)new CS::meteorology::Storms_database
               (today
               ,weather_extension->curr_precipitation                            //151027
               ,mean_peak_rainfall
               ,storms_filename)
         :

         (weather_extension->weather_data->get_location_parameters() &&
             mean_peak_rainfall != 0)
            ? (CS::meteorology::Storms *)new CS::meteorology::Storms_hyeotographic
               (today
               ,weather_extension->curr_precipitation                            //151027
               ,mean_peak_rainfall
               ,existing_LBF->scenario_control_and_model_options.default_event_duration_minutes
               ,false
               )
            : (CS::meteorology::Storms *)new    CS::meteorology::Storms_uniform
               (today
               ,weather_extension->curr_precipitation                            //151027
               ,mean_peak_rainfall
               ,false
               ,water_entering_soil_timestep_minutes
               ,(Minutes)existing_LBF->scenario_control_and_model_options.default_event_duration_minutes);
      meteorology->take_storms(storms);                                       //151215
         */

   meteorology->know_weather_spanning(*weather_DB_daily);                        //151215
      // meteorology will provide hourly weather as needed
   if (template_scenario.simulate_CO2)
      meteorology->setup_CO2                                                     //151130
         (template_scenario.recalibration_filename
         ,template_scenario.initial_CO2_conc                                     //160531
         ,template_scenario.annual_CO2_change                                    //160531
         ,ref_start_date()                                                       //151203
         ,ref_stop_date()                                                        //151203
         ,today);                                                                //151203

   //160731 will be initialized by rotator meteorology->initialize();
   know_meteorological(meteorology);

   //initialized &= CS::Rotator::append(weather_DB_daily);
   initialized &= CS::Rotator::append(meteorology);

// V5 will use explainations
   // can't list the required variables until we know the number of sublayers

   // This schedule output is temporary
   // and all rotator cycle are written to the same file.
   // Eventually there will be an explaination file for each cycle.

/* Special output
#ifndef __linux
#ifdef SOIL_TEMP_DEBUG
   soil_temp_hourly.open(land_unit_with_output.scenario_directory->output().
        soil_temp_hourly_dat.c_str());  //041114
#endif
#endif
*/
/*
   if (!verbose) //160311 ( batch_mode )
   {  active_model_options.fast_graph = false;
      active_model_options.display_profile = false;
      display_full = false;
   }
*/
/* Special output
#ifdef TXT_OUTPUT
                           output_file << (T_date_Date) << ',';
               if (crop)   crop->txt_header_output(output_file);
                           ET_weather.txt_header_output(output_file);
                           soil->txt_header_output(output_file);
                           output_file << endl;
                           output_file << soil->num_sublayers << endl;
#endif
*/
/* special output
#ifdef DETAIL_DENITR
//061024 This is a special output wanted by Javier it is only temporary
//CORN::OS::Directory_entry_name_concrete scenario_output_dir(provide_scenario_directory_name(),"Output");
CORN::OS::File_name_concrete detail_denitr_dates_fname      (provide_scenario_directory_name(), "detail_denitr_dates.txt");
// detail_denitr_dates_fname.set_path(land_unit_with_output.scenario_directory);
if (CORN::OS::file_system_engine.exists(detail_denitr_dates_fname))
{
   ifstream detail_denitr_dates_file(detail_denitr_dates_fname.c_str());
   while ( !detail_denitr_dates_file.eof())
   {
      Date32 period_start = 0;
      Date32 period_end = 0;
      detail_denitr_dates_file >> period_start >> period_end;
      if (period_start && period_end)
         detail_denitr_dates.append(new Detail_denitr_date_range(period_start,period_end));
   }
}
#endif
*/
/*CS::Simulation_engine initialize land unit
   initialized &= land_unit_with_output->initialize();                           //160311
*/

   /* Not sure if needed (was in V4 CropSyst_Model)
   process_triggered_syncronizations();                                          //130926
   */

   initialized &= CS::Rotator::initialize();

   return initialized;
}
//_2016-05-15___________________________________________________________________
bool Simulation_engine::start()                                    modification_
{  return
      weather_daily->start()
   && CS::Rotator::start();
}
//_2016-07-31___________________________________________________________________

/*150615 Not currently needed now because meteorology is now added to subelements list

don't delete until I decide what to do about grazing

bool Simulation_engine::process_day()                                 modification_
{  bool processed = true;
   //160525 now added to  subelements processed &= meteorology.process_day();
   processed &= CS::Simulation_engine::process_day();

   #ifdef NYN
   This was for grazing model (not sure if going to reimplement)
   if (!viable) {days_not_viable += 1; viable = true; }                          //040828
   if (primary_crop && primary_crop->ref_phenology().is_in_growing_season()
   // THIS NEEDS TO BE IMPLEMENTED
   // I have moved in_growing_season to Phenology_common::is_in_growing_season
   // but there was a check for (!biomass_fate_today)
   // that was needed we din't want to return true if the is fate to dispose
   // I am not sure if that condition is still relevent
   )
   season_grazing_req_stats_kg_ha.append(per_m2_to_per_ha(land_unit_with_output->grazing_BM_demand_today_kg_m2));  //050107
   #endif
   return processed;
}
*/
//_2016-05-15___________________________________________________________________
nat16 Simulation_engine::desire_AgMIP_variables()                    initialization_
{  nat16 vars_appended = 31;
      // NYI eventually append should return bool and then we simply sum the count of appends
      desired_variables.append(CSVC_crop_biomass_yield_period_sum);
      desired_variables.append(CSVC_crop_biomass_produced_above_ground_period_sum);
      desired_variables.append(CSVC_crop_base_peak_LAI_time_step_max);
      desired_variables.append(CSVC_crop_base_flowering_date_YD);
      desired_variables.append(CSVC_crop_base_maturity_date_YD);
      desired_variables.append(CSVC_soil_N_leached_period_sum);
      desired_variables.append(CSVC_soil_base_water_drainage_period_sum);
      desired_variables.append(CSVC_crop_N_mass_yield_period_sum);               //120117
      desired_variables.append(CSVC_weather_ET_act_period_sum);
      desired_variables.append(CSVC_weather_ET_ref_period_sum);                  //130724
      desired_variables.append(CSVC_soil_N_mineralization_period_sum);
      //desired_variables.append(CSVC_mgmt_N_organic_gaseous_loss_period_sum);
      desired_variables.append(CSVC_mgmt_N_inorganic_gaseous_loss_period_sum);
      desired_variables.append(CSVC_soil_N_immobilization_period_sum);
      desired_variables.append(CSVC_organic_matter_mineralized_period_sum);
      desired_variables.append(CSVC_soil_N_denitrification_period_sum);

      // daily
      desired_variables.append(CSVC_crop_biomass_yield);
      desired_variables.append(CSVC_crop_biomass_canopy);
      desired_variables.append(CSVC_crop_base_leaf_area_index);
      desired_variables.append(CSVC_soil_N_leached_accum_to_date_time);
      desired_variables.append(CSVC_crop_N_mass_canopy_production_accum_to_date_time); //131007
      desired_variables.append(CSVC_crop_N_mass_canopy_current);                 //131007
      desired_variables.append(CSVC_soil_base_water_drainage_accum_to_date_time);
      desired_variables.append(CSVC_weather_ET_act_accum_to_date_time);
      desired_variables.append(CSVC_weather_ET_ref_accum_to_date_time);          //130724

      desired_variables.append(CSVC_organic_matter_mineralized_accum_to_date_time);
      desired_variables.append(CSVC_mgmt_N_inorganic_gaseous_loss_accum_to_date_time);
      desired_variables.append(CSVC_soil_N_immobilization_accum_to_date_time);
      desired_variables.append(CSVC_soil_N_denitrification_time_step_sum);
      desired_variables.append(CSVC_soil_base_plant_avail_water);
      desired_variables.append(CSVC_organic_matter_N_mineralization_profile_time_step_sum);
      desired_variables.append(CSVC_organic_matter_mineralized_time_step_sum);
   return vars_appended;
}
//_2016-03-12__________________________________________________________________/
Databases &Simulation_engine::provide_databases()
{  if (!databases)
   {  databases = new CS::Databases(*provide_scenario_directory());
   }
   return *databases;
}
//_2016-09-16___________________________________________________________________
Parameter_stores  &Simulation_engine::provide_stores()
{  if (!stores)
   {  stores = new Parameter_stores(provide_databases());
   }
   return *stores;
}
//_2016-09-16___________________________________________________________________
const CropSyst::Scenario_directory *Simulation_engine::provide_scenario_directory() provision_
{

   return &arguments.provide_scenario_directory();

}
//_2016-05-30___________________________________________________________________


}
//______________________________________________________________________________


} // name CropSyst::V5
//______________________________________________________________________________

