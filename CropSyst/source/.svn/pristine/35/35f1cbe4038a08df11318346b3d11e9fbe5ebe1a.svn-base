#include "soil/tillage_effect.h"
#include "soil/soil_interface.h"
#include "soil/hydraulic_properties.h"
#include "soil/structure_common.h"
#include "soil/sublayers.h"
#include "soil/disturbance.h"
#include "soil/texture_interface.h"
#include "soil/erosion_RUSLE.h"
#ifndef compareHPP
#  include "corn/math/compare.hpp"
#endif
#include <math.h>
#ifndef moremathH
#  include "corn/math/moremath.h"
   using namespace std;
#endif
#  ifndef Soil_N_INTERFACE_H
#     include "soil/nitrogen_interface.h"
#  endif
//______________________________________________________________________________
Soil_tillage_effect::Soil_tillage_effect
(Soil_interface            *_soil
,Soil_sublayers            *_layers                                              //061004
,Soil_hydraulic_properties *_hydraulic_properties // Owned by soil
,RUSLE::Soil_erosion       *_erosion)
:soil(_soil)
,layers(_layers)
,hydraulic_properties(_hydraulic_properties)
,soil_structure((Soil_structure_common *)soil->ref_structure())                  //160412
,erosion(_erosion)
,hydraulic_properties_hold_while_dust_mulch(0)
,structure_hold_while_dust_mulch(0)
,layers_hold_while_dust_mulch(0)
,dust_mulch_remaining_days(0)
,dust_mulch_evaporation_today(0)
,disturbance(0)
,first_tillage(true)
{}
//_2006-09-29_________________________________Soil_tillage_effect_constructor__/
Soil_tillage_effect::~Soil_tillage_effect()
{  if (disturbance)                                delete disturbance;                                disturbance = 0;                                //060807
   if (hydraulic_properties_hold_while_dust_mulch) delete hydraulic_properties_hold_while_dust_mulch; hydraulic_properties_hold_while_dust_mulch = 0; //051204
   if (structure_hold_while_dust_mulch)            delete structure_hold_while_dust_mulch; structure_hold_while_dust_mulch = 0;                       //051204
   if (layers_hold_while_dust_mulch)               delete layers_hold_while_dust_mulch;               layers_hold_while_dust_mulch = 0;               //061003
}
//____________________________________________~Soil_tillage_effect_destructor__/
bool Soil_tillage_effect::start_day()
{  dust_mulch_evaporation_today = 0;
   return true;                                                                  //140822
}
//__________________________________________________________________start_day__/
bool Soil_tillage_effect::process()
{  if (dust_mulch_remaining_days)                                                //051205
       dust_mulch_remaining_days -= 1;
   if  (                                                                         //061003
        //NYI     (act_water_entering_soil > 0.0)  ||     // any surface water
       (dust_mulch_remaining_days == 0))   // or settled
   {
      if (hydraulic_properties_hold_while_dust_mulch)                            //051205
      {  // restore the soil hydraulic properties to original state
         hydraulic_properties->copy(*hydraulic_properties_hold_while_dust_mulch);
         delete hydraulic_properties_hold_while_dust_mulch; hydraulic_properties_hold_while_dust_mulch = 0;
      }
      if (structure_hold_while_dust_mulch)                                       //051205
      {  // restore the soil hydraulic properties to original state
         soil_structure->copy(*structure_hold_while_dust_mulch);
         delete structure_hold_while_dust_mulch; structure_hold_while_dust_mulch = 0;
      }
      if (layers_hold_while_dust_mulch)                                          //051205
      {  // restore the soil hydraulic properties to original state
         Soil_hydrology_interface *soil_hydrology = soil->mod_hydrology();
         for (uint8 layer = 1; layer <= layers->get_number_layers(); layer++)    //071212
         {  float64 old_water_content_lyr = soil_hydrology->get_liquid_water_content_volumetric(layer);;
            float64 old_thickness_lyr     = layers->get_thickness_m(layer);
            float64 new_thickness_lyr     = layers_hold_while_dust_mulch->get_thickness_m(layer);
            correct_water_content_for_new_soil_properties
            (   layer
            ,  old_water_content_lyr
            ,  old_thickness_lyr
            ,  new_thickness_lyr
            ,soil_hydrology);
         }
         layers->copy(*layers_hold_while_dust_mulch);                            //051205
         delete layers_hold_while_dust_mulch; layers_hold_while_dust_mulch = 0;  //051205
      }
   }
   if (disturbance)                                                              //060807
      //170217unused bool disturbance_continues =
      disturbance->process();                       //060810
   return hydraulic_properties_hold_while_dust_mulch || disturbance;             //061026
}
//____________________________________________________________________process__/
void Soil_tillage_effect::clod_the_soil
(int16 doy,float64 till_clod_factor)
{ // calculate clodfactor
#ifdef EROSION
   if (erosion)
   {  if (first_tillage)        // first tillage operation this run?
      {  first_tillage = false;
         if (till_clod_factor > 0.0)
            erosion->clodding_factor = till_clod_factor;
      } else if (till_clod_factor > 0.0)
         erosion->clodding_factor +=
            (erosion->clodding_factor  <=  0.55)
            ?  0.15
            :  (erosion->clodding_factor  <=  0.75)
               ? 0.10
               : 0.05;
      // there is a maximum value FOR the clodfactor
      if (erosion->clodding_factor > 1.2)  erosion->clodding_factor = 1.2;
      // Aug,31 OR tillage after Aug,31
      // McCool, pers. comm.; code Sep90 by Frits von Evert
      // from Sep 1 through April 1, clodfactor approaches 1.0
      // a clodfactor larger than 1.0 is reduced by rain
      // a clodfactor smaller than 1.0 is increased by aggregation
      // the rate of change needs TO be recalculated every day because
      // of tillage after Aug,31
      int16 days_till_apr_1 = (int16)((doy > 91)?(365 - doy + 91):(91 - doy));
      if (days_till_apr_1 == 0)  days_till_apr_1 = 1;  //avoid div 0
      if ((doy >= 244) || (doy <= 91))
      {  erosion->clod_factor_rate = (erosion->clodding_factor <=  0.85)
            ? (0.15 / days_till_apr_1)
            : ((1.0 - erosion->clodding_factor) / days_till_apr_1);
         erosion->clodding_factor += erosion->clod_factor_rate;
      }
   }
//981217   Clod factor_rate is some times negative, I am not sure if this is valid - RLN
#endif
}
//______________________________________________________________clod_the_soil__/
bool Soil_tillage_effect::dust_mulching(float32 to_depth_m, Days stays_mulched_max_days,float32 dust_mulch_intensity_32)
{
   // Dust mulching is a tillage operation that
   // changes the top of the soil (to a specified depth)
   // to have sand like hydraulic properties.
   // This helps prevent evaporation.
   // The soil stays in this conditions for the specified number
   // of days or until a significant precipitation event.
   Soil_hydrology_interface *soil_hydrology = soil->mod_hydrology();             //160412_061128
   if (!soil_hydrology) return false;                                            //061128
   // There is almost always soil hydrology, but could be 0 if running no soil water limitations.
   if (CORN::is_approximately<float64>(dust_mulch_intensity_32,0.0,0.00001))     //061128
      return false; // No effective intensity                                    //061128
   dust_mulch_remaining_days = (uint16)std::max<int16>((int16)dust_mulch_remaining_days,(int16)stays_mulched_max_days);
   if (hydraulic_properties_hold_while_dust_mulch)
      return true; // We are already under dust mulch so just reset the time remaining as above
   else
   {  // We are not already under dust mulch so start the condition.
      uint8 max_mulch_layer = soil->ref_layers()->get_layer_at_depth(to_depth_m);//070828
      // Currently just getting the layer at the max mulching depth
      // but may need  be the layer before if this depth is less
      // than half have way into the layer at the depth.
      hydraulic_properties_hold_while_dust_mulch = new Soil_hydraulic_properties(*hydraulic_properties,*soil->ref_layers());
      structure_hold_while_dust_mulch = new Soil_structure_common(*soil_structure); //070725
      layers_hold_while_dust_mulch = new Soil_sublayers(*layers);                //061003
      for (uint8 layer = 1; layer <= max_mulch_layer; layer++)
      {
         // Now changing the volume of the soil in the affected layers

//061128 No longer setting layers affected by dust mulch to sand like properties.
//061128 obsolete    // Change the layer hydraulic properties to a sand like like texture.
//061128 obsolete    // Using the following Stand texture as the basis
//061128 obsolete    // Silt 5
//061128 obsolete    // Clay 3
//061128 obsolete    // Sand 92
//061128 obsolete    // Note that we shouldn't need to change the texture values
//061128 obsolete    // they are not used after initialization.
//061128 obsolete    hydraulic_properties->set_saturation_water_content_volumetric  (layer,0.326); // sand like saturation

         float64 dust_mulch_intensity = (float64) dust_mulch_intensity_32;       //071212
            // Need to convert to double precision because SunStudio complains;
         //170217 unused float64 dust_mulch_intensity_factor =  1.0 - dust_mulch_intensity;   //051212

//070827  Need to fix this to use liquid WC  and abort events where freezing soil conditions

         float64 old_water_content_lyr = soil_hydrology->get_liquid_water_content_volumetric(layer);  //061128
            // This was liquid water content, but probably should be total, anyway tillage probably never occurs during freezing
         float64 old_thickness_lyr = layers->get_thickness_m(layer);             //061128
         // Correct bulk density (must be done first inorder to get new layer thickness)
         float64 old_bulk_density = soil_structure->get_bulk_density_g_cm3(layer);//061003
         float64 new_bulk_density =  old_bulk_density - (old_bulk_density - 0.9) *  dust_mulch_intensity;
         soil_structure->set_bulk_density_g_cm3(layer,new_bulk_density);         //070725
         hydraulic_properties->change_bulk_density_g_cm3(layer,new_bulk_density);//070725
         // Correct soil layer thickness for the new volume

            // WARNING! Claudio needs to check this.
            // I am presuming the layer thickness is inversely proportional to bulk density

         float64 new_thickness_lyr = old_thickness_lyr * old_bulk_density/ new_bulk_density; //061004
         layers->thickness[layer] = new_thickness_lyr;                           //061004
         { // adjust air entry potential parameter  //061128
            float64 absolute_old_air_entry_pot_FC_PWP_based = fabs(hydraulic_properties_hold_while_dust_mulch->get_air_entry_potential(layer,true));
            float64 absolute_new_air_entry_pot_FC_PWP_based = (absolute_old_air_entry_pot_FC_PWP_based - pow(dust_mulch_intensity,0.25) * (absolute_old_air_entry_pot_FC_PWP_based - 0.5));
            float64 new_air_entry_pot_FC_PWP_based = -absolute_new_air_entry_pot_FC_PWP_based;
            hydraulic_properties->set_air_entry_potential_FC_PWP_based(layer,new_air_entry_pot_FC_PWP_based);
            float64 absolute_old_air_entry_pot = fabs(hydraulic_properties_hold_while_dust_mulch->get_air_entry_potential(layer,false));
            float64 absolute_new_air_entry_pot = absolute_old_air_entry_pot
               - pow(dust_mulch_intensity,0.25) * (absolute_old_air_entry_pot - 0.5);
            float64 new_air_entry_pot =  -absolute_new_air_entry_pot;
            hydraulic_properties->set_air_entry_potential_parameter(layer,new_air_entry_pot);
            { // adjust  saturated_hydraulic_cond                                //061128
               float64 new_saturated_hydraulic_cond = 0.0007 * pow(absolute_new_air_entry_pot_FC_PWP_based,-1.1132);
               if (new_saturated_hydraulic_cond < 0.003)
                  hydraulic_properties->set_saturated_hydraulic_conductivity_kg_s_m3
                     (layer,new_saturated_hydraulic_cond);
            }
         }
         {  correct_water_content_for_new_soil_properties                        //071212
               (layer,old_water_content_lyr,old_thickness_lyr,new_thickness_lyr,soil_hydrology);

            // Saturation water content should become smaller because the soil volume increases //061128

            // WARNING Claudio, please verify equation

            float64 old_saturation_water_content_lyr =hydraulic_properties_hold_while_dust_mulch->get_saturation_water_content_volumetric(layer,ICE_WATER_CONTENT_RELEVENCE_UNKNOWN_140822);
            float64 old_saturation_water_depth_lyr = old_saturation_water_content_lyr * old_thickness_lyr;
            float64 new_saturation_water_content_lyr = old_saturation_water_depth_lyr / new_thickness_lyr;
            hydraulic_properties->set_saturation_water_content_volumetric(layer,new_saturation_water_content_lyr);
         }
      }
   }
   return true;
}
//_2005-12-03___________________________________________________dust_mulching__/
bool Soil_tillage_effect::correct_water_content_for_new_soil_properties
( uint8  layer
, float64 old_water_content_lyr
, float64 old_thickness_lyr
, float64 new_thickness_lyr
, Soil_hydrology_interface *soil_hydrology)
{  // Correct liquid water content since the soil mass has a new volume
   // Volumetric water content should become smaller because the soil volume increases
   // WARNING Claudio, please verify equation
   float64 water_depth_m_lyr = old_water_content_lyr *  old_thickness_lyr;
   float64 new_water_content_lyr = water_depth_m_lyr / new_thickness_lyr;
   soil_hydrology->set_water_content_volumetric_layer(layer,new_water_content_lyr);
   return true;
}
//_2006-11-28___________________correct_water_content_for_new_soil_properties__/
bool Soil_tillage_effect::respond_to_field_operation // I.e. tillage
(float64 tillage_op_depth_m            //VB  T_Depth = ManagementState.TillageDepth
,float64 tillage_op_mixing_fraction    //VB  T_Mix = ManagementState.TillageMixingFraction
,nat8    field_op_soil_disturbance_rating
,const   CropSyst::Tillage_operation::Oxidation_effect *oxidation_effect  // optional (currently only applies to tillage
)
{
   if (   CORN::is_approximately<float64>(tillage_op_depth_m        ,0.0,0.00001)
       || CORN::is_approximately<float64>(tillage_op_mixing_fraction,0.0,0.00001))
      return false; // This operation did not affect the soil
   soil_layer_array64(clay_fraction);                       clear_layer_array64(clay_fraction);                      // VB Dim Clay_Mass_Fraction(6) As Single
   soil_layer_array64(sand_fraction);                       clear_layer_array64(sand_fraction);                      // VB Dim Sand_Mass_Fraction(6) As Single
   soil_layer_array64(water_mass_content);                  clear_layer_array64(water_mass_content);                 // VB Dim Mass_Water_Content(6) As Single
// I think these N masses are molecular (probably would work either way)
   soil_layer_array64(nitrate_N_mass_content);              clear_layer_array64(nitrate_N_mass_content);               // VB Dim Nitrate_Content(6) As Single
   soil_layer_array64(ammonium_N_mass_content);             clear_layer_array64(ammonium_N_mass_content);              // VB Dim Ammonium_Content(6) As Single
   soil_layer_array64(phosphorus_mass_content);             clear_layer_array64(phosphorus_mass_content);              // VB Dim Phophorus_Content_Mixed(6) As Single
   soil_layer_array64(soil_mass_remaining_after_tillage);   clear_layer_array64(soil_mass_remaining_after_tillage);  // VB Layer_Soil_Mass_Remaining_After_Tillage
   soil_layer_array64(soil_mass_mixed_after_tillage);       clear_layer_array64(soil_mass_mixed_after_tillage);      // VB Dim Layer_Soil_Mass_Mixed_After_Tillage(6) As Single

   const Soil_layers_interface  *soil_layers =  soil->ref_layers();
   uint8 last_tilled_layer = soil_layers->get_layer_at_depth(tillage_op_depth_m);    // VB last_tilled_layer = ManagementState.LastLayerTilled
//#define LOCAL_MASS_BALANCE_CHECK
#ifdef LOCAL_MASS_BALANCE_CHECK
float64 Initial_Sum = 0;
float64 Final_Sum = 0;
#endif
   modifiable_ Soil_nitrogen_interface   *soil_N              = soil->mod_nitrogen();   //160412
   //170271unused now Soil_hydraulic_properties_interface *hydraulic_properties= soil->mod_hydraulic_properties(); //160412
   Soil_texture_interface              *texture             = soil->mod_texture();     //160412
   Soil_hydrology_interface            *hydrology           = soil->mod_hydrology();   //160412
   // Returns the current soil hydrology state and process object.
   // Generally this is required in derived classes.
   // Generally derived classes will return the object.

   soil_layer_array64(soil_mass_kg_m2); clear_layer_array64(soil_mass_kg_m2);     // VB Dim Layer_Soil_Mass(6) As Single
   // Retrieve mass-base contents.  All in unit of kg per kg of soil
   for (nat8 layer = 1; layer <= last_tilled_layer; layer++)
   {  // 070314 now uste get_mass_kg_m2 float64 bulk_density_layer_kg_m3 = hydraulic_properties->get_bulk_density_kg_m3(layer);
      float64  soil_mass_layer_kg_m2 = soil_mass_kg_m2[layer] = soil->get_mass_kg_m2(layer) ; // 070314 soil_mass_kg_m2[layer] = bulk_density_layer_kg_m3 * soil_layers->get_thickness_m(layer);
      clay_fraction[layer] = texture->get_clay_percent(layer) / 100.0;
      sand_fraction[layer] = texture->get_sand_percent(layer) / 100.0;
      float64 bulk_density_layer_g_cm3 = soil_structure->get_bulk_density_g_cm3(layer);
      water_mass_content[layer] = hydrology->get_liquid_water_content_volumetric(layer) / bulk_density_layer_g_cm3;
      if (soil_N)
      {  nitrate_N_mass_content[layer]   = soil_N->get_NO3_N_mass_kg_m2(layer)  / soil_mass_layer_kg_m2;
         ammonium_N_mass_content[layer]  = soil_N->get_NH4_N_mass_kg_m2(layer)  / soil_mass_layer_kg_m2;
      }
//NYI        phosphorus_mass_content[layer] = SoilState.LayerPhosphorusMass(Year, DOY, i) / soil_mass_layer_kg_m2;
#ifdef LOCAL_MASS_BALANCE_CHECK
        Initial_Sum = Initial_Sum + nitrate_mass_content[layer];
#endif
    }
    // These masses are the sum of the tilled layers  (RLN also kg/kg ?)
    float64 total_soil_mass_mixed      = 0;  // VB Dim Total_Soil_Mass_Mixed As Single
    float64 clay_mixed_mass_content    = 0;  // VB Dim Clay_Content_Mixed As Single
    float64 sand_mixed_mass_content    = 0;  // VB Dim Sand_Content_Mixed As Single
    float64 water_mixed_mass_content   = 0;  // VB Dim Water_Content_Mixed As Single
    float64 nitrate_mixed_N_mass_content = 0;  // VB Dim Nitrate_Content_Mixed As Single
    float64 ammonium_mixed_N_mass_content = 0; // VB Dim Ammonium_Content_Mixed As Single
//NYI    float64 phosphorus_mixed_mass_content = 0   // VB Phophorus_Content_Mixed
   float64 bottom_depth_layer_above = 0;
   for (nat8 layer = 1; layer <= last_tilled_layer; layer++)
   {
      float64 soil_mass_layer_kg_m2 = soil_mass_kg_m2[layer];
      float64 bottom_depth_layer = soil_layers->get_depth_m(layer);
      if (bottom_depth_layer <= tillage_op_depth_m)
      {  // tillage apply for the full depth of the layer
         soil_mass_remaining_after_tillage[layer] = (1.0 - tillage_op_mixing_fraction) * soil_mass_kg_m2[layer];
         soil_mass_mixed_after_tillage[layer] = soil_mass_layer_kg_m2 * tillage_op_mixing_fraction;
      } else if ((bottom_depth_layer > tillage_op_depth_m) && (bottom_depth_layer_above < tillage_op_depth_m))
      {
         float64 thickness_layer = soil_layers->get_thickness_m(layer);
         soil_mass_mixed_after_tillage[layer] = tillage_op_mixing_fraction * soil_mass_layer_kg_m2 * (tillage_op_depth_m - bottom_depth_layer_above) / thickness_layer; // weights the mixing by the fraction of the layer affected by tillage
         soil_mass_remaining_after_tillage[layer] = soil_mass_layer_kg_m2 - soil_mass_mixed_after_tillage[layer];
      } else
      { // this else is redundant, as if there is no tillage there is no mixing, keep it here for clarity
            soil_mass_remaining_after_tillage[layer] = soil_mass_layer_kg_m2;
            soil_mass_mixed_after_tillage[layer] = 0;
      }
      clay_mixed_mass_content       = (total_soil_mass_mixed * clay_mixed_mass_content             + soil_mass_mixed_after_tillage[layer] * clay_fraction[layer])          / (total_soil_mass_mixed + soil_mass_mixed_after_tillage[layer]);
      sand_mixed_mass_content       = (total_soil_mass_mixed * sand_mixed_mass_content             + soil_mass_mixed_after_tillage[layer] * sand_fraction[layer])          / (total_soil_mass_mixed + soil_mass_mixed_after_tillage[layer]);
      water_mixed_mass_content      = (total_soil_mass_mixed * water_mixed_mass_content            + soil_mass_mixed_after_tillage[layer] * water_mass_content[layer])     / (total_soil_mass_mixed + soil_mass_mixed_after_tillage[layer]);
      nitrate_mixed_N_mass_content    = (total_soil_mass_mixed * nitrate_mixed_N_mass_content          + soil_mass_mixed_after_tillage[layer] * nitrate_N_mass_content[layer])   / (total_soil_mass_mixed + soil_mass_mixed_after_tillage[layer]);
      ammonium_mixed_N_mass_content   = (total_soil_mass_mixed * ammonium_mixed_N_mass_content         + soil_mass_mixed_after_tillage[layer] * ammonium_N_mass_content[layer])  / (total_soil_mass_mixed + soil_mass_mixed_after_tillage[layer]);
//NYI      phosphorus_mixed_mass_content = (total_soil_mass_mixed * phosphorus_mixed_mass_content  + soil_mass_mixed_after_tillage[layer] * phosphorus_mass_content[layer])/ (total_soil_mass_mixed + soil_mass_mixed_after_tillage[layer]);
      total_soil_mass_mixed += soil_mass_mixed_after_tillage[layer];
      bottom_depth_layer_above = bottom_depth_layer;
   }
   // RLN Even though we are resetting water and nitrogen contents, the mass balance should be preserved because we are just moving things around.
   for (nat8 layer = 1; layer <= last_tilled_layer; layer++)
   {
      float64 soil_mass_layer_kg_m2 = soil_mass_kg_m2[layer];
      float64 soil_mass_remaining_after_tillage_layer = soil_mass_remaining_after_tillage[layer];
      float64 new_clay_fraction = (clay_fraction[layer] * soil_mass_remaining_after_tillage_layer + clay_mixed_mass_content * soil_mass_mixed_after_tillage[layer]) / soil_mass_layer_kg_m2;
      float64 clay_percent =new_clay_fraction * 100.0;
      float64 new_sand_fraction = (sand_fraction[layer] * soil_mass_remaining_after_tillage_layer + sand_mixed_mass_content * soil_mass_mixed_after_tillage[layer]) / soil_mass_layer_kg_m2;
      float64 sand_percent= new_sand_fraction * 100.0;
      texture->set_sand_clay(layer,sand_percent,clay_percent);
      float64 new_water_mass_content = (water_mass_content[layer] * soil_mass_remaining_after_tillage_layer + water_mixed_mass_content * soil_mass_mixed_after_tillage[layer]) / soil_mass_layer_kg_m2;
      float64 bulk_density_layer = soil_structure->get_bulk_density_g_cm3(layer);
      // RLN Warning here we are presuming liquid water content (tillage in frozen soil unlikely).
      float64 new_water_content_volumetric_layer = new_water_mass_content * bulk_density_layer;
      float64 current_WC = hydrology->get_liquid_water_content_volumetric(layer);
      float64 change_WC =  new_water_content_volumetric_layer - current_WC;
      hydrology->change_liquid_water_content_by_volumetric(layer,change_WC);
      if (soil_N)
      {  // I think these masses are molecular
         float64 new_nitrate_mass_content_layer = (nitrate_N_mass_content[layer] * soil_mass_remaining_after_tillage_layer + nitrate_mixed_N_mass_content * soil_mass_mixed_after_tillage[layer]) / soil_mass_layer_kg_m2;
         float64 new_nitrate_N_mass = new_nitrate_mass_content_layer * soil_mass_layer_kg_m2;
         // set the NO3 value
         soil_N->set_NO3_N_mass_kg_m2(layer,new_nitrate_N_mass);
         float64 new_ammonium_mass_content_layer = (ammonium_N_mass_content[layer] * soil_mass_remaining_after_tillage_layer + ammonium_mixed_N_mass_content * soil_mass_mixed_after_tillage[layer]) / soil_mass_layer_kg_m2;
         float64 new_ammonium_N_mass =new_ammonium_mass_content_layer * soil_mass_layer_kg_m2;
         soil_N->set_NH4_N_mass_kg_m2(layer,new_ammonium_N_mass);
      }
//NYI    New_Phophorus_Content = (phosphorus_mass_content[layer] * soil_mass_remaining_after_tillage_layer + phosphorus_mixed_mass_content * soil_mass_mixed_after_tillage[layer]) / soil_mass_layer_kg_m2
//NYI    SoilState.LayerPhosphorusMass(Year, DOY, i) = New_Phophorus_Content * soil_mass_layer

#ifdef LOCAL_MASS_BALANCE_CHECK
    Final_Sum = Final_Sum + chemicals->NO3->amount_M[layer];
#endif
   } // End for layer
#ifdef LOCAL_MASS_BALANCE_CHECK
if (Final_Sum != 0)
cout << "Soil mix mass balance:" <<Final_Sum  << endl;
#endif
   if (!disturbance)
      disturbance = new Soil_disturbance(*soil->ref_hydrology(),*soil->ref_texture());    //160412
   disturbance->add_rating((float64)field_op_soil_disturbance_rating,last_tilled_layer);
   if (oxidation_effect) disturbance->set_oxidation_effect(*oxidation_effect);
   return true;
}
//_________________________________________________respond_to_field_operation__/
// 070815 383 lines

