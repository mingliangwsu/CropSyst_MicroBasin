#ifndef canopy_growthH
#define canopy_growthH
#include "corn/const.h"
#include "crop/crop_types.h"
#include "corn/container/bilist.h"
#include "corn/chronometry/time_types.hpp"
#include "crop/growth_stages.hpp"
class Canopy_growth_LAI_based_parameters;
class Residue_decomposition_parameters;
class Residues_interface;
class Crop_thermal_time_interface_immutable;
namespace CropSyst {
class Crop_parameters;
}

namespace CropSyst {
class Crop_biomass;
class Crop_nitrogen_interface;
//---------------------------------------------------------------------------
interface_ Canopy_growth_interface
{
   inline virtual ~Canopy_growth_interface() {}                                  //151204
   virtual bool initialize()                                        modification_= 0;
   virtual bool invalidate()                                        modification_= 0;
   virtual bool update()                                                 updates_= 0;
   virtual bool process()                                           modification_= 0;//080910
   virtual bool start()                                             modification_= 0;//080811
   virtual bool restart_with
      (float64 restart_biomass,float64 restart_GAI
      ,bool use_clumping_factor = true)                             modification_= 0;
   // Temporal processiong
   virtual bool start_day()                                         modification_= 0;//080801
   virtual bool emerge_cotyledon
      (float64 new_cotyledon_GAI
      ,float64 new_cotyledon_BM)                                    modification_= 0;//080728
//141021   inline virtual void know_start_senescence()                     modification_ { /*new to V5 used only by Canopy_growth_leaf_area_index_based_V5 */ };//130610
   inline virtual bool start_senescence()                           modification_ {return true;}//141121
   inline virtual bool start_culminescence()                        modification_ {return true;}//141121
   virtual bool end_season(bool apply_dormancy)                     modification_= 0;//080401
   // Event processiong
   virtual bool respond_to_clipping()                               modification_= 0;//080515
   virtual void die_back(float64 fraction_to_die)                   modification_= 0;
   virtual float64 damage_GAI(float64 GAI_damage)                   modification_= 0;//151226
      ///< kills the specified GAI_damage.
      ///  \returns the amount of live GAI remaining.
   virtual void terminate()                                         modification_= 0;//080728
   virtual float64 remove_biomass                                                //070412
      (float64 biomass_to_remove
      ,float64 retain_living // GAI or fCCg retain_GAI        // biomass won't be removed if it takes the GAI below this level. Use 0.0 for no limitation
      ,bool remove_newest_first
      ,bool reserve_todays_portion
      ,Crop_biomass &removed_biomass )                             modification_= 0;
         // Return about of biomass removed
   virtual float64 remove_all_biomass
      (Crop_biomass &removed_biomass)                               modification_= 0;
   // status query
   virtual float64 get_biomass_current(uint8 include_biomass)              const = 0; // The current biomass (Some may have decomposed) 060601
   virtual float64 get_influence_on_root_activity_factor(bool after_end_of_vegetative_growth)      const = 0;  //080805
   virtual float64 get_fract_canopy_cover()                                const = 0; // eventually rename to get_fract_canopy_cover_total
   virtual modifiable_ float64 &reference_fract_canopy_cover()      modification_= 0;  // only for output? 080801
   virtual void know_residues(Residues_interface *_residues)                     = 0;//060531

   virtual float64 global_solar_rad_intercepted_green_canopy()             const = 0;  //110906 Appears to be used only for CO2

   // The following will require something equivelent in the canopy based model
   virtual float64 calc_fract_cover
      (float64 xAI
      , bool photosynthetic_active_rad_based
      ,bool use_clumping_factor = true                                           //080801
      ,bool record_shading_porosity_interception = false )                 const = 0; //000623
      // for fruit trees the default record_shading_porosity_interception is true 081104

   virtual float64 get_senescence_reduction_factor()                       const = 0; //080807
   virtual float64 get_adjusted_ET_crop_coefficient()                      const = 0; //080811
   virtual float64 calc_plant_development                                             //990215
      (float64 length_max
      ,float64 last_length
      ,float64 overall_growth_stress)                                      const = 0; //080805
   // probably only for output, canopy cover based will probaby not need this
   virtual float64 get_GAI(nat8 include_GAI)                              const = 0;
   virtual float64 get_LAI()                                               const = 0; //060824
   virtual float64 get_LAI(bool from_canopy)                               const = 0; //080728
   // probably used elsewhere in the model
   virtual float64 get_live_green_biomass(bool include_vital,bool include_effete) const = 0;
   // The following only apply the LAI based mode
   virtual bool age_leaf
      (float64  thermal_time_growing_degree_day
      ,float64 water_stress_index)                                  modification_= 0; //070328
   virtual bool develop_leaf // _or_age_leaf
     (bool continue_leaf_growth
     ,float64 canopy_growth
     ,float64 LAI_related_growth  // Today's LAI related growth
     ,float64  thermal_time_growing_degree_day)                     modification_= 0; //080728
   virtual float64 update_LAI_for_self_shading_response(float32 accum_deg_days) modification_= 0;
   virtual float64 know_LWP_yesterday(float64 _LWP_yesterday)          cognition_=0;
   virtual float64 get_PAR_solar_rad_intercepted_green_canopy(Normal_crop_event_sequence/*130920 nat32*/  growth_stage)    const = 0;
   virtual float64 get_global_solar_rad_intercepted_green_canopy(Normal_crop_event_sequence/*130920 nat32*/  growth_stage) const = 0;
   /*151030
   #ifdef CO2_CHANGE
   virtual float64 get_CO2_TUE_adjustment()                                const = 0;
   #endif
   */
   virtual float64 get_reported_peak_LAI()                                 const = 0;//141203
   virtual float64 get_peak_LAI()                                          const = 0;//141203
//130625    virtual const float64 &ref_biomass_current()                            const = 0; //130625
};
//______________________________________________________________________________
//151006 #if (CROPSYST_VERSION==5)
}
//151006 #endif
#endif

