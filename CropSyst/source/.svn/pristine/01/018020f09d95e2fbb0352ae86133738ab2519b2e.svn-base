
#include "organic_matter/OM_residues_profile_abstract.h"
#include "land_unit_with_output.h"
#include "UED/library/controls.h"
#include "crop/crop_interfaced.h"
#include "soil/chemicals_profile.h"
#include "soil.h"
#include "common/weather/weather.h"
#include "corn/data_source/vv_file.h"
#include "cs_scenario_directory.h"
#include "output.h"
#include "cs_ET.h"
#include "cs_simulation.h"
#include "crop/crop_cropsyst.h"
#ifdef NITROGEN
#include "soil/nitrogen_profile.h"
#endif
#include <iomanip>
#ifdef RUSLE_DETAIL
#  include "soil/erosion_RUSLE.h"
#include "weather/storms.h"
#endif
#include "csvc.h"
#include "soil/chemical_balance.h"

using namespace std;
extern ofstream dbg_nitr;
extern float64 N2O_from_nitrification_daily;
#include "crop/canopy_growth_cover_based.h"
using namespace CropSyst;  // Not eventually everything will be under Cropsyst

#ifdef DUMP_CURVE_NUMBERS
namespace CropSyst
{
   extern std::ofstream *SCS_runoff_dat_file;                                    //131216
}
#endif
extern CS_UED_variable_code fast_graph_variables[];                              //160303
#ifdef CROPSYST_PROPER
extern bool harvest_event_failed_today ; // this is a check for Mike Rivingtons spreadsheet
#endif
namespace CropSyst {
//______________________________________________________________________________
Land_unit_with_output::Land_unit_with_output
(const CS::Identification           &LBF_ID_                                     //151026
, nat32                              cycle_shift_                                //151026
, CropSyst::Scenario                &scenario_control_and_model_options_         //130827
,const CORN::Date32 &today_                                                //170525
       //170525 , const CORN::Date                  &today_                                      //130619
, const Geocoordinate               &geocoordinate_                              //151116
,const CS::Land_unit_meteorological &meteorology_                                //151128
#if (CS_VERSION==4)
,Common_simulation_log              &event_log_
#endif
,const CropSyst::Scenario_directory *scenario_directory_                         //050619
,CS::Desired_variables       *daily_desired_vars_)                               //170225_041021
: Land_unit_simulation
   (LBF_ID_
   ,cycle_shift_
   ,scenario_control_and_model_options_                                          //130827
   ,today_                                                                       //130619
   ,geocoordinate_                                                               //151116
   ,meteorology_
   #if (CS_VERSION==4)
   ,event_log_
   #endif
   ,scenario_directory_)
#ifdef EXTENDS_LAND_UNIT_OUTPUT
, Land_unit_output
   (*this
   ,LBF_ID_
   ,cycle_shift_
   ,scenario_control_and_model_options_
   ,today_
   ,geocoordinate_
   ,meteorology_
   #if (CS_VERSION==4)
   ,event_log_
   #endif
   ,scenario_directory_
   ,daily_desired_vars_ )
#else
//170315 The following have been moved to Land_unit_output
,harvest_UED_db         (0)
,harvest_data_src_rec   (0)
,season_UED_db          (0)
,season_data_src_rec    (0)
,annual_UED_db          (0)
,annual_data_src_rec    (0)
#ifndef CS_INSPECTOR_VERSION
,daily_UED_db           (0)  // NYI get this from the scenario                   //030715
,daily_UED_data_src     (0)                                                      //030715
,daily_data_rec         (*this,*daily_desired_vars_)                             //030715
#endif
#if (defined(XLS_OUTPUT) || defined(UED_OUTPUT))
,daily_desired_vars           (daily_desired_vars_)                              //041021
#endif
,output_flags           (OUTPUT_COMPLETE)                                        //151227
#endif // EXTENDS_LAND_UNIT_OUTPUT
{
   if (!daily_desired_vars_)  // disable daily output if no desired variable     //151227
   {  output_flags ^= OUTPUT_DAILY;                                              //151227
   }
   #if (CROPSYST_PROPER == 5)
   //160530 temporarily output everything for debugging
   output_flags |= OUTPUT_DAILY;
   #endif
}
//_2004-10-21___________________________________________________________________
bool Land_unit_with_output::stop()                                 modification_ //160306
{
   bool stopped = Land_unit_simulation::stop();                                  //160306
   #ifdef EXTENDS_LAND_UNIT_OUTPUT
   //obsolete
   stopped &= Land_unit_output::stop();                                                      //170315
   #else
   //170315 The following is moved to Land_unit_output
   std::string event_description("Simulation period");
   if (latest_simulated_date < scenario_control_and_model_options.stop_date.get_date32()) //110104
      event_description.append(" (ended prematurely)");
   Datetime64 start_date64 = scenario_control_and_model_options.start_date .get_datetime64(); //110104
   Datetime64 end_date64 = latest_simulated_date;                                //110104
   UED::Period_record simulation_period                                          //041012
      (event_description.c_str()
      ,(nat32 )(UED_period_start_date_option | UED_period_end_date_option |UED_period_application_code_option)
      ,start_date64
      ,end_date64 // use current date because the simulation may be prematurely terminated
      ,SIMULATION_PERIOD // appl code
      ,0 // no enumeration
      ,0 // no index
      ,0 // no variable code
      );
   // Not sure why this is crashing in REACCH_VERSION (daily output is only for debug)                           160310
   #ifndef CS_INSPECTOR_VERSION
   if (daily_UED_db)
   {
      daily_UED_db   ->set_period(simulation_period);
      daily_UED_db->finish();
      delete daily_UED_db;
   }
   delete daily_UED_data_src;
   #endif
   if (harvest_UED_db)
   {
      harvest_UED_db ->set_period(simulation_period);                            //041012
      #ifndef REACCH_VERSION
      // Don't know why crashing in REACCH version
      delete harvest_UED_db;        harvest_UED_db = 0;
      #endif
   }
   if (harvest_data_src_rec)  delete harvest_data_src_rec;  harvest_data_src_rec = 0;
   if (season_UED_db)
   {  season_UED_db  ->set_period(simulation_period);                            //041012
      delete season_UED_db;         season_UED_db = 0;
   }
   delete season_data_src_rec;   season_data_src_rec = 0;
   if (annual_UED_db)
   {  annual_UED_db  ->set_period(simulation_period);                            //041012
      delete annual_UED_db;         annual_UED_db = 0;
   }
   delete annual_data_src_rec;   annual_data_src_rec = 0;
   #endif
   return stopped;                                                               //160306
}
//______________________________________________________________________________
bool Land_unit_with_output::initialize()                         initialization_ //151227
{  bool inited = CropSyst::Land_unit_simulation::initialize();
   #ifdef EXTENDS_LAND_UNIT_OUTPUT
   inited = Land_unit_output::initialize();                                      //170315
   #else
   //170315 The following is moved to Land_unit_output
   #ifndef linux
   //160303 moved from CS_mod
   #if (defined(XLS_OUTPUT) || defined(UED_OUTPUT))
   if (scenario_control_and_model_options.fast_graph && daily_desired_vars)      //160303
      daily_desired_vars->append_array_null_terminated(fast_graph_variables);    //160303
         // null terminated                                                      //100702
   #endif
   #endif
   if (!inited) std::cerr << "CropSyst::Land_unit_simulation::initialize failed" << std::endl;
   {  // Open output options and get desired variables                           //041031
      Scenario_output_options output_options;                                    //041031
      VV_File output_opts_file                                                   //041031
         (scenario_control_and_model_options.output_options_filename_rel.c_str()); //130827_041031
         // NYI In version 5 the output options should be (optionally?)
         // specified on the command line (or taken from the project).
      output_opts_file.get(output_options);                                      //041031
      #if (defined(XLS_OUTPUT) || defined(UED_OUTPUT))
      if (daily_desired_vars)                                                    //140105
      output_options.list_required_variables(*daily_desired_vars);               //140104_041031
      #endif
   }
   if ((output_flags & OUTPUT_DAILY) && daily_desired_vars)                      //170227_151227
   {
      CORN::OS::File_name_concrete daily_UED_filename_qual
         (get_output_directory_name(),"daily","UED");                            //160309
      #ifndef CS_INSPECTOR_VERSION
      daily_UED_db         = new CropSyst_UED_database
            (daily_UED_filename_qual.c_str()
            ,(std::ios_base::out)
            ,scenario_control_and_model_options.start_date);
      daily_UED_data_src   = new CS_UED_tuple_data_source(daily_UED_db);
      daily_UED_db->write_generating_application((nat16)CS_VERSION_CODE,"CropSyst"); //140105
      #endif
   }
   #ifdef USE_CS_SIMULATION_ROTATOR
   // The simulation rotator doesn't write annual UED files for each scenario
   // The UED records are stored in memory and will be aggregated.                  //140119
   annual_UED_db        = new UED::Database_file_indexed(0,(std::ios_base::out),false);
   CORN::OS::File_name_concrete season_UED_filename(get_output_directory_name()  ,"season.UED");   //160305
   CORN::OS::File_name_concrete harvest_UED_filename(get_output_directory_name() ,"harvest.UED");  //160305
   CORN::OS::File_name_concrete annual_UED_filename(get_output_directory_name()  ,"annual.UED");   //160305

   harvest_UED_db = new UED::Database_file_indexed(harvest_UED_filename.c_str(),(std::ios_base::out),false); //160305
   season_UED_db  = new UED::Database_file_indexed(season_UED_filename .c_str(),(std::ios_base::out),false); //160305
   annual_UED_db  = new UED::Database_file_indexed(annual_UED_filename .c_str(),(std::ios_base::out),false); //160305

   #else
   harvest_UED_db       = new UED::Database_file_indexed(scenario_directory->CS_output_harvest_UED_cstr,(std::ios_base::out),false);
   season_UED_db        = new UED::Database_file_indexed(scenario_directory->CS_output_season_UED_cstr ,(std::ios_base::out),false);
   annual_UED_db        = new UED::Database_file_indexed(scenario_directory->CS_output_annual_UED_cstr ,(std::ios_base::out),false);
   #endif
   harvest_UED_db ->write_generating_application((nat16)CS_VERSION_CODE,"CropSyst");     //140105
   season_UED_db  ->write_generating_application((nat16)CS_VERSION_CODE,"CropSyst");     //140105
   annual_UED_db  ->write_generating_application((nat16)CS_VERSION_CODE,"CropSyst");     //140105

   harvest_data_src_rec = new Harvest_data_source(harvest_UED_db);
   season_data_src_rec  = new Season_data_source(season_UED_db);
   annual_data_src_rec  = new Annual_data_source(annual_UED_db);
   /*170329 soil is an accessible member
   #if ((CROPSYST_VERSION >=5 ) || defined(USE_CS_LAND_UNIT))
   //140918  Soil_interface should work in all versions, but not tested yet
   #else
   const CropSyst::Soil *soil = ref_soil();                                      //060803
   #endif
   */
   #ifdef NITROGEN
   Soil_chemicals_profile *soil_chemicals = get_soil_chemicals();
   if (soil_chemicals)                                                           //161206
   {
      Chemical_balance_accumulators *NO3_GP_bal_accums = (soil_chemicals ->NO3) ? soil_chemicals->NO3->GP_bal_accums_current: 0;  //050114
      Chemical_balance_accumulators *NH4_GP_bal_accums = (soil_chemicals ->NH4) ? soil_chemicals->NH4->GP_bal_accums_current: 0;  //050114
      season_data_src_rec->N_soil_profile_initial                                //161130
         = NO3_GP_bal_accums->get_current_profile_content(true)
         + NH4_GP_bal_accums->get_current_profile_content(true);
   }
   #endif
   season_data_src_rec->soil_water_profile_init
      = soil->ref_hydrology()->provide_water_depth_profile(true);                //160412_151227
      // This is actually only needed for REACCH
   season_data_src_rec->soil_available_water_15_init
      = soil->ref_hydrology()->calc_available_water_depth_to(1.5);               //160601
      // Special output
   std::string weather_description;                                              //050916
/*NYI actually should get from weather file is possible  151208
       (scenario_control_and_model_options.provide_geolocation()->get_station_ID_code())
*/
   // Should be able to move this to land_unit_output_V4                         //160529
   #ifndef CS_INSPECTOR_VERSION
   #if (defined(XLS_OUTPUT) || defined(UED_OUTPUT))
   if (daily_UED_data_src && daily_desired_vars)                                 //170227_140105_111221
       daily_UED_data_src->register_fields
       (*daily_desired_vars,soil->layers->get_number_sublayers(),UT_arbitrary_date);   //140105_041014
   #endif
   if (daily_UED_db)                                                             //111221
       daily_UED_db->initialize_with_descriptions                                //030715
         (scenario_control_and_model_options.description.brief                   //150112_130827
         ,weather_description
         ,soil->parameters_ownable->description.brief                            //150112
         ,scenario_control_and_model_options.fast_graph);
   #endif
   #endif  // EXTENDS_LAND_UNIT_OUTPUT
   return inited;
}
//_________________________________________________________________initialize__/
void Land_unit_with_output::harvest_event
(const CropSyst::Crop_interfaced &_crop_at_harvest)                modification_ //131008
{
   #ifdef EXTENDS_LAND_UNIT_OUTPUT
   Land_unit_output::harvest_event(_crop_at_harvest);
   #else
   //170315 The following is moved to Land_unit_output
   harvest_data_src_rec->update(_crop_at_harvest);                               //070228 was crop crop_active
   harvest_data_src_rec->record((Datetime64)get_today_date32());
   #endif
}
//______________________________________________________________________________
nat32 Land_unit_with_output::perform_triggered_synchronizations_today()
{  nat32 performed = 0;
#ifdef EXTENDS_LAND_UNIT_OUTPUT
   performed += Land_unit_output::perform_triggered_synchronizations_today();
#else
#ifndef REACCH_VERSION
//#ifdef CROPSYST_PROPER
/*141222 RLN this was broken (although corrected now)
 * It is not necessary to check every day if period changes
 * We can now output the periods (as recorded in phenology)
 * Once at the end of the season.
 * This hasn't been implemented yet so dont delete this until reimplemented
*/
   modifiable_ CropSyst::Crop_interfaced *crop_active = crop_active_or_intercrop;//130719_131008NS
   if (crop_active)
   {
      const CropSyst::Phenology_interface &phenology = crop_active->ref_phenology();
      bool planted_today =
         phenology.started_today((Normal_crop_event_sequence)NGS_PLANTING);      //151005

      if (planted_today) latest_growth_stage_entered = NGS_PLANTING;
      if ((!latest_sync_date) || planted_today)
         latest_sync_date = (Datetime64)get_today_date32(); // If we haven't had a period yet, then today is just the start of the period.
      nat32  period_options = UED_period_start_date_option | UED_period_end_date_option |UED_period_application_code_option|UED_period_index_option|UED_period_enumeration_option|UED_period_variable_code_option;
      if (!latest_sync_date) latest_sync_date = (Datetime64)get_today_date32(); // If we haven't had a period yet, then today is just the start of the period.
      Normal_crop_event_sequence current_growth_stage
         = phenology.get_growth_stage_sequence();                                //141222
      if ((latest_growth_stage_entered!=NGS_NONE)
           && (current_growth_stage != latest_growth_stage_entered))
      {
         std::string period_description(get_growth_stage_description(latest_growth_stage_entered,false));  //140103 NYI crop_active-> parameters_ownable->is_fruit_tree()
         period_description.append(":");
         period_description.append(crop_active->get_description());
         UED::Period_record growthstage_period
            (period_description.c_str(),period_options,latest_sync_date
            ,today.get_datetime64(),GROWTH_STAGE_PERIOD
            ,latest_growth_stage_entered
            ,phenology.get_initiation_date(NGS_RESTART).get_date32()             //151005
            ,CSVC_crop_base_growth_stage);                                       //140114_050208
         latest_sync_date = (Datetime64)get_today_date32();
         #ifndef CS_INSPECTOR_VERSION
         if (daily_UED_db)                                                       //111221
             daily_UED_db->set_period(growthstage_period);
         #endif
         harvest_UED_db->set_period(growthstage_period);                         //041012
         season_UED_db->set_period(growthstage_period);                          //041012
      }
      latest_growth_stage_entered = current_growth_stage;                        //141222
   }
#endif
   #endif
   performed += CropSyst::Land_unit_simulation_VX::perform_triggered_synchronizations_today();
   return performed;
}
//_2014-01-03___________________________________________________________________
bool Land_unit_with_output::start()                                              //130620
{
   bool started = Land_unit_simulation_VX::start();                              //080929
   #ifdef EXTENDS_LAND_UNIT_OUTPUT
   started &= Land_unit_output::start();                                         //170315
   #endif
#ifdef NYI
080306 This was an attempt to output the initial data for annual reports,
but the output manager or export utility is not setup to process this.
   CORN::Date day_before_start(today); day_before_start.dec();
   DOY doy = today.get_DOY();
   if (doy == 1)
   {  // If the the simulation start date in Jan 1 then we can
      // output the initial values as if for the previous year
      // When the simulation is not started on Jan 1 outputting
      // initial values as if for the previous year would be confusing an misleading
      Year year = day_before_start.get_year();
      if (annual_data_src_rec)
      {  annual_data_src_rec->update(*get_soil() ,*ANNL_accumulators_active
            ,organic_matter_residues_profile_kg_m2 ? organic_matter_residues_profile_kg_m2->ref_residues() : 0
         ,organic_matter_residues_profile_kg_m2
               ,pond,LBF_ID,year );
         annual_data_src_rec->record(day_before_start.get_datetime64());
      }
   }
   // Currently only outputing initial values for annual outputs
   // Eventually we may add others.
#endif
   return started;                                                               //080929
}
//_2008-03-06___________________________________________________________________
bool Land_unit_with_output::end_day()
{  // We call Land_unit_simulation_VX:: end_day first because it update accumulators
   bool result = true;
   result &= Land_unit_simulation_VX::end_day();
   #ifdef EXTENDS_LAND_UNIT_OUTPUT
   result &= Land_unit_output::end_day();                                        //170315
   #else
   //170315 The following is moved to Land_unit_output
   #ifndef CS_INSPECTOR_VERSION
   if (daily_UED_data_src && daily_desired_vars)                                 //170227_111228
   {
      daily_UED_data_src->set_date(today.get_datetime64());                      //070228
      //#ifndef REACCH_VERSION
      // This is crashing in REACCH
      daily_UED_data_src->set(daily_data_rec);                                   //070228
      //#endif
   }
   #endif
   #endif
   return result;
}
//_2007-02-27___________________________________________________________________
bool Land_unit_with_output::start_growing_season                                 //160324
      #if ((REACCH_VERSION==2) || (CS_VERSION >= 5) || defined(INTERCROPPING) || defined(OFOOT_VERSION))
      (modifiable_ CropSyst::Crop_interfaced &crop_at_start_season)
      #else
      ()
      #endif
{  bool started = Land_unit_simulation_VX::start_growing_season
      #if ((REACCH_VERSION==2) || (CS_VERSION >= 5) || defined(INTERCROPPING) || defined(OFOOT_VERSION))
      (crop_at_start_season);
      #else
      ();
      #endif
   #ifdef EXTENDS_LAND_UNIT_OUTPUT
   started &= Land_unit_output::start_growing_season                             //170315
      #if ((REACCH_VERSION==2) || (CS_VERSION >= 5) || defined(INTERCROPPING) || defined(OFOOT_VERSION))
      (crop_at_start_season);
      #else
      ();
      #endif
   #else
   //170315 The following is moved to Land_unit_output
   if (season_data_src_rec && soil)                                              //160324
   {
      #ifdef NITROGEN
      Soil_chemicals_profile *soil_chemicals = get_soil_chemicals();             //161130
      if (soil_chemicals)                                                        //161206
      {
         Chemical_balance_accumulators *NO3_GP_bal_accums = (soil_chemicals->NO3) ? soil_chemicals->NO3->GP_bal_accums_current: 0;  //050114
         Chemical_balance_accumulators *NH4_GP_bal_accums = (soil_chemicals->NH4) ? soil_chemicals->NH4->GP_bal_accums_current: 0;  //050114
         season_data_src_rec->N_soil_profile_initial                                //161130
            = NO3_GP_bal_accums->get_current_profile_content(true)
            + NH4_GP_bal_accums->get_current_profile_content(true);
      }
      #endif
      season_data_src_rec->soil_water_profile_init                               //160324
         = soil->ref_hydrology()->provide_water_depth_profile(true);             //160412_160324
      season_data_src_rec->soil_available_water_15_init
         = soil->ref_hydrology()->calc_available_water_depth_to(1.5);            //160601
   }
   #endif
   return started;
}
//_2016-03-23__________________________________________________________________/
bool Land_unit_with_output::end_growing_season
#if ((REACCH_VERSION==2) || (CROPSYST_VERSION >= 5) || defined(INTERCROPPING)|| defined(OFOOT_VERSION))
(CropSyst::Crop_interfaced &_crop_at_end_season)                                 //131008NS
#else
()
#endif
{  bool result = true;
   #ifdef EXTENDS_LAND_UNIT_OUTPUT
   result &= Land_unit_output::end_growing_season
      #if ((REACCH_VERSION==2) || (CROPSYST_VERSION >= 5) || defined(INTERCROPPING)|| defined(OFOOT_VERSION))
      (_crop_at_end_season);
      #else
      ();
      #endif
   #else
   //170315 The following is moved to Land_unit_output
   output_growing_season
   #if ((REACCH_VERSION==2) || (CROPSYST_VERSION >= 5) || defined(INTERCROPPING)|| defined(OFOOT_VERSION))
      (_crop_at_end_season);                                                     //130716
   #else
      ();                                                                        //070227
   #endif
   #endif
   result &= //170315 bool result =
      Land_unit_simulation_VX::end_growing_season
      #if ((REACCH_VERSION==2) || (CROPSYST_VERSION >= 5) || defined(INTERCROPPING)|| defined(OFOOT_VERSION))
      (_crop_at_end_season);                                                     //130716
      #else
      ();                                                                        //041118
      #endif
   #ifdef CROPSYST_PROPER
   harvest_event_failed_today = false;                                           //16020 This was in CS_mod.cpp
   //141222 latest_growth_stage_entered will be obsolete once I reimplement the output of phenology periods.
   latest_growth_stage_entered = NGS_NONE;                                       //041205
   #endif
   return result;                                                                //070321
}
//______________________________________________________________________________
void Land_unit_with_output::output_growing_season
#if ((REACCH_VERSION==2) || (CROPSYST_VERSION >= 5) || defined(INTERCROPPING)|| defined(OFOOT_VERSION))
(const CropSyst::Crop_interfaced &_crop_at_end_season)                           //131008NS
#else
()
#endif
{
#ifdef EXTENDS_LAND_UNIT_OUTPUT
   Land_unit_output::output_growing_season(_crop_at_end_season);
#else
   //170315 The following is moved to Land_unit_output
#if ((REACCH_VERSION==2) || (CROPSYST_VERSION >= 5) || defined(INTERCROPPING)|| defined(OFOOT_VERSION))
   const CropSyst::Crop_interfaced *crop_at_end_season = &_crop_at_end_season; // this line is just temporary eventually we will use reference every where in this method //131008NS
#else
   if (!crop_at_end_season) return;                                              //050209
#endif
   Datetime64 planting_or_restart_date                                           //041205
      = crop_at_end_season->
         ref_phenology().get_initiation_date(NGS_PLANTING).get_datetime64();     //041205_151005

   /* NYI Output each of the stages
   for each growth_stage
   if the stage start date of growth_stage is valid (started)
   {
      nat32  period_options = UED_period_start_date_option | UED_period_end_date_option |UED_period_application_code_option|UED_period_index_option|UED_period_enumeration_option|UED_period_variable_code_option;
      //if (!latest_sync_date) latest_sync_date = (Datetime64)get_today_date32(); // If we haven't had a period yet, then today is just the start of the period.
      //Normal_crop_event_sequence current_growth_stage = crop_active->ref_phenology().get_growth_stage_sequence(); //141222
      {
         std::string period_description(get_growth_stage_description(latest_growth_stage_entered,false)); //140103 NYI crop_active-> parameters_ownable->is_fruit_tree()));
         period_description.append(":");
         period_description.append(crop_active->get_description());
         UED::Period_record growthstage_period
            (period_description.c_str()
            ,period_options
            ,growth stage start date
            ,growth stage end date
            ,GROWTH_STAGE_PERIOD,latest_growth_stage_entered,crop_active->get_restart_date().get_date32(),CSVC_crop_base_growth_stage); //140114_050208
         latest_sync_date = (Datetime64)get_today_date32();
         #if ((REACCH_VERSION<2) || defined(_DEBUG))
         if (daily_UED_db)                                                       //111221
         daily_UED_db->set_period(growthstage_period);
         #endif
         harvest_UED_db->set_period(growthstage_period);                         //041012
         season_UED_db->set_period(growthstage_period);                          //041012
      }
   }
   */

   UED::Period_record season_period                                              //041012
      (crop_at_end_season->get_description() // "Growing season"
      ,UED_period_start_date_option      |UED_period_end_date_option
      |UED_period_application_code_option|UED_period_index_option
      |UED_period_variable_code_option   |UED_period_variable_code_option
      ,planting_or_restart_date                                                  //041205
      ,today.get_datetime64()                                                    //140105_070227
      ,GROWING_SEASON_PERIOD
      ,0 // no enumeration
      ,crop_at_end_season->
            ref_phenology().get_initiation_date(NGS_RESTART)                     //151005
            .get_date32() // The start/restart date is not used to uniquely identify the season
      ,CSVC_crop_base_name);  // NO CSVC
   //output growing season period to UED files
   #if (CROPSYST_VERSION >= 5)
   // I want to output the  management file/designation
   #endif
   // Not sure why this is crashing for REACCH //160309
   #ifndef CS_INSPECTOR_VERSION
   if (daily_UED_db)                                                             //111221
       daily_UED_db->set_period(season_period);
   #endif
   harvest_UED_db->set_period(season_period);                                    //041012
   season_UED_db->set_period(season_period);                                     //041012
   annual_UED_db->set_period(season_period);                                     //041012
   #ifdef CHEM_PROFILE
   Soil_chemicals_profile *soil_chemicals = get_soil_chemicals();
   #endif
   #ifdef NITROGEN
   Chemical_balance_accumulators *NO3_GP_bal_accums = (soil_chemicals && soil_chemicals ->NO3) ? soil_chemicals->NO3->GP_bal_accums_current: 0;  //050114
   Chemical_balance_accumulators *NH4_GP_bal_accums = (soil_chemicals && soil_chemicals ->NH4) ? soil_chemicals->NH4->GP_bal_accums_current: 0;  //050114
   #endif
   /*170329
   #if ((CROPSYST_VERSION >=5 ) || defined(USE_CS_LAND_UNIT))
   //140918  Soil_interface should work in all versions, but not tested yet
   #else
   const CropSyst::Soil *soil = ref_soil();                                      //060803
   #endif
   */
   season_data_src_rec->update
      (*crop_at_end_season
      ,*soil
      ,GP_accumulators_active
      #ifdef NITROGEN
      ,NO3_GP_bal_accums                                                         //050114
      ,NH4_GP_bal_accums                                                         //050114
      #endif
      ,pond
      ,(organic_matter_residues_profile_kg_m2 ? organic_matter_residues_profile_kg_m2->mod_residues() : 0)
      ,ID.number);                                                               //151026
   season_data_src_rec->record((Datetime64)get_today_date32());
#endif
}
//_2005-01-14____________________________________________output_growing_season_/
bool Land_unit_with_output::end_year()
{  bool result = Land_unit_simulation_VX::end_year();
   #ifdef EXTENDS_LAND_UNIT_OUTPUT
   result &= Land_unit_output::end_year();
   #else
   //170315 The following is moved to Land_unit_output
   /*170329 soil is an accessable member
      #if ((CROPSYST_VERSION >=5 ) || defined(USE_CS_LAND_UNIT))
      //140918  Soil_interface should work in all versions, but not tested yet
      #else
       CropSyst::Soil *soil = mod_soil();                                        //060803
      #endif
   */
   if (annual_data_src_rec)                                                      //050114
   {  annual_data_src_rec->update(*soil,*ANNL_accumulators_active                //050114
         ,organic_matter_residues_profile_kg_m2
            ? organic_matter_residues_profile_kg_m2->mod_residues() : 0          //050726
         ,organic_matter_residues_profile_kg_m2
         ,pond,ID.number,today.get_year());                                      //151026
      annual_data_src_rec->record(today.get_datetime64());                       //140224_050114
   }
   #ifndef CS_INSPECTOR_VERSION
   #ifdef REACCH_VERSION
   // This may have been crashing in proper (it was marked as NYI) //160310
   if (daily_UED_db)
      daily_UED_db->finish();
   #endif
   #endif
   #endif
   return result;                                                                //111031
}
//_2001-02-02___________________________________________________________________
bool Land_unit_with_output::start_year()                           modification_
{  // Note that this isn't necessarily Jan 1, so we need to use the current date
   bool started = true;
   #ifdef EXTENDS_LAND_UNIT_OUTPUT
   started &= Land_unit_output::start_year();                                    //170315
   #else
   //170315 The following is moved to Land_unit_output
   /*170329 soil is a member it should be available
   #if ((CROPSYST_VERSION >=5 ) || defined(USE_CS_LAND_UNIT))
   //140918  Soil_interface should work in all versions, but not tested yet
   #else
   const CropSyst::Soil *soil = ref_soil();                                      //161008_060803
   #endif
   */
   #ifndef CS_INSPECTOR_VERSION
   if (daily_UED_db)                                                             //111221
   {  /*170329land_unit_simulation.*/soil->output_layering            (*daily_UED_db);
      /*170329land_unit_simulation.*/soil->output_hydraulic_properties(*daily_UED_db); // This was added for Marcello and Andrea Di Guardo  //070209
   }
   #endif
   #ifdef CHEM_PROFILE
   Soil_chemicals_profile *soil_chemicals = get_soil_chemicals();
   #ifdef NITROGEN
   NO3_Profile *NO3 = soil_chemicals ? soil_chemicals->NO3 : 0;
   NH4_Profile *NH4 = soil_chemicals ? soil_chemicals->NH4 : 0;
   if (NO3 && NH4)                                                               //020529
   {  if (NO3) NO3->update_YLY_bal_reporter();
      if (NH4) NH4->update_YLY_bal_reporter();
   }
   // reporters must be updated before we reset accumulators in start_of_year
   #endif
   #endif
   #endif
   started &= Land_unit_simulation_VX::start_year();
   return started;
}
//_2004-10-14___________________________________________________________________
} // namespace CropSyst

//060306 263 lines
//060727 237 lines

